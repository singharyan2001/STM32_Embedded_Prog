
A00_STM32F411RE_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001708  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080018a0  080018a0  000028a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018e0  080018e0  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080018e0  080018e0  000028e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018e8  080018e8  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018e8  080018e8  000028e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080018ec  080018ec  000028ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080018f0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  0800194c  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  0800194c  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002726  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000091c  00000000  00000000  000057b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000338  00000000  00000000  000060d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000251  00000000  00000000  00006408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039e8  00000000  00000000  00006659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003485  00000000  00000000  0000a041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c435  00000000  00000000  0000d4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000198fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012fc  00000000  00000000  00019940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0001ac3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001888 	.word	0x08001888

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08001888 	.word	0x08001888

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <GPIOx_PClkControl>:
#include "GPIO_Driver.h"

/*
 * GPIO Peripheral - GPIO Peripheral Clock Control API Definition
 */
void GPIOx_PClkControl(GPIOx_RegDef_t *pGPIOx_Base, uint8_t EN_DI){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(EN_DI == CLK_EN){
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d141      	bne.n	800027e <GPIOx_PClkControl+0x96>
		if(pGPIOx_Base == GPIOA){
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a45      	ldr	r2, [pc, #276]	@ (8000314 <GPIOx_PClkControl+0x12c>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIOx_PClkControl+0x28>
			GPIOA_PCLK_EN();
 8000202:	4b45      	ldr	r3, [pc, #276]	@ (8000318 <GPIOx_PClkControl+0x130>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000206:	4a44      	ldr	r2, [pc, #272]	@ (8000318 <GPIOx_PClkControl+0x130>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOH_PCLK_DI();
		}
		else{
		}
	}
}
 800020e:	e07a      	b.n	8000306 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOB){
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a42      	ldr	r2, [pc, #264]	@ (800031c <GPIOx_PClkControl+0x134>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIOx_PClkControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b3f      	ldr	r3, [pc, #252]	@ (8000318 <GPIOx_PClkControl+0x130>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021c:	4a3e      	ldr	r2, [pc, #248]	@ (8000318 <GPIOx_PClkControl+0x130>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000224:	e06f      	b.n	8000306 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOC){
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a3d      	ldr	r2, [pc, #244]	@ (8000320 <GPIOx_PClkControl+0x138>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIOx_PClkControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b3a      	ldr	r3, [pc, #232]	@ (8000318 <GPIOx_PClkControl+0x130>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000232:	4a39      	ldr	r2, [pc, #228]	@ (8000318 <GPIOx_PClkControl+0x130>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800023a:	e064      	b.n	8000306 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOD){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a39      	ldr	r2, [pc, #228]	@ (8000324 <GPIOx_PClkControl+0x13c>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIOx_PClkControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b34      	ldr	r3, [pc, #208]	@ (8000318 <GPIOx_PClkControl+0x130>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a33      	ldr	r2, [pc, #204]	@ (8000318 <GPIOx_PClkControl+0x130>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000250:	e059      	b.n	8000306 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOE){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a34      	ldr	r2, [pc, #208]	@ (8000328 <GPIOx_PClkControl+0x140>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIOx_PClkControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b2f      	ldr	r3, [pc, #188]	@ (8000318 <GPIOx_PClkControl+0x130>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025e:	4a2e      	ldr	r2, [pc, #184]	@ (8000318 <GPIOx_PClkControl+0x130>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000266:	e04e      	b.n	8000306 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOH){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a30      	ldr	r2, [pc, #192]	@ (800032c <GPIOx_PClkControl+0x144>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d14a      	bne.n	8000306 <GPIOx_PClkControl+0x11e>
			GPIOH_PCLK_EN();
 8000270:	4b29      	ldr	r3, [pc, #164]	@ (8000318 <GPIOx_PClkControl+0x130>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000274:	4a28      	ldr	r2, [pc, #160]	@ (8000318 <GPIOx_PClkControl+0x130>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800027a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800027c:	e043      	b.n	8000306 <GPIOx_PClkControl+0x11e>
	else if(EN_DI == CLK_DI){
 800027e:	78fb      	ldrb	r3, [r7, #3]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d140      	bne.n	8000306 <GPIOx_PClkControl+0x11e>
		if(pGPIOx_Base == GPIOA){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a23      	ldr	r2, [pc, #140]	@ (8000314 <GPIOx_PClkControl+0x12c>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIOx_PClkControl+0xb2>
			GPIOA_PCLK_DI();
 800028c:	4b22      	ldr	r3, [pc, #136]	@ (8000318 <GPIOx_PClkControl+0x130>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000290:	4a21      	ldr	r2, [pc, #132]	@ (8000318 <GPIOx_PClkControl+0x130>)
 8000292:	f023 0301 	bic.w	r3, r3, #1
 8000296:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000298:	e035      	b.n	8000306 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOB){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a1f      	ldr	r2, [pc, #124]	@ (800031c <GPIOx_PClkControl+0x134>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIOx_PClkControl+0xc8>
			GPIOB_PCLK_DI();
 80002a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000318 <GPIOx_PClkControl+0x130>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000318 <GPIOx_PClkControl+0x130>)
 80002a8:	f023 0302 	bic.w	r3, r3, #2
 80002ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ae:	e02a      	b.n	8000306 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOC){
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a1b      	ldr	r2, [pc, #108]	@ (8000320 <GPIOx_PClkControl+0x138>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d106      	bne.n	80002c6 <GPIOx_PClkControl+0xde>
			GPIOC_PCLK_DI();
 80002b8:	4b17      	ldr	r3, [pc, #92]	@ (8000318 <GPIOx_PClkControl+0x130>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002bc:	4a16      	ldr	r2, [pc, #88]	@ (8000318 <GPIOx_PClkControl+0x130>)
 80002be:	f023 0304 	bic.w	r3, r3, #4
 80002c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002c4:	e01f      	b.n	8000306 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOD){
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a16      	ldr	r2, [pc, #88]	@ (8000324 <GPIOx_PClkControl+0x13c>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIOx_PClkControl+0xf4>
			GPIOD_PCLK_DI();
 80002ce:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <GPIOx_PClkControl+0x130>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d2:	4a11      	ldr	r2, [pc, #68]	@ (8000318 <GPIOx_PClkControl+0x130>)
 80002d4:	f023 0308 	bic.w	r3, r3, #8
 80002d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002da:	e014      	b.n	8000306 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOE){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a12      	ldr	r2, [pc, #72]	@ (8000328 <GPIOx_PClkControl+0x140>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIOx_PClkControl+0x10a>
			GPIOE_PCLK_DI();
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <GPIOx_PClkControl+0x130>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000318 <GPIOx_PClkControl+0x130>)
 80002ea:	f023 0310 	bic.w	r3, r3, #16
 80002ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002f0:	e009      	b.n	8000306 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOH){
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a0d      	ldr	r2, [pc, #52]	@ (800032c <GPIOx_PClkControl+0x144>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d105      	bne.n	8000306 <GPIOx_PClkControl+0x11e>
			GPIOH_PCLK_DI();
 80002fa:	4b07      	ldr	r3, [pc, #28]	@ (8000318 <GPIOx_PClkControl+0x130>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fe:	4a06      	ldr	r2, [pc, #24]	@ (8000318 <GPIOx_PClkControl+0x130>)
 8000300:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000304:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40020000 	.word	0x40020000
 8000318:	40023800 	.word	0x40023800
 800031c:	40020400 	.word	0x40020400
 8000320:	40020800 	.word	0x40020800
 8000324:	40020c00 	.word	0x40020c00
 8000328:	40021000 	.word	0x40021000
 800032c:	40021c00 	.word	0x40021c00

08000330 <GPIOx_Init>:
}

/*
 * GPIO Peripheral - GPIO Initialization API Definition
 */
void GPIOx_Init(GPIOx_Handle_t *pGPIOHandle){
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	//Initialize variables
	uint8_t bit_pos = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_index = 0;
 800033c:	2300      	movs	r3, #0
 800033e:	73bb      	strb	r3, [r7, #14]
	uint8_t temp = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	737b      	strb	r3, [r7, #13]
	uint8_t port_code = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	733b      	strb	r3, [r7, #12]

	//Initialize GPIO Peripheral clock
	GPIOx_PClkControl(pGPIOHandle->pGPIOx_Base, CLK_EN);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2101      	movs	r1, #1
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ff4a 	bl	80001e8 <GPIOx_PClkControl>

	/*Non Interrupt mode configurations*/
	if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode <= GPIO_MODE_ANALOG){
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	795b      	ldrb	r3, [r3, #5]
 8000358:	2b03      	cmp	r3, #3
 800035a:	f200 80ca 	bhi.w	80004f2 <GPIOx_Init+0x1c2>
		//1. Set GPIO Pin Mode
		bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber * 2;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	791b      	ldrb	r3, [r3, #4]
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx_Base->MODER &= ~(0x3 << bit_pos);		//Clear the Bits
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	7bfb      	ldrb	r3, [r7, #15]
 800036e:	2103      	movs	r1, #3
 8000370:	fa01 f303 	lsl.w	r3, r1, r3
 8000374:	43db      	mvns	r3, r3
 8000376:	4619      	mov	r1, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	400a      	ands	r2, r1
 800037e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx_Base->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode << bit_pos);		//Set Bits
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	795b      	ldrb	r3, [r3, #5]
 800038a:	4619      	mov	r1, r3
 800038c:	7bfb      	ldrb	r3, [r7, #15]
 800038e:	fa01 f303 	lsl.w	r3, r1, r3
 8000392:	4619      	mov	r1, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	430a      	orrs	r2, r1
 800039a:	601a      	str	r2, [r3, #0]
		bit_pos = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	73fb      	strb	r3, [r7, #15]

		//2. Set GPIO Pin Output Type
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_OUTPUT){
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	795b      	ldrb	r3, [r3, #5]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d11f      	bne.n	80003e8 <GPIOx_Init+0xb8>
			bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	791b      	ldrb	r3, [r3, #4]
 80003ac:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx_Base->OTYPER &= ~(0x1 << bit_pos);	//Clear the Bits
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	685a      	ldr	r2, [r3, #4]
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	2101      	movs	r1, #1
 80003b8:	fa01 f303 	lsl.w	r3, r1, r3
 80003bc:	43db      	mvns	r3, r3
 80003be:	4619      	mov	r1, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	400a      	ands	r2, r1
 80003c6:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx_Base->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinOPType << bit_pos);	//Set Bits
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	685a      	ldr	r2, [r3, #4]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	79db      	ldrb	r3, [r3, #7]
 80003d2:	4619      	mov	r1, r3
 80003d4:	7bfb      	ldrb	r3, [r7, #15]
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	4619      	mov	r1, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	430a      	orrs	r2, r1
 80003e2:	605a      	str	r2, [r3, #4]
			bit_pos = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	73fb      	strb	r3, [r7, #15]
		}

		//3. Set GPIO Pin Speed
		bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber * 2;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	791b      	ldrb	r3, [r3, #4]
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx_Base->OSPEEDR &= ~(0x3 << bit_pos);	//Clear the Bits
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	7bfb      	ldrb	r3, [r7, #15]
 80003f8:	2103      	movs	r1, #3
 80003fa:	fa01 f303 	lsl.w	r3, r1, r3
 80003fe:	43db      	mvns	r3, r3
 8000400:	4619      	mov	r1, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	400a      	ands	r2, r1
 8000408:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx_Base->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinSpeed << bit_pos);	//Set Bits
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	689a      	ldr	r2, [r3, #8]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	799b      	ldrb	r3, [r3, #6]
 8000414:	4619      	mov	r1, r3
 8000416:	7bfb      	ldrb	r3, [r7, #15]
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	4619      	mov	r1, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	430a      	orrs	r2, r1
 8000424:	609a      	str	r2, [r3, #8]
		bit_pos = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	73fb      	strb	r3, [r7, #15]

		//4. Set GPIO Pin Pull Up/Down Register
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INPUT){
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	795b      	ldrb	r3, [r3, #5]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d120      	bne.n	8000474 <GPIOx_Init+0x144>
			bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber * 2;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	791b      	ldrb	r3, [r3, #4]
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx_Base->PUPDR &= ~(0x3 << bit_pos);	//Clear the Bits
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	68da      	ldr	r2, [r3, #12]
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	2103      	movs	r1, #3
 8000444:	fa01 f303 	lsl.w	r3, r1, r3
 8000448:	43db      	mvns	r3, r3
 800044a:	4619      	mov	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	400a      	ands	r2, r1
 8000452:	60da      	str	r2, [r3, #12]
			pGPIOHandle->pGPIOx_Base->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinPUPDControl << bit_pos);	//Set Bits
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	68da      	ldr	r2, [r3, #12]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	7a1b      	ldrb	r3, [r3, #8]
 800045e:	4619      	mov	r1, r3
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	fa01 f303 	lsl.w	r3, r1, r3
 8000466:	4619      	mov	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	430a      	orrs	r2, r1
 800046e:	60da      	str	r2, [r3, #12]
			bit_pos = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	73fb      	strb	r3, [r7, #15]
		}

		//5. Set GPIO Pin Alternate Functionality Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_ALTERNATE){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	795b      	ldrb	r3, [r3, #5]
 8000478:	2b02      	cmp	r3, #2
 800047a:	f040 80eb 	bne.w	8000654 <GPIOx_Init+0x324>
			//Configure the Alternate functionality registers
			reg_index = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber / 8);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	791b      	ldrb	r3, [r3, #4]
 8000482:	08db      	lsrs	r3, r3, #3
 8000484:	73bb      	strb	r3, [r7, #14]
			temp = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber % 8);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	f003 0307 	and.w	r3, r3, #7
 800048e:	737b      	strb	r3, [r7, #13]
			bit_pos = (temp * 4);
 8000490:	7b7b      	ldrb	r3, [r7, #13]
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx_Base->AFR[reg_index] &= ~(0xf << bit_pos);	//Clear the Bits
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	7bba      	ldrb	r2, [r7, #14]
 800049c:	3208      	adds	r2, #8
 800049e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	220f      	movs	r2, #15
 80004a6:	fa02 f303 	lsl.w	r3, r2, r3
 80004aa:	43db      	mvns	r3, r3
 80004ac:	4618      	mov	r0, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	7bba      	ldrb	r2, [r7, #14]
 80004b4:	4001      	ands	r1, r0
 80004b6:	3208      	adds	r2, #8
 80004b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx_Base->AFR[reg_index] |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinAltFunMode << bit_pos);	//Set Bits
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	7bba      	ldrb	r2, [r7, #14]
 80004c2:	3208      	adds	r2, #8
 80004c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	7a5b      	ldrb	r3, [r3, #9]
 80004cc:	461a      	mov	r2, r3
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	4618      	mov	r0, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	7bba      	ldrb	r2, [r7, #14]
 80004dc:	4301      	orrs	r1, r0
 80004de:	3208      	adds	r2, #8
 80004e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			reg_index = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73bb      	strb	r3, [r7, #14]
			temp = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	737b      	strb	r3, [r7, #13]
			bit_pos = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
		bit_pos = 0;

		//3. Enable the EXTI Interrupt delivery using IMR
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
	}
}
 80004f0:	e0b0      	b.n	8000654 <GPIOx_Init+0x324>
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INT_RISING){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	795b      	ldrb	r3, [r3, #5]
 80004f6:	2b05      	cmp	r3, #5
 80004f8:	d117      	bne.n	800052a <GPIOx_Init+0x1fa>
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 80004fa:	4b58      	ldr	r3, [pc, #352]	@ (800065c <GPIOx_Init+0x32c>)
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	7912      	ldrb	r2, [r2, #4]
 8000502:	4611      	mov	r1, r2
 8000504:	2201      	movs	r2, #1
 8000506:	408a      	lsls	r2, r1
 8000508:	4611      	mov	r1, r2
 800050a:	4a54      	ldr	r2, [pc, #336]	@ (800065c <GPIOx_Init+0x32c>)
 800050c:	430b      	orrs	r3, r1
 800050e:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 8000510:	4b52      	ldr	r3, [pc, #328]	@ (800065c <GPIOx_Init+0x32c>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	7912      	ldrb	r2, [r2, #4]
 8000518:	4611      	mov	r1, r2
 800051a:	2201      	movs	r2, #1
 800051c:	408a      	lsls	r2, r1
 800051e:	43d2      	mvns	r2, r2
 8000520:	4611      	mov	r1, r2
 8000522:	4a4e      	ldr	r2, [pc, #312]	@ (800065c <GPIOx_Init+0x32c>)
 8000524:	400b      	ands	r3, r1
 8000526:	60d3      	str	r3, [r2, #12]
 8000528:	e035      	b.n	8000596 <GPIOx_Init+0x266>
		else if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INT_FALLING){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	795b      	ldrb	r3, [r3, #5]
 800052e:	2b04      	cmp	r3, #4
 8000530:	d117      	bne.n	8000562 <GPIOx_Init+0x232>
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 8000532:	4b4a      	ldr	r3, [pc, #296]	@ (800065c <GPIOx_Init+0x32c>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	7912      	ldrb	r2, [r2, #4]
 800053a:	4611      	mov	r1, r2
 800053c:	2201      	movs	r2, #1
 800053e:	408a      	lsls	r2, r1
 8000540:	4611      	mov	r1, r2
 8000542:	4a46      	ldr	r2, [pc, #280]	@ (800065c <GPIOx_Init+0x32c>)
 8000544:	430b      	orrs	r3, r1
 8000546:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 8000548:	4b44      	ldr	r3, [pc, #272]	@ (800065c <GPIOx_Init+0x32c>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7912      	ldrb	r2, [r2, #4]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	43d2      	mvns	r2, r2
 8000558:	4611      	mov	r1, r2
 800055a:	4a40      	ldr	r2, [pc, #256]	@ (800065c <GPIOx_Init+0x32c>)
 800055c:	400b      	ands	r3, r1
 800055e:	6093      	str	r3, [r2, #8]
 8000560:	e019      	b.n	8000596 <GPIOx_Init+0x266>
		else if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INT_BOTH){
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	795b      	ldrb	r3, [r3, #5]
 8000566:	2b06      	cmp	r3, #6
 8000568:	d115      	bne.n	8000596 <GPIOx_Init+0x266>
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 800056a:	4b3c      	ldr	r3, [pc, #240]	@ (800065c <GPIOx_Init+0x32c>)
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	7912      	ldrb	r2, [r2, #4]
 8000572:	4611      	mov	r1, r2
 8000574:	2201      	movs	r2, #1
 8000576:	408a      	lsls	r2, r1
 8000578:	4611      	mov	r1, r2
 800057a:	4a38      	ldr	r2, [pc, #224]	@ (800065c <GPIOx_Init+0x32c>)
 800057c:	430b      	orrs	r3, r1
 800057e:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 8000580:	4b36      	ldr	r3, [pc, #216]	@ (800065c <GPIOx_Init+0x32c>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	7912      	ldrb	r2, [r2, #4]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	4611      	mov	r1, r2
 8000590:	4a32      	ldr	r2, [pc, #200]	@ (800065c <GPIOx_Init+0x32c>)
 8000592:	430b      	orrs	r3, r1
 8000594:	60d3      	str	r3, [r2, #12]
		reg_index = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber / 4);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	089b      	lsrs	r3, r3, #2
 800059c:	73bb      	strb	r3, [r7, #14]
		temp = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber % 4);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	f003 0303 	and.w	r3, r3, #3
 80005a6:	737b      	strb	r3, [r7, #13]
		bit_pos = (temp * 4);
 80005a8:	7b7b      	ldrb	r3, [r7, #13]
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	73fb      	strb	r3, [r7, #15]
		port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx_Base);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000660 <GPIOx_Init+0x330>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d024      	beq.n	8000602 <GPIOx_Init+0x2d2>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a29      	ldr	r2, [pc, #164]	@ (8000664 <GPIOx_Init+0x334>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d01d      	beq.n	80005fe <GPIOx_Init+0x2ce>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a28      	ldr	r2, [pc, #160]	@ (8000668 <GPIOx_Init+0x338>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d016      	beq.n	80005fa <GPIOx_Init+0x2ca>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a26      	ldr	r2, [pc, #152]	@ (800066c <GPIOx_Init+0x33c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d00f      	beq.n	80005f6 <GPIOx_Init+0x2c6>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a25      	ldr	r2, [pc, #148]	@ (8000670 <GPIOx_Init+0x340>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d008      	beq.n	80005f2 <GPIOx_Init+0x2c2>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a23      	ldr	r2, [pc, #140]	@ (8000674 <GPIOx_Init+0x344>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d101      	bne.n	80005ee <GPIOx_Init+0x2be>
 80005ea:	2307      	movs	r3, #7
 80005ec:	e00a      	b.n	8000604 <GPIOx_Init+0x2d4>
 80005ee:	2300      	movs	r3, #0
 80005f0:	e008      	b.n	8000604 <GPIOx_Init+0x2d4>
 80005f2:	2304      	movs	r3, #4
 80005f4:	e006      	b.n	8000604 <GPIOx_Init+0x2d4>
 80005f6:	2303      	movs	r3, #3
 80005f8:	e004      	b.n	8000604 <GPIOx_Init+0x2d4>
 80005fa:	2302      	movs	r3, #2
 80005fc:	e002      	b.n	8000604 <GPIOx_Init+0x2d4>
 80005fe:	2301      	movs	r3, #1
 8000600:	e000      	b.n	8000604 <GPIOx_Init+0x2d4>
 8000602:	2300      	movs	r3, #0
 8000604:	733b      	strb	r3, [r7, #12]
		SYSCFG_PCLK_EN();
 8000606:	4b1c      	ldr	r3, [pc, #112]	@ (8000678 <GPIOx_Init+0x348>)
 8000608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800060a:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <GPIOx_Init+0x348>)
 800060c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000610:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[reg_index] |= (port_code << bit_pos);
 8000612:	4a1a      	ldr	r2, [pc, #104]	@ (800067c <GPIOx_Init+0x34c>)
 8000614:	7bbb      	ldrb	r3, [r7, #14]
 8000616:	3302      	adds	r3, #2
 8000618:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800061c:	7b39      	ldrb	r1, [r7, #12]
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	fa01 f303 	lsl.w	r3, r1, r3
 8000624:	4618      	mov	r0, r3
 8000626:	4915      	ldr	r1, [pc, #84]	@ (800067c <GPIOx_Init+0x34c>)
 8000628:	7bbb      	ldrb	r3, [r7, #14]
 800062a:	4302      	orrs	r2, r0
 800062c:	3302      	adds	r3, #2
 800062e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		reg_index = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	73bb      	strb	r3, [r7, #14]
		temp = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	737b      	strb	r3, [r7, #13]
		bit_pos = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	73fb      	strb	r3, [r7, #15]
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <GPIOx_Init+0x32c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	7912      	ldrb	r2, [r2, #4]
 8000646:	4611      	mov	r1, r2
 8000648:	2201      	movs	r2, #1
 800064a:	408a      	lsls	r2, r1
 800064c:	4611      	mov	r1, r2
 800064e:	4a03      	ldr	r2, [pc, #12]	@ (800065c <GPIOx_Init+0x32c>)
 8000650:	430b      	orrs	r3, r1
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40013c00 	.word	0x40013c00
 8000660:	40020000 	.word	0x40020000
 8000664:	40020400 	.word	0x40020400
 8000668:	40020800 	.word	0x40020800
 800066c:	40020c00 	.word	0x40020c00
 8000670:	40021000 	.word	0x40021000
 8000674:	40021c00 	.word	0x40021c00
 8000678:	40023800 	.word	0x40023800
 800067c:	40013800 	.word	0x40013800

08000680 <GPIO_ReadFromInputPin>:


/*
 * GPIO Peripheral - GPIO Read API Definitions
 */
uint8_t GPIO_ReadFromInputPin(GPIOx_RegDef_t *pGPIOx_Base, uint8_t GPIO_Pin){
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
	uint8_t data;
	data = (uint8_t)(pGPIOx_Base->IDR >> GPIO_Pin) & 0x00000001;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	691a      	ldr	r2, [r3, #16]
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	fa22 f303 	lsr.w	r3, r2, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	73fb      	strb	r3, [r7, #15]
	return data;
 800069e:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <GPIO_IRQHandling>:
	*(NVIC_IPRx_BASE + (iprx)) |= (IRQPriority << bit_pos);

}


void GPIO_IRQHandling(uint8_t PinNumber){
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	//User code starts here

	//User code ends here

	//Clear the EXTI PR register, corresponding to the pin number
	if(EXTI->EXTI_PR & (1 << PinNumber)){
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <GPIO_IRQHandling+0x3c>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	79fa      	ldrb	r2, [r7, #7]
 80006bc:	2101      	movs	r1, #1
 80006be:	fa01 f202 	lsl.w	r2, r1, r2
 80006c2:	4013      	ands	r3, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d009      	beq.n	80006dc <GPIO_IRQHandling+0x30>
		//Clear
		EXTI->EXTI_PR |= (1 << PinNumber);
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <GPIO_IRQHandling+0x3c>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	79fa      	ldrb	r2, [r7, #7]
 80006ce:	2101      	movs	r1, #1
 80006d0:	fa01 f202 	lsl.w	r2, r1, r2
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a04      	ldr	r2, [pc, #16]	@ (80006e8 <GPIO_IRQHandling+0x3c>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	6153      	str	r3, [r2, #20]
	}
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	40013c00 	.word	0x40013c00

080006ec <TIMx_ClockEnable>:

#define TIMx_UIE		 0


//Configuration APIs
void TIMx_ClockEnable(TIM_RegDef_t *TIMx){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	if(TIMx == TIM2){
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006fa:	d106      	bne.n	800070a <TIMx_ClockEnable+0x1e>
		//Enable TIM2 clock Access
		RCC->APB1ENR |= TIM2_EN;
 80006fc:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <TIMx_ClockEnable+0x6c>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	4a15      	ldr	r2, [pc, #84]	@ (8000758 <TIMx_ClockEnable+0x6c>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	6413      	str	r3, [r2, #64]	@ 0x40
		//Enable TIM5 clock Access
		RCC->APB1ENR |= TIM5_EN;
	} else{
		//No conditions matched!
	}
}
 8000708:	e01f      	b.n	800074a <TIMx_ClockEnable+0x5e>
	} else if(TIMx == TIM3){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a13      	ldr	r2, [pc, #76]	@ (800075c <TIMx_ClockEnable+0x70>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d106      	bne.n	8000720 <TIMx_ClockEnable+0x34>
		RCC->APB1ENR |= TIM3_EN;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <TIMx_ClockEnable+0x6c>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000716:	4a10      	ldr	r2, [pc, #64]	@ (8000758 <TIMx_ClockEnable+0x6c>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800071e:	e014      	b.n	800074a <TIMx_ClockEnable+0x5e>
	} else if(TIMx == TIM4){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a0f      	ldr	r2, [pc, #60]	@ (8000760 <TIMx_ClockEnable+0x74>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d106      	bne.n	8000736 <TIMx_ClockEnable+0x4a>
		RCC->APB1ENR |= TIM4_EN;
 8000728:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <TIMx_ClockEnable+0x6c>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	4a0a      	ldr	r2, [pc, #40]	@ (8000758 <TIMx_ClockEnable+0x6c>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000734:	e009      	b.n	800074a <TIMx_ClockEnable+0x5e>
	} else if(TIMx == TIM5){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a0a      	ldr	r2, [pc, #40]	@ (8000764 <TIMx_ClockEnable+0x78>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d105      	bne.n	800074a <TIMx_ClockEnable+0x5e>
		RCC->APB1ENR |= TIM5_EN;
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <TIMx_ClockEnable+0x6c>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000742:	4a05      	ldr	r2, [pc, #20]	@ (8000758 <TIMx_ClockEnable+0x6c>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40000400 	.word	0x40000400
 8000760:	40000800 	.word	0x40000800
 8000764:	40000c00 	.word	0x40000c00

08000768 <TIMx_SetPrescaler>:
//	} else{
//		//No conditions matched!
//	}
//}

void TIMx_SetPrescaler(TIM_RegDef_t *TIMx, uint32_t prescaler){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	TIMx->PSC = prescaler;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <TIMx_SetPeriod>:

uint32_t TIMx_ComputePrescaler(TIM_RegDef_t *TIMx, uint32_t sys_freq, uint32_t tim_freq){
	return ((sys_freq/tim_freq) - 1);
}

void TIMx_SetPeriod(TIM_RegDef_t *TIMx, uint32_t period){
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	//Set ARR Register
	TIMx->ARR = (period-1);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	1e5a      	subs	r2, r3, #1
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <TIMx_ConfigMode>:

void TIMx_ConfigMode(TIM_RegDef_t *TIMx, uint8_t Mode){
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	460b      	mov	r3, r1
 80007ac:	70fb      	strb	r3, [r7, #3]
	if(Mode == 0){
 80007ae:	78fb      	ldrb	r3, [r7, #3]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d104      	bne.n	80007be <TIMx_ConfigMode+0x1c>
		TIMx->CR1 |= (TIM_MODE_DOWN_COUNTER << 4);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	601a      	str	r2, [r3, #0]
	} else {
		TIMx->CR1 |= (TIM_MODE_UP_COUNTER << 4);
	}
}
 80007bc:	e005      	b.n	80007ca <TIMx_ConfigMode+0x28>
		TIMx->CR1 |= (TIM_MODE_UP_COUNTER << 4);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f043 0210 	orr.w	r2, r3, #16
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	601a      	str	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <TIMx_Start>:
	}
}


//General Application APIs
void TIMx_Start(TIM_RegDef_t *TIMx){
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
	TIMx->CNT = 0;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	@ 0x24
	TIMx->CR1 |= TIMx_CEN;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f043 0201 	orr.w	r2, r3, #1
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <TIMx_Stop>:

void TIMx_Stop(TIM_RegDef_t *TIMx){
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	TIMx->CNT = 0;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	@ 0x24
	TIMx->CR1 &= ~(TIMx_CEN);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f023 0201 	bic.w	r2, r3, #1
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <TIMx_Delay_ms_Init>:

// One-time configuration for TIM2 to prepare for delays
void TIMx_Delay_ms_Init(TIM_RegDef_t *TIMx) {
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
    // Enable clock access
    TIMx_ClockEnable(TIMx);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ff5e 	bl	80006ec <TIMx_ClockEnable>

    // Set prescaler register
    TIMx_SetPrescaler(TIMx, 15);
 8000830:	210f      	movs	r1, #15
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ff98 	bl	8000768 <TIMx_SetPrescaler>

    //Set Auto reload register
    TIMx_SetPeriod(TIMx, 1000);
 8000838:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ffa1 	bl	8000784 <TIMx_SetPeriod>

    // Set Counter Mode (Up counter)
    TIMx_ConfigMode(TIMx, TIM_MODE_UP_COUNTER);
 8000842:	2101      	movs	r1, #1
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ffac 	bl	80007a2 <TIMx_ConfigMode>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <TIMx_Delay_ms>:

// Blocking delay in milliseconds
void TIMx_Delay_ms(TIM_RegDef_t *TIMx, uint32_t delay_ms) {
 8000852:	b580      	push	{r7, lr}
 8000854:	b084      	sub	sp, #16
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	6039      	str	r1, [r7, #0]
	//Start timer
	TIMx_Start(TIMx);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ffba 	bl	80007d6 <TIMx_Start>
    for(volatile uint32_t i = 0; i < delay_ms; i++){
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	e00f      	b.n	8000888 <TIMx_Delay_ms+0x36>
    	//Check for update flag
    	while(!(TIMx->SR & TIMx_SR_UIF)){}
 8000868:	bf00      	nop
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0f9      	beq.n	800086a <TIMx_Delay_ms+0x18>
    	//Clear flag
    	TIMx->SR &= ~TIMx_SR_UIF;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	691b      	ldr	r3, [r3, #16]
 800087a:	f023 0201 	bic.w	r2, r3, #1
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	611a      	str	r2, [r3, #16]
    for(volatile uint32_t i = 0; i < delay_ms; i++){
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	3301      	adds	r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	d8eb      	bhi.n	8000868 <TIMx_Delay_ms+0x16>
    }
    //Stop timer
    TIMx_Stop(TIMx);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ffb3 	bl	80007fc <TIMx_Stop>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <SPI_PCLK_Control>:
#include <stdint.h>
#include "STM32F411xx.h"
#include "SPI_Driver.h"

/*SPI Clock Control API*/
void SPI_PCLK_Control(SPI_RegDef_t *pSPIx, uint8_t EN_DI){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
    if(EN_DI == CLK_EN){
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d136      	bne.n	8000920 <SPI_PCLK_Control+0x80>
		if(pSPIx == SPI1){
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a3a      	ldr	r2, [pc, #232]	@ (80009a0 <SPI_PCLK_Control+0x100>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <SPI_PCLK_Control+0x28>
			SPI1_PCLK_EN();
 80008ba:	4b3a      	ldr	r3, [pc, #232]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	4a39      	ldr	r2, [pc, #228]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 80008c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008c4:	6453      	str	r3, [r2, #68]	@ 0x44
			SPI5_PCLK_DI();
		}
		else{
		}
	}
}
 80008c6:	e064      	b.n	8000992 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI2){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a37      	ldr	r2, [pc, #220]	@ (80009a8 <SPI_PCLK_Control+0x108>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d106      	bne.n	80008de <SPI_PCLK_Control+0x3e>
			SPI2_PCLK_EN();
 80008d0:	4b34      	ldr	r3, [pc, #208]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	4a33      	ldr	r2, [pc, #204]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008da:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008dc:	e059      	b.n	8000992 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI3){
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a32      	ldr	r2, [pc, #200]	@ (80009ac <SPI_PCLK_Control+0x10c>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d106      	bne.n	80008f4 <SPI_PCLK_Control+0x54>
			SPI3_PCLK_EN();
 80008e6:	4b2f      	ldr	r3, [pc, #188]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	4a2e      	ldr	r2, [pc, #184]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 80008ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008f0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008f2:	e04e      	b.n	8000992 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI4){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a2e      	ldr	r2, [pc, #184]	@ (80009b0 <SPI_PCLK_Control+0x110>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d106      	bne.n	800090a <SPI_PCLK_Control+0x6a>
			SPI4_PCLK_EN();
 80008fc:	4b29      	ldr	r3, [pc, #164]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000900:	4a28      	ldr	r2, [pc, #160]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 8000902:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000906:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000908:	e043      	b.n	8000992 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI5){
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a29      	ldr	r2, [pc, #164]	@ (80009b4 <SPI_PCLK_Control+0x114>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d13f      	bne.n	8000992 <SPI_PCLK_Control+0xf2>
			SPI5_PCLK_EN();
 8000912:	4b24      	ldr	r3, [pc, #144]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	4a23      	ldr	r2, [pc, #140]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 8000918:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800091c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800091e:	e038      	b.n	8000992 <SPI_PCLK_Control+0xf2>
	else if(EN_DI == CLK_DI){
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d135      	bne.n	8000992 <SPI_PCLK_Control+0xf2>
		if(pSPIx == SPI1){
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a1d      	ldr	r2, [pc, #116]	@ (80009a0 <SPI_PCLK_Control+0x100>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d106      	bne.n	800093c <SPI_PCLK_Control+0x9c>
			SPI1_PCLK_DI();
 800092e:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 8000934:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000938:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800093a:	e02a      	b.n	8000992 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI2){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a1a      	ldr	r2, [pc, #104]	@ (80009a8 <SPI_PCLK_Control+0x108>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d106      	bne.n	8000952 <SPI_PCLK_Control+0xb2>
			SPI2_PCLK_DI();
 8000944:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000948:	4a16      	ldr	r2, [pc, #88]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 800094a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800094e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000950:	e01f      	b.n	8000992 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI3){
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a15      	ldr	r2, [pc, #84]	@ (80009ac <SPI_PCLK_Control+0x10c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d106      	bne.n	8000968 <SPI_PCLK_Control+0xc8>
			SPI3_PCLK_DI();
 800095a:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	4a11      	ldr	r2, [pc, #68]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 8000960:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000964:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000966:	e014      	b.n	8000992 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI4){
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a11      	ldr	r2, [pc, #68]	@ (80009b0 <SPI_PCLK_Control+0x110>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d106      	bne.n	800097e <SPI_PCLK_Control+0xde>
			SPI4_PCLK_DI();
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 8000972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000974:	4a0b      	ldr	r2, [pc, #44]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 8000976:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800097a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800097c:	e009      	b.n	8000992 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI5){
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a0c      	ldr	r2, [pc, #48]	@ (80009b4 <SPI_PCLK_Control+0x114>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d105      	bne.n	8000992 <SPI_PCLK_Control+0xf2>
			SPI5_PCLK_DI();
 8000986:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098a:	4a06      	ldr	r2, [pc, #24]	@ (80009a4 <SPI_PCLK_Control+0x104>)
 800098c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000990:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40013000 	.word	0x40013000
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40003800 	.word	0x40003800
 80009ac:	40003c00 	.word	0x40003c00
 80009b0:	40013400 	.word	0x40013400
 80009b4:	40015000 	.word	0x40015000

080009b8 <SPI_Init>:

/*SPI Initialize & Deinitialize APIs*/
void SPI_Init(SPIx_Handle_t *pSPIHandle){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    //Configure the SPI CR1 Register
	uint32_t tempreg = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]

	//Initialize SPI Peripheral clock
	SPI_PCLK_Control(pSPIHandle->pSPIx, CLK_EN);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2101      	movs	r1, #1
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff68 	bl	80008a0 <SPI_PCLK_Control>

	//Configure SPI Peripheral
	//1. Configure SPI Device Mode
	tempreg |= pSPIHandle->SPIx_Config.SPI_DEVICE_MODE << SPI_CR1_MSTR_BIT;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	791b      	ldrb	r3, [r3, #4]
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]

	//2. Configure the SPI Bus configuration
	if(pSPIHandle->SPIx_Config.SPI_BUS_CONFIG == SPI_BUS_CONFIG_FULL_DUPLEX){
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	795b      	ldrb	r3, [r3, #5]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d104      	bne.n	80009ee <SPI_Init+0x36>
		//BIDI Mode should be cleared - 2-line Unidirectional data mode selected
		tempreg &= ~(1<<SPI_CR1_BIDI_MODE_BIT);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e014      	b.n	8000a18 <SPI_Init+0x60>
	} 
	else if(pSPIHandle->SPIx_Config.SPI_BUS_CONFIG == SPI_BUS_CONFIG_HALF_DUPLEX){
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	795b      	ldrb	r3, [r3, #5]
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d104      	bne.n	8000a00 <SPI_Init+0x48>
		//BIDI Mode should be Set - 1-line bidirectional mode selected
		tempreg |= (1<<SPI_CR1_BIDI_MODE_BIT);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	e00b      	b.n	8000a18 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIx_Config.SPI_BUS_CONFIG == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	795b      	ldrb	r3, [r3, #5]
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	d107      	bne.n	8000a18 <SPI_Init+0x60>
		//BIDI Mode should be cleared - 2-line unidirectional mode selected
		tempreg &= ~(1<<SPI_CR1_BIDI_MODE_BIT);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a0e:	60fb      	str	r3, [r7, #12]
		//RXONLY Bit also needs to be Set 
		tempreg |= (1<<SPI_CR1_RX_ONLY_BIT);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a16:	60fb      	str	r3, [r7, #12]
	else{
		//Error!
	}

	//3. Configure the SPI Clock Speed
	tempreg |= (pSPIHandle->SPIx_Config.SPI_SCLK_SPEED << SPI_CR1_BR_BIT);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	799b      	ldrb	r3, [r3, #6]
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]

	//4. Configure the SPI Data frame format
	if(pSPIHandle->SPIx_Config.SPI_DFF == SPI_DFF_16BIT){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	79db      	ldrb	r3, [r3, #7]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d104      	bne.n	8000a36 <SPI_Init+0x7e>
		//Set DFF to 16bits
		tempreg |= (1 << SPI_CR1_DFF_BIT);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	e003      	b.n	8000a3e <SPI_Init+0x86>
	}
	else{
		//Set DFF to 8 bits (default)
		tempreg &= ~(1 << SPI_CR1_DFF_BIT);	
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000a3c:	60fb      	str	r3, [r7, #12]
	}

	//5. Configure CPOL & CPHA
	if(pSPIHandle->SPIx_Config.SPI_CPOL == SPI_CPOL_HIGH){
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	7a1b      	ldrb	r3, [r3, #8]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d104      	bne.n	8000a50 <SPI_Init+0x98>
		//Set: CPOL idle state as HIGH
		tempreg |= (1 << SPI_CR1_CPOL_BIT);	//Set CPOL
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e003      	b.n	8000a58 <SPI_Init+0xa0>
	}
	else{
		//Clear: CPOL idle state as LOW
		tempreg &= ~(1 << SPI_CR1_CPOL_BIT);	//Set CPOL
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f023 0302 	bic.w	r3, r3, #2
 8000a56:	60fb      	str	r3, [r7, #12]
	}
	
	if(pSPIHandle->SPIx_Config.SPI_CPHA == SPI_CPHA_HIGH){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7a5b      	ldrb	r3, [r3, #9]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d104      	bne.n	8000a6a <SPI_Init+0xb2>
		//Set: CPHA idle state as HIGH
		tempreg |= (1 << SPI_CR1_CPHA_BIT);	//Set CPHA
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e003      	b.n	8000a72 <SPI_Init+0xba>
	}
	else{
		//Clear: CPHA idle state as LOW
		tempreg &= ~(1 << SPI_CR1_CPHA_BIT);	//Set CPHA
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f023 0301 	bic.w	r3, r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
	}

	//Configure SPI SSM
	if(pSPIHandle->SPIx_Config.SPI_SSM == SPI_SSM_ENABLED){
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	7a9b      	ldrb	r3, [r3, #10]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d104      	bne.n	8000a84 <SPI_Init+0xcc>
		//Set SSM bit == 1
		tempreg |= (1 << SPI_CR1_SSM_BIT);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e003      	b.n	8000a8c <SPI_Init+0xd4>
		//Set SSI bit == 1 , so NSS pin is pulled high
	}
	else{
		tempreg &= ~(1 << SPI_CR1_SSM_BIT);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000a8a:	60fb      	str	r3, [r7, #12]
	}

	//Initialize the SPI Peripheral with all configured settings
	pSPIHandle->pSPIx->SPI_CR1 |= tempreg;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <SPI_SendData>:
 * @param - uint32_t length 	--> This variable holds the length or size of the buffer.
 * 
 * Return:
 * None
*/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t length){
 8000aa4:	b480      	push	{r7}
 8000aa6:	b087      	sub	sp, #28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
    //1. Check if length is zero? if true, return transmission complete and if false, continue.
	if(length <= 0) return;  // No data to transmit
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d02a      	beq.n	8000b0c <SPI_SendData+0x68>

	uint32_t len = length;	//Created a local variable to store length data.
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	617b      	str	r3, [r7, #20]
	while(len > 0){
 8000aba:	e023      	b.n	8000b04 <SPI_SendData+0x60>
		//2. Check if Tx buffer is empty? if false, wait and if true, continue.
		while(!(pSPIx->SPI_SR & (1 << SPI_SR_TXE_BIT))); //This checks if the TXE bit in the SPI_SR register is set. If it's set, it means the transmit buffer is empty and ready to accept new data.
 8000abc:	bf00      	nop
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f9      	beq.n	8000abe <SPI_SendData+0x1a>

		//3. check if Data frame format is 8 bit or 16 bit, and execute accordingly.
		if(pSPIx->SPI_CR1 & (1 << SPI_CR1_DFF_BIT)){
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d00b      	beq.n	8000aee <SPI_SendData+0x4a>
			//4. load 16 bits of data into SPI DR Register and increment address by 2 byte and de-increment length by 2.
			/*
			 * The typecaste (uint16_t *)pTxBuffer changes the interpretation of pTxBuffer from a pointer to uint8_t type data to a pointer to uint16_t type data.
			 * The "*" dereferences the pointer, accessing the 16 bit data. i.e. *((uint16_t *)pTxBuffer)
			*/
			pSPIx->SPI_DR = *((uint16_t *)pTxBuffer);		//Write 16 bits of data to SPI TX Buffer
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	60da      	str	r2, [r3, #12]
			pTxBuffer += 2;									//Increment address by 2 bytes
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	60bb      	str	r3, [r7, #8]
			len -= 2;										//De-Increment length by 2
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3b02      	subs	r3, #2
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	e00a      	b.n	8000b04 <SPI_SendData+0x60>
		}
		else{
			//DFF is 8 bits format
			//5. load 8 bit data into SPI DR Register and increment address by 1 byte and de-increment length by 1.
			pSPIx->SPI_DR = *pTxBuffer;		//Write 8 buts of data to SPI TX Buffer
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	60da      	str	r2, [r3, #12]
			pTxBuffer++;					//Increment address by 1 byte
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	3301      	adds	r3, #1
 8000afc:	60bb      	str	r3, [r7, #8]
			len--;							//De-Increment length by 1
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
	while(len > 0){
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1d8      	bne.n	8000abc <SPI_SendData+0x18>
 8000b0a:	e000      	b.n	8000b0e <SPI_SendData+0x6a>
	if(length <= 0) return;  // No data to transmit
 8000b0c:	bf00      	nop
		}
	}
}
 8000b0e:	371c      	adds	r7, #28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <SPI_Enable>:
/*
 * SPI Enable API
 *
 * 
*/
void SPI_Enable(SPI_RegDef_t *pSPIx){
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	//Enable the SPE Bit in SPI_CR1 Register
	pSPIx->SPI_CR1 |= (1 << SPI_CR1_SPE_BIT);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	601a      	str	r2, [r3, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <SPI_Disable_blocking>:
/*
 * SPI Disable API
 *
 * 
*/
void SPI_Disable_blocking(SPI_RegDef_t *pSPIx){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	//Disable the SPE Bit in SPI_CR1 Register
	while( pSPIx->SPI_SR & (1 << SPI_SR_BSY_BIT) ){
 8000b40:	bf00      	nop
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f9      	bne.n	8000b42 <SPI_Disable_blocking+0xa>
		 * If the flag is no longer raised, the condition will no longer be true, and will exit the while loop, and
		 * will procced to execute the SPI Peripheral Disable code.\
		 * BSY Flag raised basically means the SPI TX buffer is currently busy in transmission.
		 */
	}
	pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SPE_BIT);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <SPI_SSI_Configure>:
/*
 * SPI SSI Configure API
 *
 * 
*/
void SPI_SSI_Configure(SPI_RegDef_t *pSPIx, uint8_t EN_DI){
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	70fb      	strb	r3, [r7, #3]
	if(EN_DI == ENABLE){
 8000b72:	78fb      	ldrb	r3, [r7, #3]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d106      	bne.n	8000b86 <SPI_SSI_Configure+0x20>
		pSPIx->SPI_CR1 |= (1 << SPI_CR1_SSI_BIT);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SSI_BIT);
		//We are doing this since this is device is working in multi master mode.
	}
}
 8000b84:	e005      	b.n	8000b92 <SPI_SSI_Configure+0x2c>
		pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SSI_BIT);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	601a      	str	r2, [r3, #0]
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <main>:

//extern void initialise_monitor_handles(void);


int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
	/* functions to run for OpenOCD Debugging */
	//initialise_monitor_handles();

	/*------------------------------------------*/
	//Create a buffer
	char user_data[] = "Hello World";
 8000ba6:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <main+0x6c>)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	printf("Working!!\n");
 8000bb0:	4817      	ldr	r0, [pc, #92]	@ (8000c10 <main+0x70>)
 8000bb2:	f000 fad5 	bl	8001160 <puts>

	//Configure & Initialize SPI2 Peripheral
	SPI2_GPIOInit();
 8000bb6:	f000 f833 	bl	8000c20 <SPI2_GPIOInit>
	SPI2_Init();
 8000bba:	f000 f85f 	bl	8000c7c <SPI2_Init>

	TIMx_Delay_ms_Init(TIM2);
 8000bbe:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000bc2:	f7ff fe2e 	bl	8000822 <TIMx_Delay_ms_Init>

	BUTTON_GPIO_INIT();
 8000bc6:	f000 f895 	bl	8000cf4 <BUTTON_GPIO_INIT>

	printf("Working!!\n");
 8000bca:	4811      	ldr	r0, [pc, #68]	@ (8000c10 <main+0x70>)
 8000bcc:	f000 fac8 	bl	8001160 <puts>

    /* Loop forever */
	for(;;){
		while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0) == 0){
 8000bd0:	e00f      	b.n	8000bf2 <main+0x52>
			transmit_flag = 0;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <main+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
			SPI_TX_TEST(user_data);
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f86c 	bl	8000cb8 <SPI_TX_TEST>
			printf("USER Data sent! Through SPI Interface!!\n");
 8000be0:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <main+0x78>)
 8000be2:	f000 fabd 	bl	8001160 <puts>
			TIMx_Delay_ms(TIM2, 1000);	//1000ms or 1 second
 8000be6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bea:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000bee:	f7ff fe30 	bl	8000852 <TIMx_Delay_ms>
		while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0) == 0){
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <main+0x7c>)
 8000bf6:	f7ff fd43 	bl	8000680 <GPIO_ReadFromInputPin>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0e8      	beq.n	8000bd2 <main+0x32>
		}
		TIMx_Delay_ms(TIM2, 100);	//100ms
 8000c00:	2164      	movs	r1, #100	@ 0x64
 8000c02:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000c06:	f7ff fe24 	bl	8000852 <TIMx_Delay_ms>
		while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0) == 0){
 8000c0a:	e7f2      	b.n	8000bf2 <main+0x52>
 8000c0c:	080018d4 	.word	0x080018d4
 8000c10:	080018a0 	.word	0x080018a0
 8000c14:	20000078 	.word	0x20000078
 8000c18:	080018ac 	.word	0x080018ac
 8000c1c:	40020000 	.word	0x40020000

08000c20 <SPI2_GPIOInit>:
	}
}


void SPI2_GPIOInit(void){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
	//Create a GPIO Handle and perform configure
	GPIOx_Handle_t SPIPins;

	SPIPins.pGPIOx_Base = GPIOB;
 8000c26:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <SPI2_GPIOInit+0x58>)
 8000c28:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIOx_PinMode = GPIO_MODE_ALTERNATE;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIOx_PinAltFunMode = GPIO_AFR_AF5;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIOx_PinOPType = GPIO_OUTPUT_PUSH_PULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIOx_PinSpeed = GPIO_SPEED_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIOx_PinPUPDControl = GPIO_PUPD_NA;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	733b      	strb	r3, [r7, #12]

	//Initialize MOSI Pin
	SPIPins.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_15;
 8000c3e:	230f      	movs	r3, #15
 8000c40:	723b      	strb	r3, [r7, #8]
	GPIOx_Init(&SPIPins);
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fb73 	bl	8000330 <GPIOx_Init>

	//Initialize MISO Pin
	SPIPins.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_14;
 8000c4a:	230e      	movs	r3, #14
 8000c4c:	723b      	strb	r3, [r7, #8]
	GPIOx_Init(&SPIPins);
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fb6d 	bl	8000330 <GPIOx_Init>

	//Initialize SCK
	SPIPins.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_13;
 8000c56:	230d      	movs	r3, #13
 8000c58:	723b      	strb	r3, [r7, #8]
	GPIOx_Init(&SPIPins);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fb67 	bl	8000330 <GPIOx_Init>

	//Initialize NSS
	SPIPins.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_12;
 8000c62:	230c      	movs	r3, #12
 8000c64:	723b      	strb	r3, [r7, #8]

	//SPI Pins configured!
	GPIOx_Init(&SPIPins);
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fb61 	bl	8000330 <GPIOx_Init>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40020400 	.word	0x40020400

08000c7c <SPI2_Init>:


void SPI2_Init(void){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
	//Configure and Initialize SPI2 peripheral
	SPIx_Handle_t SPI2_Handle;

	SPI2_Handle.pSPIx = SPI2;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <SPI2_Init+0x38>)
 8000c84:	607b      	str	r3, [r7, #4]
	SPI2_Handle.SPIx_Config.SPI_DEVICE_MODE = SPI_DEVICE_MODE_MASTER;
 8000c86:	2301      	movs	r3, #1
 8000c88:	723b      	strb	r3, [r7, #8]
	SPI2_Handle.SPIx_Config.SPI_BUS_CONFIG = SPI_BUS_CONFIG_FULL_DUPLEX;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	727b      	strb	r3, [r7, #9]
	SPI2_Handle.SPIx_Config.SPI_SCLK_SPEED = SPI_BAUDRATE_DIV8;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	72bb      	strb	r3, [r7, #10]
	SPI2_Handle.SPIx_Config.SPI_DFF = SPI_DFF_8BIT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	72fb      	strb	r3, [r7, #11]

	//Configure to Mode 0
	SPI2_Handle.SPIx_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	733b      	strb	r3, [r7, #12]
	SPI2_Handle.SPIx_Config.SPI_CPHA = SPI_CPHA_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	737b      	strb	r3, [r7, #13]

	//Enable Software Slave management for NSS
	SPI2_Handle.SPIx_Config.SPI_SSM = SPI_SSM_ENABLED;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	73bb      	strb	r3, [r7, #14]
	
	//Initialize SPI2 Peripheral
	SPI_Init(&SPI2_Handle);
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fe87 	bl	80009b8 <SPI_Init>
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40003800 	.word	0x40003800

08000cb8 <SPI_TX_TEST>:


void SPI_TX_TEST(char *data){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	//Configure SSI Bit
	SPI_SSI_Configure(SPI2, ENABLE);
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	480b      	ldr	r0, [pc, #44]	@ (8000cf0 <SPI_TX_TEST+0x38>)
 8000cc4:	f7ff ff4f 	bl	8000b66 <SPI_SSI_Configure>
	 * and NSS Pin will be high when SPE = 0
	*/
	//SPI_SSOE_Configure(SPI2, ENABLE);

	//Enable the SPI2 Peripheral
	SPI_Enable(SPI2);
 8000cc8:	4809      	ldr	r0, [pc, #36]	@ (8000cf0 <SPI_TX_TEST+0x38>)
 8000cca:	f7ff ff25 	bl	8000b18 <SPI_Enable>

	//Test SPI Send data API
	SPI_SendData(SPI2, (uint8_t *)data, strlen(data));
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fa82 	bl	80001d8 <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <SPI_TX_TEST+0x38>)
 8000cdc:	f7ff fee2 	bl	8000aa4 <SPI_SendData>

	//After transmission, we close or disable the SPI Peripheral
	//Disable the SPI2 Peripheral
	SPI_Disable_blocking(SPI2);
 8000ce0:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <SPI_TX_TEST+0x38>)
 8000ce2:	f7ff ff29 	bl	8000b38 <SPI_Disable_blocking>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40003800 	.word	0x40003800

08000cf4 <BUTTON_GPIO_INIT>:
void SPI_RX_TEST(void){
	//
}


void BUTTON_GPIO_INIT(void){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
	//Create handle
	GPIOx_Handle_t GPIOHandle;
	memset(&GPIOHandle, 0, sizeof(GPIOHandle));	//Clear
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	220c      	movs	r2, #12
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fb0d 	bl	8001320 <memset>
	GPIOHandle.pGPIOx_Base = GPIOA;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <BUTTON_GPIO_INIT+0x34>)
 8000d08:	607b      	str	r3, [r7, #4]
	GPIOHandle.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	723b      	strb	r3, [r7, #8]
	GPIOHandle.GPIO_PinConfig.GPIOx_PinMode = GPIO_MODE_INPUT;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	727b      	strb	r3, [r7, #9]
	GPIOHandle.GPIO_PinConfig.GPIOx_PinPUPDControl = GPIO_PUPD_PULL_UP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	733b      	strb	r3, [r7, #12]
	//Initialize
	GPIOx_Init(&GPIOHandle);
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fb09 	bl	8000330 <GPIOx_Init>
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40020000 	.word	0x40020000

08000d2c <EXTI0_IRQHandler>:




void EXTI0_IRQHandler(){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	//Handle debouncing
//	for(int i=0; i < 50000; i++);

	//Clear the Interrupt
	GPIO_IRQHandling(GPIO_PIN_0);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fcbb 	bl	80006ac <GPIO_IRQHandling>

	//Raise Flag
	transmit_flag = 1;
 8000d36:	4b02      	ldr	r3, [pc, #8]	@ (8000d40 <EXTI0_IRQHandler+0x14>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000078 	.word	0x20000078

08000d44 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <ITM_SendChar+0x48>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a0e      	ldr	r2, [pc, #56]	@ (8000d8c <ITM_SendChar+0x48>)
 8000d54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d58:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <ITM_SendChar+0x4c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d90 <ITM_SendChar+0x4c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000d66:	bf00      	nop
 8000d68:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f8      	beq.n	8000d68 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000d76:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	6013      	str	r3, [r2, #0]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000edfc 	.word	0xe000edfc
 8000d90:	e0000e00 	.word	0xe0000e00

08000d94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e00a      	b.n	8000dbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000da6:	f3af 8000 	nop.w
 8000daa:	4601      	mov	r1, r0
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	60ba      	str	r2, [r7, #8]
 8000db2:	b2ca      	uxtb	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf0      	blt.n	8000da6 <_read+0x12>
  }

  return len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e009      	b.n	8000df4 <_write+0x26>
  {
	  //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ffab 	bl	8000d44 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf1      	blt.n	8000de0 <_write+0x12>
  }
  return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_close>:

int _close(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_isatty>:

int _isatty(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	@ (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea0:	f000 fa8c 	bl	80013bc <__errno>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	e009      	b.n	8000ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <_sbrk+0x64>)
 8000ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20020000 	.word	0x20020000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	2000007c 	.word	0x2000007c
 8000ed8:	200001d0 	.word	0x200001d0

08000edc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000edc:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ede:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	@ (8000f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <LoopForever+0xe>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f28 <LoopForever+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f0a:	f000 fa5d 	bl	80013c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0e:	f7ff fe47 	bl	8000ba0 <main>

08000f12 <LoopForever>:

LoopForever:
  b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   r0, =_estack
 8000f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f20:	080018f0 	.word	0x080018f0
  ldr r2, =_sbss
 8000f24:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f28:	200001cc 	.word	0x200001cc

08000f2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC_IRQHandler>
	...

08000f30 <std>:
 8000f30:	2300      	movs	r3, #0
 8000f32:	b510      	push	{r4, lr}
 8000f34:	4604      	mov	r4, r0
 8000f36:	e9c0 3300 	strd	r3, r3, [r0]
 8000f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000f3e:	6083      	str	r3, [r0, #8]
 8000f40:	8181      	strh	r1, [r0, #12]
 8000f42:	6643      	str	r3, [r0, #100]	@ 0x64
 8000f44:	81c2      	strh	r2, [r0, #14]
 8000f46:	6183      	str	r3, [r0, #24]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	305c      	adds	r0, #92	@ 0x5c
 8000f4e:	f000 f9e7 	bl	8001320 <memset>
 8000f52:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <std+0x58>)
 8000f54:	6263      	str	r3, [r4, #36]	@ 0x24
 8000f56:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <std+0x5c>)
 8000f58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <std+0x60>)
 8000f5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <std+0x64>)
 8000f60:	6323      	str	r3, [r4, #48]	@ 0x30
 8000f62:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <std+0x68>)
 8000f64:	6224      	str	r4, [r4, #32]
 8000f66:	429c      	cmp	r4, r3
 8000f68:	d006      	beq.n	8000f78 <std+0x48>
 8000f6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000f6e:	4294      	cmp	r4, r2
 8000f70:	d002      	beq.n	8000f78 <std+0x48>
 8000f72:	33d0      	adds	r3, #208	@ 0xd0
 8000f74:	429c      	cmp	r4, r3
 8000f76:	d105      	bne.n	8000f84 <std+0x54>
 8000f78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f80:	f000 ba46 	b.w	8001410 <__retarget_lock_init_recursive>
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	bf00      	nop
 8000f88:	08001171 	.word	0x08001171
 8000f8c:	08001193 	.word	0x08001193
 8000f90:	080011cb 	.word	0x080011cb
 8000f94:	080011ef 	.word	0x080011ef
 8000f98:	20000080 	.word	0x20000080

08000f9c <stdio_exit_handler>:
 8000f9c:	4a02      	ldr	r2, [pc, #8]	@ (8000fa8 <stdio_exit_handler+0xc>)
 8000f9e:	4903      	ldr	r1, [pc, #12]	@ (8000fac <stdio_exit_handler+0x10>)
 8000fa0:	4803      	ldr	r0, [pc, #12]	@ (8000fb0 <stdio_exit_handler+0x14>)
 8000fa2:	f000 b869 	b.w	8001078 <_fwalk_sglue>
 8000fa6:	bf00      	nop
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	08001711 	.word	0x08001711
 8000fb0:	20000010 	.word	0x20000010

08000fb4 <cleanup_stdio>:
 8000fb4:	6841      	ldr	r1, [r0, #4]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <cleanup_stdio+0x34>)
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	b510      	push	{r4, lr}
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	d001      	beq.n	8000fc4 <cleanup_stdio+0x10>
 8000fc0:	f000 fba6 	bl	8001710 <_fflush_r>
 8000fc4:	68a1      	ldr	r1, [r4, #8]
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <cleanup_stdio+0x38>)
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d002      	beq.n	8000fd2 <cleanup_stdio+0x1e>
 8000fcc:	4620      	mov	r0, r4
 8000fce:	f000 fb9f 	bl	8001710 <_fflush_r>
 8000fd2:	68e1      	ldr	r1, [r4, #12]
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <cleanup_stdio+0x3c>)
 8000fd6:	4299      	cmp	r1, r3
 8000fd8:	d004      	beq.n	8000fe4 <cleanup_stdio+0x30>
 8000fda:	4620      	mov	r0, r4
 8000fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fe0:	f000 bb96 	b.w	8001710 <_fflush_r>
 8000fe4:	bd10      	pop	{r4, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000080 	.word	0x20000080
 8000fec:	200000e8 	.word	0x200000e8
 8000ff0:	20000150 	.word	0x20000150

08000ff4 <global_stdio_init.part.0>:
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <global_stdio_init.part.0+0x30>)
 8000ff8:	4c0b      	ldr	r4, [pc, #44]	@ (8001028 <global_stdio_init.part.0+0x34>)
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800102c <global_stdio_init.part.0+0x38>)
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	4620      	mov	r0, r4
 8001000:	2200      	movs	r2, #0
 8001002:	2104      	movs	r1, #4
 8001004:	f7ff ff94 	bl	8000f30 <std>
 8001008:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800100c:	2201      	movs	r2, #1
 800100e:	2109      	movs	r1, #9
 8001010:	f7ff ff8e 	bl	8000f30 <std>
 8001014:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001018:	2202      	movs	r2, #2
 800101a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800101e:	2112      	movs	r1, #18
 8001020:	f7ff bf86 	b.w	8000f30 <std>
 8001024:	200001b8 	.word	0x200001b8
 8001028:	20000080 	.word	0x20000080
 800102c:	08000f9d 	.word	0x08000f9d

08001030 <__sfp_lock_acquire>:
 8001030:	4801      	ldr	r0, [pc, #4]	@ (8001038 <__sfp_lock_acquire+0x8>)
 8001032:	f000 b9ee 	b.w	8001412 <__retarget_lock_acquire_recursive>
 8001036:	bf00      	nop
 8001038:	200001c1 	.word	0x200001c1

0800103c <__sfp_lock_release>:
 800103c:	4801      	ldr	r0, [pc, #4]	@ (8001044 <__sfp_lock_release+0x8>)
 800103e:	f000 b9e9 	b.w	8001414 <__retarget_lock_release_recursive>
 8001042:	bf00      	nop
 8001044:	200001c1 	.word	0x200001c1

08001048 <__sinit>:
 8001048:	b510      	push	{r4, lr}
 800104a:	4604      	mov	r4, r0
 800104c:	f7ff fff0 	bl	8001030 <__sfp_lock_acquire>
 8001050:	6a23      	ldr	r3, [r4, #32]
 8001052:	b11b      	cbz	r3, 800105c <__sinit+0x14>
 8001054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001058:	f7ff bff0 	b.w	800103c <__sfp_lock_release>
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <__sinit+0x28>)
 800105e:	6223      	str	r3, [r4, #32]
 8001060:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <__sinit+0x2c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f5      	bne.n	8001054 <__sinit+0xc>
 8001068:	f7ff ffc4 	bl	8000ff4 <global_stdio_init.part.0>
 800106c:	e7f2      	b.n	8001054 <__sinit+0xc>
 800106e:	bf00      	nop
 8001070:	08000fb5 	.word	0x08000fb5
 8001074:	200001b8 	.word	0x200001b8

08001078 <_fwalk_sglue>:
 8001078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800107c:	4607      	mov	r7, r0
 800107e:	4688      	mov	r8, r1
 8001080:	4614      	mov	r4, r2
 8001082:	2600      	movs	r6, #0
 8001084:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001088:	f1b9 0901 	subs.w	r9, r9, #1
 800108c:	d505      	bpl.n	800109a <_fwalk_sglue+0x22>
 800108e:	6824      	ldr	r4, [r4, #0]
 8001090:	2c00      	cmp	r4, #0
 8001092:	d1f7      	bne.n	8001084 <_fwalk_sglue+0xc>
 8001094:	4630      	mov	r0, r6
 8001096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800109a:	89ab      	ldrh	r3, [r5, #12]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d907      	bls.n	80010b0 <_fwalk_sglue+0x38>
 80010a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80010a4:	3301      	adds	r3, #1
 80010a6:	d003      	beq.n	80010b0 <_fwalk_sglue+0x38>
 80010a8:	4629      	mov	r1, r5
 80010aa:	4638      	mov	r0, r7
 80010ac:	47c0      	blx	r8
 80010ae:	4306      	orrs	r6, r0
 80010b0:	3568      	adds	r5, #104	@ 0x68
 80010b2:	e7e9      	b.n	8001088 <_fwalk_sglue+0x10>

080010b4 <_puts_r>:
 80010b4:	6a03      	ldr	r3, [r0, #32]
 80010b6:	b570      	push	{r4, r5, r6, lr}
 80010b8:	6884      	ldr	r4, [r0, #8]
 80010ba:	4605      	mov	r5, r0
 80010bc:	460e      	mov	r6, r1
 80010be:	b90b      	cbnz	r3, 80010c4 <_puts_r+0x10>
 80010c0:	f7ff ffc2 	bl	8001048 <__sinit>
 80010c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80010c6:	07db      	lsls	r3, r3, #31
 80010c8:	d405      	bmi.n	80010d6 <_puts_r+0x22>
 80010ca:	89a3      	ldrh	r3, [r4, #12]
 80010cc:	0598      	lsls	r0, r3, #22
 80010ce:	d402      	bmi.n	80010d6 <_puts_r+0x22>
 80010d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010d2:	f000 f99e 	bl	8001412 <__retarget_lock_acquire_recursive>
 80010d6:	89a3      	ldrh	r3, [r4, #12]
 80010d8:	0719      	lsls	r1, r3, #28
 80010da:	d502      	bpl.n	80010e2 <_puts_r+0x2e>
 80010dc:	6923      	ldr	r3, [r4, #16]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d135      	bne.n	800114e <_puts_r+0x9a>
 80010e2:	4621      	mov	r1, r4
 80010e4:	4628      	mov	r0, r5
 80010e6:	f000 f8c5 	bl	8001274 <__swsetup_r>
 80010ea:	b380      	cbz	r0, 800114e <_puts_r+0x9a>
 80010ec:	f04f 35ff 	mov.w	r5, #4294967295
 80010f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80010f2:	07da      	lsls	r2, r3, #31
 80010f4:	d405      	bmi.n	8001102 <_puts_r+0x4e>
 80010f6:	89a3      	ldrh	r3, [r4, #12]
 80010f8:	059b      	lsls	r3, r3, #22
 80010fa:	d402      	bmi.n	8001102 <_puts_r+0x4e>
 80010fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010fe:	f000 f989 	bl	8001414 <__retarget_lock_release_recursive>
 8001102:	4628      	mov	r0, r5
 8001104:	bd70      	pop	{r4, r5, r6, pc}
 8001106:	2b00      	cmp	r3, #0
 8001108:	da04      	bge.n	8001114 <_puts_r+0x60>
 800110a:	69a2      	ldr	r2, [r4, #24]
 800110c:	429a      	cmp	r2, r3
 800110e:	dc17      	bgt.n	8001140 <_puts_r+0x8c>
 8001110:	290a      	cmp	r1, #10
 8001112:	d015      	beq.n	8001140 <_puts_r+0x8c>
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	6022      	str	r2, [r4, #0]
 800111a:	7019      	strb	r1, [r3, #0]
 800111c:	68a3      	ldr	r3, [r4, #8]
 800111e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001122:	3b01      	subs	r3, #1
 8001124:	60a3      	str	r3, [r4, #8]
 8001126:	2900      	cmp	r1, #0
 8001128:	d1ed      	bne.n	8001106 <_puts_r+0x52>
 800112a:	2b00      	cmp	r3, #0
 800112c:	da11      	bge.n	8001152 <_puts_r+0x9e>
 800112e:	4622      	mov	r2, r4
 8001130:	210a      	movs	r1, #10
 8001132:	4628      	mov	r0, r5
 8001134:	f000 f85f 	bl	80011f6 <__swbuf_r>
 8001138:	3001      	adds	r0, #1
 800113a:	d0d7      	beq.n	80010ec <_puts_r+0x38>
 800113c:	250a      	movs	r5, #10
 800113e:	e7d7      	b.n	80010f0 <_puts_r+0x3c>
 8001140:	4622      	mov	r2, r4
 8001142:	4628      	mov	r0, r5
 8001144:	f000 f857 	bl	80011f6 <__swbuf_r>
 8001148:	3001      	adds	r0, #1
 800114a:	d1e7      	bne.n	800111c <_puts_r+0x68>
 800114c:	e7ce      	b.n	80010ec <_puts_r+0x38>
 800114e:	3e01      	subs	r6, #1
 8001150:	e7e4      	b.n	800111c <_puts_r+0x68>
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	6022      	str	r2, [r4, #0]
 8001158:	220a      	movs	r2, #10
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e7ee      	b.n	800113c <_puts_r+0x88>
	...

08001160 <puts>:
 8001160:	4b02      	ldr	r3, [pc, #8]	@ (800116c <puts+0xc>)
 8001162:	4601      	mov	r1, r0
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	f7ff bfa5 	b.w	80010b4 <_puts_r>
 800116a:	bf00      	nop
 800116c:	2000000c 	.word	0x2000000c

08001170 <__sread>:
 8001170:	b510      	push	{r4, lr}
 8001172:	460c      	mov	r4, r1
 8001174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001178:	f000 f8fc 	bl	8001374 <_read_r>
 800117c:	2800      	cmp	r0, #0
 800117e:	bfab      	itete	ge
 8001180:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001182:	89a3      	ldrhlt	r3, [r4, #12]
 8001184:	181b      	addge	r3, r3, r0
 8001186:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800118a:	bfac      	ite	ge
 800118c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800118e:	81a3      	strhlt	r3, [r4, #12]
 8001190:	bd10      	pop	{r4, pc}

08001192 <__swrite>:
 8001192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001196:	461f      	mov	r7, r3
 8001198:	898b      	ldrh	r3, [r1, #12]
 800119a:	05db      	lsls	r3, r3, #23
 800119c:	4605      	mov	r5, r0
 800119e:	460c      	mov	r4, r1
 80011a0:	4616      	mov	r6, r2
 80011a2:	d505      	bpl.n	80011b0 <__swrite+0x1e>
 80011a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011a8:	2302      	movs	r3, #2
 80011aa:	2200      	movs	r2, #0
 80011ac:	f000 f8d0 	bl	8001350 <_lseek_r>
 80011b0:	89a3      	ldrh	r3, [r4, #12]
 80011b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011ba:	81a3      	strh	r3, [r4, #12]
 80011bc:	4632      	mov	r2, r6
 80011be:	463b      	mov	r3, r7
 80011c0:	4628      	mov	r0, r5
 80011c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011c6:	f000 b8e7 	b.w	8001398 <_write_r>

080011ca <__sseek>:
 80011ca:	b510      	push	{r4, lr}
 80011cc:	460c      	mov	r4, r1
 80011ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011d2:	f000 f8bd 	bl	8001350 <_lseek_r>
 80011d6:	1c43      	adds	r3, r0, #1
 80011d8:	89a3      	ldrh	r3, [r4, #12]
 80011da:	bf15      	itete	ne
 80011dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80011de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80011e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80011e6:	81a3      	strheq	r3, [r4, #12]
 80011e8:	bf18      	it	ne
 80011ea:	81a3      	strhne	r3, [r4, #12]
 80011ec:	bd10      	pop	{r4, pc}

080011ee <__sclose>:
 80011ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011f2:	f000 b89d 	b.w	8001330 <_close_r>

080011f6 <__swbuf_r>:
 80011f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f8:	460e      	mov	r6, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	4605      	mov	r5, r0
 80011fe:	b118      	cbz	r0, 8001208 <__swbuf_r+0x12>
 8001200:	6a03      	ldr	r3, [r0, #32]
 8001202:	b90b      	cbnz	r3, 8001208 <__swbuf_r+0x12>
 8001204:	f7ff ff20 	bl	8001048 <__sinit>
 8001208:	69a3      	ldr	r3, [r4, #24]
 800120a:	60a3      	str	r3, [r4, #8]
 800120c:	89a3      	ldrh	r3, [r4, #12]
 800120e:	071a      	lsls	r2, r3, #28
 8001210:	d501      	bpl.n	8001216 <__swbuf_r+0x20>
 8001212:	6923      	ldr	r3, [r4, #16]
 8001214:	b943      	cbnz	r3, 8001228 <__swbuf_r+0x32>
 8001216:	4621      	mov	r1, r4
 8001218:	4628      	mov	r0, r5
 800121a:	f000 f82b 	bl	8001274 <__swsetup_r>
 800121e:	b118      	cbz	r0, 8001228 <__swbuf_r+0x32>
 8001220:	f04f 37ff 	mov.w	r7, #4294967295
 8001224:	4638      	mov	r0, r7
 8001226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	6922      	ldr	r2, [r4, #16]
 800122c:	1a98      	subs	r0, r3, r2
 800122e:	6963      	ldr	r3, [r4, #20]
 8001230:	b2f6      	uxtb	r6, r6
 8001232:	4283      	cmp	r3, r0
 8001234:	4637      	mov	r7, r6
 8001236:	dc05      	bgt.n	8001244 <__swbuf_r+0x4e>
 8001238:	4621      	mov	r1, r4
 800123a:	4628      	mov	r0, r5
 800123c:	f000 fa68 	bl	8001710 <_fflush_r>
 8001240:	2800      	cmp	r0, #0
 8001242:	d1ed      	bne.n	8001220 <__swbuf_r+0x2a>
 8001244:	68a3      	ldr	r3, [r4, #8]
 8001246:	3b01      	subs	r3, #1
 8001248:	60a3      	str	r3, [r4, #8]
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	6022      	str	r2, [r4, #0]
 8001250:	701e      	strb	r6, [r3, #0]
 8001252:	6962      	ldr	r2, [r4, #20]
 8001254:	1c43      	adds	r3, r0, #1
 8001256:	429a      	cmp	r2, r3
 8001258:	d004      	beq.n	8001264 <__swbuf_r+0x6e>
 800125a:	89a3      	ldrh	r3, [r4, #12]
 800125c:	07db      	lsls	r3, r3, #31
 800125e:	d5e1      	bpl.n	8001224 <__swbuf_r+0x2e>
 8001260:	2e0a      	cmp	r6, #10
 8001262:	d1df      	bne.n	8001224 <__swbuf_r+0x2e>
 8001264:	4621      	mov	r1, r4
 8001266:	4628      	mov	r0, r5
 8001268:	f000 fa52 	bl	8001710 <_fflush_r>
 800126c:	2800      	cmp	r0, #0
 800126e:	d0d9      	beq.n	8001224 <__swbuf_r+0x2e>
 8001270:	e7d6      	b.n	8001220 <__swbuf_r+0x2a>
	...

08001274 <__swsetup_r>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	4b29      	ldr	r3, [pc, #164]	@ (800131c <__swsetup_r+0xa8>)
 8001278:	4605      	mov	r5, r0
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	460c      	mov	r4, r1
 800127e:	b118      	cbz	r0, 8001288 <__swsetup_r+0x14>
 8001280:	6a03      	ldr	r3, [r0, #32]
 8001282:	b90b      	cbnz	r3, 8001288 <__swsetup_r+0x14>
 8001284:	f7ff fee0 	bl	8001048 <__sinit>
 8001288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800128c:	0719      	lsls	r1, r3, #28
 800128e:	d422      	bmi.n	80012d6 <__swsetup_r+0x62>
 8001290:	06da      	lsls	r2, r3, #27
 8001292:	d407      	bmi.n	80012a4 <__swsetup_r+0x30>
 8001294:	2209      	movs	r2, #9
 8001296:	602a      	str	r2, [r5, #0]
 8001298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800129c:	81a3      	strh	r3, [r4, #12]
 800129e:	f04f 30ff 	mov.w	r0, #4294967295
 80012a2:	e033      	b.n	800130c <__swsetup_r+0x98>
 80012a4:	0758      	lsls	r0, r3, #29
 80012a6:	d512      	bpl.n	80012ce <__swsetup_r+0x5a>
 80012a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012aa:	b141      	cbz	r1, 80012be <__swsetup_r+0x4a>
 80012ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012b0:	4299      	cmp	r1, r3
 80012b2:	d002      	beq.n	80012ba <__swsetup_r+0x46>
 80012b4:	4628      	mov	r0, r5
 80012b6:	f000 f8af 	bl	8001418 <_free_r>
 80012ba:	2300      	movs	r3, #0
 80012bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80012be:	89a3      	ldrh	r3, [r4, #12]
 80012c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80012c4:	81a3      	strh	r3, [r4, #12]
 80012c6:	2300      	movs	r3, #0
 80012c8:	6063      	str	r3, [r4, #4]
 80012ca:	6923      	ldr	r3, [r4, #16]
 80012cc:	6023      	str	r3, [r4, #0]
 80012ce:	89a3      	ldrh	r3, [r4, #12]
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	81a3      	strh	r3, [r4, #12]
 80012d6:	6923      	ldr	r3, [r4, #16]
 80012d8:	b94b      	cbnz	r3, 80012ee <__swsetup_r+0x7a>
 80012da:	89a3      	ldrh	r3, [r4, #12]
 80012dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80012e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012e4:	d003      	beq.n	80012ee <__swsetup_r+0x7a>
 80012e6:	4621      	mov	r1, r4
 80012e8:	4628      	mov	r0, r5
 80012ea:	f000 fa5f 	bl	80017ac <__smakebuf_r>
 80012ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012f2:	f013 0201 	ands.w	r2, r3, #1
 80012f6:	d00a      	beq.n	800130e <__swsetup_r+0x9a>
 80012f8:	2200      	movs	r2, #0
 80012fa:	60a2      	str	r2, [r4, #8]
 80012fc:	6962      	ldr	r2, [r4, #20]
 80012fe:	4252      	negs	r2, r2
 8001300:	61a2      	str	r2, [r4, #24]
 8001302:	6922      	ldr	r2, [r4, #16]
 8001304:	b942      	cbnz	r2, 8001318 <__swsetup_r+0xa4>
 8001306:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800130a:	d1c5      	bne.n	8001298 <__swsetup_r+0x24>
 800130c:	bd38      	pop	{r3, r4, r5, pc}
 800130e:	0799      	lsls	r1, r3, #30
 8001310:	bf58      	it	pl
 8001312:	6962      	ldrpl	r2, [r4, #20]
 8001314:	60a2      	str	r2, [r4, #8]
 8001316:	e7f4      	b.n	8001302 <__swsetup_r+0x8e>
 8001318:	2000      	movs	r0, #0
 800131a:	e7f7      	b.n	800130c <__swsetup_r+0x98>
 800131c:	2000000c 	.word	0x2000000c

08001320 <memset>:
 8001320:	4402      	add	r2, r0
 8001322:	4603      	mov	r3, r0
 8001324:	4293      	cmp	r3, r2
 8001326:	d100      	bne.n	800132a <memset+0xa>
 8001328:	4770      	bx	lr
 800132a:	f803 1b01 	strb.w	r1, [r3], #1
 800132e:	e7f9      	b.n	8001324 <memset+0x4>

08001330 <_close_r>:
 8001330:	b538      	push	{r3, r4, r5, lr}
 8001332:	4d06      	ldr	r5, [pc, #24]	@ (800134c <_close_r+0x1c>)
 8001334:	2300      	movs	r3, #0
 8001336:	4604      	mov	r4, r0
 8001338:	4608      	mov	r0, r1
 800133a:	602b      	str	r3, [r5, #0]
 800133c:	f7ff fd63 	bl	8000e06 <_close>
 8001340:	1c43      	adds	r3, r0, #1
 8001342:	d102      	bne.n	800134a <_close_r+0x1a>
 8001344:	682b      	ldr	r3, [r5, #0]
 8001346:	b103      	cbz	r3, 800134a <_close_r+0x1a>
 8001348:	6023      	str	r3, [r4, #0]
 800134a:	bd38      	pop	{r3, r4, r5, pc}
 800134c:	200001bc 	.word	0x200001bc

08001350 <_lseek_r>:
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	4d07      	ldr	r5, [pc, #28]	@ (8001370 <_lseek_r+0x20>)
 8001354:	4604      	mov	r4, r0
 8001356:	4608      	mov	r0, r1
 8001358:	4611      	mov	r1, r2
 800135a:	2200      	movs	r2, #0
 800135c:	602a      	str	r2, [r5, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	f7ff fd78 	bl	8000e54 <_lseek>
 8001364:	1c43      	adds	r3, r0, #1
 8001366:	d102      	bne.n	800136e <_lseek_r+0x1e>
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	b103      	cbz	r3, 800136e <_lseek_r+0x1e>
 800136c:	6023      	str	r3, [r4, #0]
 800136e:	bd38      	pop	{r3, r4, r5, pc}
 8001370:	200001bc 	.word	0x200001bc

08001374 <_read_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4d07      	ldr	r5, [pc, #28]	@ (8001394 <_read_r+0x20>)
 8001378:	4604      	mov	r4, r0
 800137a:	4608      	mov	r0, r1
 800137c:	4611      	mov	r1, r2
 800137e:	2200      	movs	r2, #0
 8001380:	602a      	str	r2, [r5, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	f7ff fd06 	bl	8000d94 <_read>
 8001388:	1c43      	adds	r3, r0, #1
 800138a:	d102      	bne.n	8001392 <_read_r+0x1e>
 800138c:	682b      	ldr	r3, [r5, #0]
 800138e:	b103      	cbz	r3, 8001392 <_read_r+0x1e>
 8001390:	6023      	str	r3, [r4, #0]
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	200001bc 	.word	0x200001bc

08001398 <_write_r>:
 8001398:	b538      	push	{r3, r4, r5, lr}
 800139a:	4d07      	ldr	r5, [pc, #28]	@ (80013b8 <_write_r+0x20>)
 800139c:	4604      	mov	r4, r0
 800139e:	4608      	mov	r0, r1
 80013a0:	4611      	mov	r1, r2
 80013a2:	2200      	movs	r2, #0
 80013a4:	602a      	str	r2, [r5, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	f7ff fd11 	bl	8000dce <_write>
 80013ac:	1c43      	adds	r3, r0, #1
 80013ae:	d102      	bne.n	80013b6 <_write_r+0x1e>
 80013b0:	682b      	ldr	r3, [r5, #0]
 80013b2:	b103      	cbz	r3, 80013b6 <_write_r+0x1e>
 80013b4:	6023      	str	r3, [r4, #0]
 80013b6:	bd38      	pop	{r3, r4, r5, pc}
 80013b8:	200001bc 	.word	0x200001bc

080013bc <__errno>:
 80013bc:	4b01      	ldr	r3, [pc, #4]	@ (80013c4 <__errno+0x8>)
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	2000000c 	.word	0x2000000c

080013c8 <__libc_init_array>:
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	4d0d      	ldr	r5, [pc, #52]	@ (8001400 <__libc_init_array+0x38>)
 80013cc:	4c0d      	ldr	r4, [pc, #52]	@ (8001404 <__libc_init_array+0x3c>)
 80013ce:	1b64      	subs	r4, r4, r5
 80013d0:	10a4      	asrs	r4, r4, #2
 80013d2:	2600      	movs	r6, #0
 80013d4:	42a6      	cmp	r6, r4
 80013d6:	d109      	bne.n	80013ec <__libc_init_array+0x24>
 80013d8:	4d0b      	ldr	r5, [pc, #44]	@ (8001408 <__libc_init_array+0x40>)
 80013da:	4c0c      	ldr	r4, [pc, #48]	@ (800140c <__libc_init_array+0x44>)
 80013dc:	f000 fa54 	bl	8001888 <_init>
 80013e0:	1b64      	subs	r4, r4, r5
 80013e2:	10a4      	asrs	r4, r4, #2
 80013e4:	2600      	movs	r6, #0
 80013e6:	42a6      	cmp	r6, r4
 80013e8:	d105      	bne.n	80013f6 <__libc_init_array+0x2e>
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
 80013ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80013f0:	4798      	blx	r3
 80013f2:	3601      	adds	r6, #1
 80013f4:	e7ee      	b.n	80013d4 <__libc_init_array+0xc>
 80013f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80013fa:	4798      	blx	r3
 80013fc:	3601      	adds	r6, #1
 80013fe:	e7f2      	b.n	80013e6 <__libc_init_array+0x1e>
 8001400:	080018e8 	.word	0x080018e8
 8001404:	080018e8 	.word	0x080018e8
 8001408:	080018e8 	.word	0x080018e8
 800140c:	080018ec 	.word	0x080018ec

08001410 <__retarget_lock_init_recursive>:
 8001410:	4770      	bx	lr

08001412 <__retarget_lock_acquire_recursive>:
 8001412:	4770      	bx	lr

08001414 <__retarget_lock_release_recursive>:
 8001414:	4770      	bx	lr
	...

08001418 <_free_r>:
 8001418:	b538      	push	{r3, r4, r5, lr}
 800141a:	4605      	mov	r5, r0
 800141c:	2900      	cmp	r1, #0
 800141e:	d041      	beq.n	80014a4 <_free_r+0x8c>
 8001420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001424:	1f0c      	subs	r4, r1, #4
 8001426:	2b00      	cmp	r3, #0
 8001428:	bfb8      	it	lt
 800142a:	18e4      	addlt	r4, r4, r3
 800142c:	f000 f8e0 	bl	80015f0 <__malloc_lock>
 8001430:	4a1d      	ldr	r2, [pc, #116]	@ (80014a8 <_free_r+0x90>)
 8001432:	6813      	ldr	r3, [r2, #0]
 8001434:	b933      	cbnz	r3, 8001444 <_free_r+0x2c>
 8001436:	6063      	str	r3, [r4, #4]
 8001438:	6014      	str	r4, [r2, #0]
 800143a:	4628      	mov	r0, r5
 800143c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001440:	f000 b8dc 	b.w	80015fc <__malloc_unlock>
 8001444:	42a3      	cmp	r3, r4
 8001446:	d908      	bls.n	800145a <_free_r+0x42>
 8001448:	6820      	ldr	r0, [r4, #0]
 800144a:	1821      	adds	r1, r4, r0
 800144c:	428b      	cmp	r3, r1
 800144e:	bf01      	itttt	eq
 8001450:	6819      	ldreq	r1, [r3, #0]
 8001452:	685b      	ldreq	r3, [r3, #4]
 8001454:	1809      	addeq	r1, r1, r0
 8001456:	6021      	streq	r1, [r4, #0]
 8001458:	e7ed      	b.n	8001436 <_free_r+0x1e>
 800145a:	461a      	mov	r2, r3
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	b10b      	cbz	r3, 8001464 <_free_r+0x4c>
 8001460:	42a3      	cmp	r3, r4
 8001462:	d9fa      	bls.n	800145a <_free_r+0x42>
 8001464:	6811      	ldr	r1, [r2, #0]
 8001466:	1850      	adds	r0, r2, r1
 8001468:	42a0      	cmp	r0, r4
 800146a:	d10b      	bne.n	8001484 <_free_r+0x6c>
 800146c:	6820      	ldr	r0, [r4, #0]
 800146e:	4401      	add	r1, r0
 8001470:	1850      	adds	r0, r2, r1
 8001472:	4283      	cmp	r3, r0
 8001474:	6011      	str	r1, [r2, #0]
 8001476:	d1e0      	bne.n	800143a <_free_r+0x22>
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	6053      	str	r3, [r2, #4]
 800147e:	4408      	add	r0, r1
 8001480:	6010      	str	r0, [r2, #0]
 8001482:	e7da      	b.n	800143a <_free_r+0x22>
 8001484:	d902      	bls.n	800148c <_free_r+0x74>
 8001486:	230c      	movs	r3, #12
 8001488:	602b      	str	r3, [r5, #0]
 800148a:	e7d6      	b.n	800143a <_free_r+0x22>
 800148c:	6820      	ldr	r0, [r4, #0]
 800148e:	1821      	adds	r1, r4, r0
 8001490:	428b      	cmp	r3, r1
 8001492:	bf04      	itt	eq
 8001494:	6819      	ldreq	r1, [r3, #0]
 8001496:	685b      	ldreq	r3, [r3, #4]
 8001498:	6063      	str	r3, [r4, #4]
 800149a:	bf04      	itt	eq
 800149c:	1809      	addeq	r1, r1, r0
 800149e:	6021      	streq	r1, [r4, #0]
 80014a0:	6054      	str	r4, [r2, #4]
 80014a2:	e7ca      	b.n	800143a <_free_r+0x22>
 80014a4:	bd38      	pop	{r3, r4, r5, pc}
 80014a6:	bf00      	nop
 80014a8:	200001c8 	.word	0x200001c8

080014ac <sbrk_aligned>:
 80014ac:	b570      	push	{r4, r5, r6, lr}
 80014ae:	4e0f      	ldr	r6, [pc, #60]	@ (80014ec <sbrk_aligned+0x40>)
 80014b0:	460c      	mov	r4, r1
 80014b2:	6831      	ldr	r1, [r6, #0]
 80014b4:	4605      	mov	r5, r0
 80014b6:	b911      	cbnz	r1, 80014be <sbrk_aligned+0x12>
 80014b8:	f000 f9d6 	bl	8001868 <_sbrk_r>
 80014bc:	6030      	str	r0, [r6, #0]
 80014be:	4621      	mov	r1, r4
 80014c0:	4628      	mov	r0, r5
 80014c2:	f000 f9d1 	bl	8001868 <_sbrk_r>
 80014c6:	1c43      	adds	r3, r0, #1
 80014c8:	d103      	bne.n	80014d2 <sbrk_aligned+0x26>
 80014ca:	f04f 34ff 	mov.w	r4, #4294967295
 80014ce:	4620      	mov	r0, r4
 80014d0:	bd70      	pop	{r4, r5, r6, pc}
 80014d2:	1cc4      	adds	r4, r0, #3
 80014d4:	f024 0403 	bic.w	r4, r4, #3
 80014d8:	42a0      	cmp	r0, r4
 80014da:	d0f8      	beq.n	80014ce <sbrk_aligned+0x22>
 80014dc:	1a21      	subs	r1, r4, r0
 80014de:	4628      	mov	r0, r5
 80014e0:	f000 f9c2 	bl	8001868 <_sbrk_r>
 80014e4:	3001      	adds	r0, #1
 80014e6:	d1f2      	bne.n	80014ce <sbrk_aligned+0x22>
 80014e8:	e7ef      	b.n	80014ca <sbrk_aligned+0x1e>
 80014ea:	bf00      	nop
 80014ec:	200001c4 	.word	0x200001c4

080014f0 <_malloc_r>:
 80014f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014f4:	1ccd      	adds	r5, r1, #3
 80014f6:	f025 0503 	bic.w	r5, r5, #3
 80014fa:	3508      	adds	r5, #8
 80014fc:	2d0c      	cmp	r5, #12
 80014fe:	bf38      	it	cc
 8001500:	250c      	movcc	r5, #12
 8001502:	2d00      	cmp	r5, #0
 8001504:	4606      	mov	r6, r0
 8001506:	db01      	blt.n	800150c <_malloc_r+0x1c>
 8001508:	42a9      	cmp	r1, r5
 800150a:	d904      	bls.n	8001516 <_malloc_r+0x26>
 800150c:	230c      	movs	r3, #12
 800150e:	6033      	str	r3, [r6, #0]
 8001510:	2000      	movs	r0, #0
 8001512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001516:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80015ec <_malloc_r+0xfc>
 800151a:	f000 f869 	bl	80015f0 <__malloc_lock>
 800151e:	f8d8 3000 	ldr.w	r3, [r8]
 8001522:	461c      	mov	r4, r3
 8001524:	bb44      	cbnz	r4, 8001578 <_malloc_r+0x88>
 8001526:	4629      	mov	r1, r5
 8001528:	4630      	mov	r0, r6
 800152a:	f7ff ffbf 	bl	80014ac <sbrk_aligned>
 800152e:	1c43      	adds	r3, r0, #1
 8001530:	4604      	mov	r4, r0
 8001532:	d158      	bne.n	80015e6 <_malloc_r+0xf6>
 8001534:	f8d8 4000 	ldr.w	r4, [r8]
 8001538:	4627      	mov	r7, r4
 800153a:	2f00      	cmp	r7, #0
 800153c:	d143      	bne.n	80015c6 <_malloc_r+0xd6>
 800153e:	2c00      	cmp	r4, #0
 8001540:	d04b      	beq.n	80015da <_malloc_r+0xea>
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	4639      	mov	r1, r7
 8001546:	4630      	mov	r0, r6
 8001548:	eb04 0903 	add.w	r9, r4, r3
 800154c:	f000 f98c 	bl	8001868 <_sbrk_r>
 8001550:	4581      	cmp	r9, r0
 8001552:	d142      	bne.n	80015da <_malloc_r+0xea>
 8001554:	6821      	ldr	r1, [r4, #0]
 8001556:	1a6d      	subs	r5, r5, r1
 8001558:	4629      	mov	r1, r5
 800155a:	4630      	mov	r0, r6
 800155c:	f7ff ffa6 	bl	80014ac <sbrk_aligned>
 8001560:	3001      	adds	r0, #1
 8001562:	d03a      	beq.n	80015da <_malloc_r+0xea>
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	442b      	add	r3, r5
 8001568:	6023      	str	r3, [r4, #0]
 800156a:	f8d8 3000 	ldr.w	r3, [r8]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	bb62      	cbnz	r2, 80015cc <_malloc_r+0xdc>
 8001572:	f8c8 7000 	str.w	r7, [r8]
 8001576:	e00f      	b.n	8001598 <_malloc_r+0xa8>
 8001578:	6822      	ldr	r2, [r4, #0]
 800157a:	1b52      	subs	r2, r2, r5
 800157c:	d420      	bmi.n	80015c0 <_malloc_r+0xd0>
 800157e:	2a0b      	cmp	r2, #11
 8001580:	d917      	bls.n	80015b2 <_malloc_r+0xc2>
 8001582:	1961      	adds	r1, r4, r5
 8001584:	42a3      	cmp	r3, r4
 8001586:	6025      	str	r5, [r4, #0]
 8001588:	bf18      	it	ne
 800158a:	6059      	strne	r1, [r3, #4]
 800158c:	6863      	ldr	r3, [r4, #4]
 800158e:	bf08      	it	eq
 8001590:	f8c8 1000 	streq.w	r1, [r8]
 8001594:	5162      	str	r2, [r4, r5]
 8001596:	604b      	str	r3, [r1, #4]
 8001598:	4630      	mov	r0, r6
 800159a:	f000 f82f 	bl	80015fc <__malloc_unlock>
 800159e:	f104 000b 	add.w	r0, r4, #11
 80015a2:	1d23      	adds	r3, r4, #4
 80015a4:	f020 0007 	bic.w	r0, r0, #7
 80015a8:	1ac2      	subs	r2, r0, r3
 80015aa:	bf1c      	itt	ne
 80015ac:	1a1b      	subne	r3, r3, r0
 80015ae:	50a3      	strne	r3, [r4, r2]
 80015b0:	e7af      	b.n	8001512 <_malloc_r+0x22>
 80015b2:	6862      	ldr	r2, [r4, #4]
 80015b4:	42a3      	cmp	r3, r4
 80015b6:	bf0c      	ite	eq
 80015b8:	f8c8 2000 	streq.w	r2, [r8]
 80015bc:	605a      	strne	r2, [r3, #4]
 80015be:	e7eb      	b.n	8001598 <_malloc_r+0xa8>
 80015c0:	4623      	mov	r3, r4
 80015c2:	6864      	ldr	r4, [r4, #4]
 80015c4:	e7ae      	b.n	8001524 <_malloc_r+0x34>
 80015c6:	463c      	mov	r4, r7
 80015c8:	687f      	ldr	r7, [r7, #4]
 80015ca:	e7b6      	b.n	800153a <_malloc_r+0x4a>
 80015cc:	461a      	mov	r2, r3
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	42a3      	cmp	r3, r4
 80015d2:	d1fb      	bne.n	80015cc <_malloc_r+0xdc>
 80015d4:	2300      	movs	r3, #0
 80015d6:	6053      	str	r3, [r2, #4]
 80015d8:	e7de      	b.n	8001598 <_malloc_r+0xa8>
 80015da:	230c      	movs	r3, #12
 80015dc:	6033      	str	r3, [r6, #0]
 80015de:	4630      	mov	r0, r6
 80015e0:	f000 f80c 	bl	80015fc <__malloc_unlock>
 80015e4:	e794      	b.n	8001510 <_malloc_r+0x20>
 80015e6:	6005      	str	r5, [r0, #0]
 80015e8:	e7d6      	b.n	8001598 <_malloc_r+0xa8>
 80015ea:	bf00      	nop
 80015ec:	200001c8 	.word	0x200001c8

080015f0 <__malloc_lock>:
 80015f0:	4801      	ldr	r0, [pc, #4]	@ (80015f8 <__malloc_lock+0x8>)
 80015f2:	f7ff bf0e 	b.w	8001412 <__retarget_lock_acquire_recursive>
 80015f6:	bf00      	nop
 80015f8:	200001c0 	.word	0x200001c0

080015fc <__malloc_unlock>:
 80015fc:	4801      	ldr	r0, [pc, #4]	@ (8001604 <__malloc_unlock+0x8>)
 80015fe:	f7ff bf09 	b.w	8001414 <__retarget_lock_release_recursive>
 8001602:	bf00      	nop
 8001604:	200001c0 	.word	0x200001c0

08001608 <__sflush_r>:
 8001608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800160c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001610:	0716      	lsls	r6, r2, #28
 8001612:	4605      	mov	r5, r0
 8001614:	460c      	mov	r4, r1
 8001616:	d454      	bmi.n	80016c2 <__sflush_r+0xba>
 8001618:	684b      	ldr	r3, [r1, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	dc02      	bgt.n	8001624 <__sflush_r+0x1c>
 800161e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001620:	2b00      	cmp	r3, #0
 8001622:	dd48      	ble.n	80016b6 <__sflush_r+0xae>
 8001624:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001626:	2e00      	cmp	r6, #0
 8001628:	d045      	beq.n	80016b6 <__sflush_r+0xae>
 800162a:	2300      	movs	r3, #0
 800162c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001630:	682f      	ldr	r7, [r5, #0]
 8001632:	6a21      	ldr	r1, [r4, #32]
 8001634:	602b      	str	r3, [r5, #0]
 8001636:	d030      	beq.n	800169a <__sflush_r+0x92>
 8001638:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800163a:	89a3      	ldrh	r3, [r4, #12]
 800163c:	0759      	lsls	r1, r3, #29
 800163e:	d505      	bpl.n	800164c <__sflush_r+0x44>
 8001640:	6863      	ldr	r3, [r4, #4]
 8001642:	1ad2      	subs	r2, r2, r3
 8001644:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001646:	b10b      	cbz	r3, 800164c <__sflush_r+0x44>
 8001648:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800164a:	1ad2      	subs	r2, r2, r3
 800164c:	2300      	movs	r3, #0
 800164e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001650:	6a21      	ldr	r1, [r4, #32]
 8001652:	4628      	mov	r0, r5
 8001654:	47b0      	blx	r6
 8001656:	1c43      	adds	r3, r0, #1
 8001658:	89a3      	ldrh	r3, [r4, #12]
 800165a:	d106      	bne.n	800166a <__sflush_r+0x62>
 800165c:	6829      	ldr	r1, [r5, #0]
 800165e:	291d      	cmp	r1, #29
 8001660:	d82b      	bhi.n	80016ba <__sflush_r+0xb2>
 8001662:	4a2a      	ldr	r2, [pc, #168]	@ (800170c <__sflush_r+0x104>)
 8001664:	410a      	asrs	r2, r1
 8001666:	07d6      	lsls	r6, r2, #31
 8001668:	d427      	bmi.n	80016ba <__sflush_r+0xb2>
 800166a:	2200      	movs	r2, #0
 800166c:	6062      	str	r2, [r4, #4]
 800166e:	04d9      	lsls	r1, r3, #19
 8001670:	6922      	ldr	r2, [r4, #16]
 8001672:	6022      	str	r2, [r4, #0]
 8001674:	d504      	bpl.n	8001680 <__sflush_r+0x78>
 8001676:	1c42      	adds	r2, r0, #1
 8001678:	d101      	bne.n	800167e <__sflush_r+0x76>
 800167a:	682b      	ldr	r3, [r5, #0]
 800167c:	b903      	cbnz	r3, 8001680 <__sflush_r+0x78>
 800167e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001680:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001682:	602f      	str	r7, [r5, #0]
 8001684:	b1b9      	cbz	r1, 80016b6 <__sflush_r+0xae>
 8001686:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800168a:	4299      	cmp	r1, r3
 800168c:	d002      	beq.n	8001694 <__sflush_r+0x8c>
 800168e:	4628      	mov	r0, r5
 8001690:	f7ff fec2 	bl	8001418 <_free_r>
 8001694:	2300      	movs	r3, #0
 8001696:	6363      	str	r3, [r4, #52]	@ 0x34
 8001698:	e00d      	b.n	80016b6 <__sflush_r+0xae>
 800169a:	2301      	movs	r3, #1
 800169c:	4628      	mov	r0, r5
 800169e:	47b0      	blx	r6
 80016a0:	4602      	mov	r2, r0
 80016a2:	1c50      	adds	r0, r2, #1
 80016a4:	d1c9      	bne.n	800163a <__sflush_r+0x32>
 80016a6:	682b      	ldr	r3, [r5, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0c6      	beq.n	800163a <__sflush_r+0x32>
 80016ac:	2b1d      	cmp	r3, #29
 80016ae:	d001      	beq.n	80016b4 <__sflush_r+0xac>
 80016b0:	2b16      	cmp	r3, #22
 80016b2:	d11e      	bne.n	80016f2 <__sflush_r+0xea>
 80016b4:	602f      	str	r7, [r5, #0]
 80016b6:	2000      	movs	r0, #0
 80016b8:	e022      	b.n	8001700 <__sflush_r+0xf8>
 80016ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016be:	b21b      	sxth	r3, r3
 80016c0:	e01b      	b.n	80016fa <__sflush_r+0xf2>
 80016c2:	690f      	ldr	r7, [r1, #16]
 80016c4:	2f00      	cmp	r7, #0
 80016c6:	d0f6      	beq.n	80016b6 <__sflush_r+0xae>
 80016c8:	0793      	lsls	r3, r2, #30
 80016ca:	680e      	ldr	r6, [r1, #0]
 80016cc:	bf08      	it	eq
 80016ce:	694b      	ldreq	r3, [r1, #20]
 80016d0:	600f      	str	r7, [r1, #0]
 80016d2:	bf18      	it	ne
 80016d4:	2300      	movne	r3, #0
 80016d6:	eba6 0807 	sub.w	r8, r6, r7
 80016da:	608b      	str	r3, [r1, #8]
 80016dc:	f1b8 0f00 	cmp.w	r8, #0
 80016e0:	dde9      	ble.n	80016b6 <__sflush_r+0xae>
 80016e2:	6a21      	ldr	r1, [r4, #32]
 80016e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80016e6:	4643      	mov	r3, r8
 80016e8:	463a      	mov	r2, r7
 80016ea:	4628      	mov	r0, r5
 80016ec:	47b0      	blx	r6
 80016ee:	2800      	cmp	r0, #0
 80016f0:	dc08      	bgt.n	8001704 <__sflush_r+0xfc>
 80016f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016fa:	81a3      	strh	r3, [r4, #12]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001704:	4407      	add	r7, r0
 8001706:	eba8 0800 	sub.w	r8, r8, r0
 800170a:	e7e7      	b.n	80016dc <__sflush_r+0xd4>
 800170c:	dfbffffe 	.word	0xdfbffffe

08001710 <_fflush_r>:
 8001710:	b538      	push	{r3, r4, r5, lr}
 8001712:	690b      	ldr	r3, [r1, #16]
 8001714:	4605      	mov	r5, r0
 8001716:	460c      	mov	r4, r1
 8001718:	b913      	cbnz	r3, 8001720 <_fflush_r+0x10>
 800171a:	2500      	movs	r5, #0
 800171c:	4628      	mov	r0, r5
 800171e:	bd38      	pop	{r3, r4, r5, pc}
 8001720:	b118      	cbz	r0, 800172a <_fflush_r+0x1a>
 8001722:	6a03      	ldr	r3, [r0, #32]
 8001724:	b90b      	cbnz	r3, 800172a <_fflush_r+0x1a>
 8001726:	f7ff fc8f 	bl	8001048 <__sinit>
 800172a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f3      	beq.n	800171a <_fflush_r+0xa>
 8001732:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001734:	07d0      	lsls	r0, r2, #31
 8001736:	d404      	bmi.n	8001742 <_fflush_r+0x32>
 8001738:	0599      	lsls	r1, r3, #22
 800173a:	d402      	bmi.n	8001742 <_fflush_r+0x32>
 800173c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800173e:	f7ff fe68 	bl	8001412 <__retarget_lock_acquire_recursive>
 8001742:	4628      	mov	r0, r5
 8001744:	4621      	mov	r1, r4
 8001746:	f7ff ff5f 	bl	8001608 <__sflush_r>
 800174a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800174c:	07da      	lsls	r2, r3, #31
 800174e:	4605      	mov	r5, r0
 8001750:	d4e4      	bmi.n	800171c <_fflush_r+0xc>
 8001752:	89a3      	ldrh	r3, [r4, #12]
 8001754:	059b      	lsls	r3, r3, #22
 8001756:	d4e1      	bmi.n	800171c <_fflush_r+0xc>
 8001758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800175a:	f7ff fe5b 	bl	8001414 <__retarget_lock_release_recursive>
 800175e:	e7dd      	b.n	800171c <_fflush_r+0xc>

08001760 <__swhatbuf_r>:
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	460c      	mov	r4, r1
 8001764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001768:	2900      	cmp	r1, #0
 800176a:	b096      	sub	sp, #88	@ 0x58
 800176c:	4615      	mov	r5, r2
 800176e:	461e      	mov	r6, r3
 8001770:	da0d      	bge.n	800178e <__swhatbuf_r+0x2e>
 8001772:	89a3      	ldrh	r3, [r4, #12]
 8001774:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001778:	f04f 0100 	mov.w	r1, #0
 800177c:	bf14      	ite	ne
 800177e:	2340      	movne	r3, #64	@ 0x40
 8001780:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001784:	2000      	movs	r0, #0
 8001786:	6031      	str	r1, [r6, #0]
 8001788:	602b      	str	r3, [r5, #0]
 800178a:	b016      	add	sp, #88	@ 0x58
 800178c:	bd70      	pop	{r4, r5, r6, pc}
 800178e:	466a      	mov	r2, sp
 8001790:	f000 f848 	bl	8001824 <_fstat_r>
 8001794:	2800      	cmp	r0, #0
 8001796:	dbec      	blt.n	8001772 <__swhatbuf_r+0x12>
 8001798:	9901      	ldr	r1, [sp, #4]
 800179a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800179e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80017a2:	4259      	negs	r1, r3
 80017a4:	4159      	adcs	r1, r3
 80017a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017aa:	e7eb      	b.n	8001784 <__swhatbuf_r+0x24>

080017ac <__smakebuf_r>:
 80017ac:	898b      	ldrh	r3, [r1, #12]
 80017ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017b0:	079d      	lsls	r5, r3, #30
 80017b2:	4606      	mov	r6, r0
 80017b4:	460c      	mov	r4, r1
 80017b6:	d507      	bpl.n	80017c8 <__smakebuf_r+0x1c>
 80017b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80017bc:	6023      	str	r3, [r4, #0]
 80017be:	6123      	str	r3, [r4, #16]
 80017c0:	2301      	movs	r3, #1
 80017c2:	6163      	str	r3, [r4, #20]
 80017c4:	b003      	add	sp, #12
 80017c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c8:	ab01      	add	r3, sp, #4
 80017ca:	466a      	mov	r2, sp
 80017cc:	f7ff ffc8 	bl	8001760 <__swhatbuf_r>
 80017d0:	9f00      	ldr	r7, [sp, #0]
 80017d2:	4605      	mov	r5, r0
 80017d4:	4639      	mov	r1, r7
 80017d6:	4630      	mov	r0, r6
 80017d8:	f7ff fe8a 	bl	80014f0 <_malloc_r>
 80017dc:	b948      	cbnz	r0, 80017f2 <__smakebuf_r+0x46>
 80017de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017e2:	059a      	lsls	r2, r3, #22
 80017e4:	d4ee      	bmi.n	80017c4 <__smakebuf_r+0x18>
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	81a3      	strh	r3, [r4, #12]
 80017f0:	e7e2      	b.n	80017b8 <__smakebuf_r+0xc>
 80017f2:	89a3      	ldrh	r3, [r4, #12]
 80017f4:	6020      	str	r0, [r4, #0]
 80017f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017fa:	81a3      	strh	r3, [r4, #12]
 80017fc:	9b01      	ldr	r3, [sp, #4]
 80017fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001802:	b15b      	cbz	r3, 800181c <__smakebuf_r+0x70>
 8001804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001808:	4630      	mov	r0, r6
 800180a:	f000 f81d 	bl	8001848 <_isatty_r>
 800180e:	b128      	cbz	r0, 800181c <__smakebuf_r+0x70>
 8001810:	89a3      	ldrh	r3, [r4, #12]
 8001812:	f023 0303 	bic.w	r3, r3, #3
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	81a3      	strh	r3, [r4, #12]
 800181c:	89a3      	ldrh	r3, [r4, #12]
 800181e:	431d      	orrs	r5, r3
 8001820:	81a5      	strh	r5, [r4, #12]
 8001822:	e7cf      	b.n	80017c4 <__smakebuf_r+0x18>

08001824 <_fstat_r>:
 8001824:	b538      	push	{r3, r4, r5, lr}
 8001826:	4d07      	ldr	r5, [pc, #28]	@ (8001844 <_fstat_r+0x20>)
 8001828:	2300      	movs	r3, #0
 800182a:	4604      	mov	r4, r0
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	602b      	str	r3, [r5, #0]
 8001832:	f7ff faf4 	bl	8000e1e <_fstat>
 8001836:	1c43      	adds	r3, r0, #1
 8001838:	d102      	bne.n	8001840 <_fstat_r+0x1c>
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	b103      	cbz	r3, 8001840 <_fstat_r+0x1c>
 800183e:	6023      	str	r3, [r4, #0]
 8001840:	bd38      	pop	{r3, r4, r5, pc}
 8001842:	bf00      	nop
 8001844:	200001bc 	.word	0x200001bc

08001848 <_isatty_r>:
 8001848:	b538      	push	{r3, r4, r5, lr}
 800184a:	4d06      	ldr	r5, [pc, #24]	@ (8001864 <_isatty_r+0x1c>)
 800184c:	2300      	movs	r3, #0
 800184e:	4604      	mov	r4, r0
 8001850:	4608      	mov	r0, r1
 8001852:	602b      	str	r3, [r5, #0]
 8001854:	f7ff faf3 	bl	8000e3e <_isatty>
 8001858:	1c43      	adds	r3, r0, #1
 800185a:	d102      	bne.n	8001862 <_isatty_r+0x1a>
 800185c:	682b      	ldr	r3, [r5, #0]
 800185e:	b103      	cbz	r3, 8001862 <_isatty_r+0x1a>
 8001860:	6023      	str	r3, [r4, #0]
 8001862:	bd38      	pop	{r3, r4, r5, pc}
 8001864:	200001bc 	.word	0x200001bc

08001868 <_sbrk_r>:
 8001868:	b538      	push	{r3, r4, r5, lr}
 800186a:	4d06      	ldr	r5, [pc, #24]	@ (8001884 <_sbrk_r+0x1c>)
 800186c:	2300      	movs	r3, #0
 800186e:	4604      	mov	r4, r0
 8001870:	4608      	mov	r0, r1
 8001872:	602b      	str	r3, [r5, #0]
 8001874:	f7ff fafc 	bl	8000e70 <_sbrk>
 8001878:	1c43      	adds	r3, r0, #1
 800187a:	d102      	bne.n	8001882 <_sbrk_r+0x1a>
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	b103      	cbz	r3, 8001882 <_sbrk_r+0x1a>
 8001880:	6023      	str	r3, [r4, #0]
 8001882:	bd38      	pop	{r3, r4, r5, pc}
 8001884:	200001bc 	.word	0x200001bc

08001888 <_init>:
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188a:	bf00      	nop
 800188c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800188e:	bc08      	pop	{r3}
 8001890:	469e      	mov	lr, r3
 8001892:	4770      	bx	lr

08001894 <_fini>:
 8001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001896:	bf00      	nop
 8001898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189a:	bc08      	pop	{r3}
 800189c:	469e      	mov	lr, r3
 800189e:	4770      	bx	lr
