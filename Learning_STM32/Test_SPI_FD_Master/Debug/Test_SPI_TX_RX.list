
Test_SPI_TX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f20  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080020c0  080020c0  000030c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002174  08002174  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002174  08002174  00003174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800217c  0800217c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800217c  0800217c  0000317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002180  08002180  00003180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002184  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080021e0  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080021e0  000041cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028cc  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000093f  00000000  00000000  00006958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000358  00000000  00000000  00007298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000269  00000000  00000000  000075f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039e8  00000000  00000000  00007859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000358b  00000000  00000000  0000b241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c490  00000000  00000000  0000e7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001ac5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000150c  00000000  00000000  0001aca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0001c1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080020a8 	.word	0x080020a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080020a8 	.word	0x080020a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <GPIOx_PClkControl>:
#include "GPIO_Driver.h"

/*
 * GPIO Peripheral - GPIO Peripheral Clock Control API Definition
 */
void GPIOx_PClkControl(GPIOx_RegDef_t *pGPIOx_Base, uint8_t EN_DI){
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
	if(EN_DI == CLK_EN){
 800028c:	78fb      	ldrb	r3, [r7, #3]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d141      	bne.n	8000316 <GPIOx_PClkControl+0x96>
		if(pGPIOx_Base == GPIOA){
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a45      	ldr	r2, [pc, #276]	@ (80003ac <GPIOx_PClkControl+0x12c>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d106      	bne.n	80002a8 <GPIOx_PClkControl+0x28>
			GPIOA_PCLK_EN();
 800029a:	4b45      	ldr	r3, [pc, #276]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800029c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800029e:	4a44      	ldr	r2, [pc, #272]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOH_PCLK_DI();
		}
		else{
		}
	}
}
 80002a6:	e07a      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOB){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4a42      	ldr	r2, [pc, #264]	@ (80003b4 <GPIOx_PClkControl+0x134>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d106      	bne.n	80002be <GPIOx_PClkControl+0x3e>
			GPIOB_PCLK_EN();
 80002b0:	4b3f      	ldr	r3, [pc, #252]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b4:	4a3e      	ldr	r2, [pc, #248]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002b6:	f043 0302 	orr.w	r3, r3, #2
 80002ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002bc:	e06f      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOC){
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a3d      	ldr	r2, [pc, #244]	@ (80003b8 <GPIOx_PClkControl+0x138>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d106      	bne.n	80002d4 <GPIOx_PClkControl+0x54>
			GPIOC_PCLK_EN();
 80002c6:	4b3a      	ldr	r3, [pc, #232]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ca:	4a39      	ldr	r2, [pc, #228]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002cc:	f043 0304 	orr.w	r3, r3, #4
 80002d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002d2:	e064      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOD){
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a39      	ldr	r2, [pc, #228]	@ (80003bc <GPIOx_PClkControl+0x13c>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d106      	bne.n	80002ea <GPIOx_PClkControl+0x6a>
			GPIOD_PCLK_EN();
 80002dc:	4b34      	ldr	r3, [pc, #208]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e0:	4a33      	ldr	r2, [pc, #204]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002e8:	e059      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOE){
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a34      	ldr	r2, [pc, #208]	@ (80003c0 <GPIOx_PClkControl+0x140>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <GPIOx_PClkControl+0x80>
			GPIOE_PCLK_EN();
 80002f2:	4b2f      	ldr	r3, [pc, #188]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f6:	4a2e      	ldr	r2, [pc, #184]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002f8:	f043 0310 	orr.w	r3, r3, #16
 80002fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002fe:	e04e      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOH){
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a30      	ldr	r2, [pc, #192]	@ (80003c4 <GPIOx_PClkControl+0x144>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d14a      	bne.n	800039e <GPIOx_PClkControl+0x11e>
			GPIOH_PCLK_EN();
 8000308:	4b29      	ldr	r3, [pc, #164]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030c:	4a28      	ldr	r2, [pc, #160]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800030e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000312:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000314:	e043      	b.n	800039e <GPIOx_PClkControl+0x11e>
	else if(EN_DI == CLK_DI){
 8000316:	78fb      	ldrb	r3, [r7, #3]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d140      	bne.n	800039e <GPIOx_PClkControl+0x11e>
		if(pGPIOx_Base == GPIOA){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a23      	ldr	r2, [pc, #140]	@ (80003ac <GPIOx_PClkControl+0x12c>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIOx_PClkControl+0xb2>
			GPIOA_PCLK_DI();
 8000324:	4b22      	ldr	r3, [pc, #136]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000328:	4a21      	ldr	r2, [pc, #132]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800032a:	f023 0301 	bic.w	r3, r3, #1
 800032e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000330:	e035      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOB){
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a1f      	ldr	r2, [pc, #124]	@ (80003b4 <GPIOx_PClkControl+0x134>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIOx_PClkControl+0xc8>
			GPIOB_PCLK_DI();
 800033a:	4b1d      	ldr	r3, [pc, #116]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033e:	4a1c      	ldr	r2, [pc, #112]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000340:	f023 0302 	bic.w	r3, r3, #2
 8000344:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000346:	e02a      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOC){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a1b      	ldr	r2, [pc, #108]	@ (80003b8 <GPIOx_PClkControl+0x138>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIOx_PClkControl+0xde>
			GPIOC_PCLK_DI();
 8000350:	4b17      	ldr	r3, [pc, #92]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000354:	4a16      	ldr	r2, [pc, #88]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000356:	f023 0304 	bic.w	r3, r3, #4
 800035a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035c:	e01f      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOD){
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a16      	ldr	r2, [pc, #88]	@ (80003bc <GPIOx_PClkControl+0x13c>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIOx_PClkControl+0xf4>
			GPIOD_PCLK_DI();
 8000366:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036a:	4a11      	ldr	r2, [pc, #68]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800036c:	f023 0308 	bic.w	r3, r3, #8
 8000370:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000372:	e014      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOE){
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a12      	ldr	r2, [pc, #72]	@ (80003c0 <GPIOx_PClkControl+0x140>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d106      	bne.n	800038a <GPIOx_PClkControl+0x10a>
			GPIOE_PCLK_DI();
 800037c:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000380:	4a0b      	ldr	r2, [pc, #44]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000382:	f023 0310 	bic.w	r3, r3, #16
 8000386:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000388:	e009      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOH){
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a0d      	ldr	r2, [pc, #52]	@ (80003c4 <GPIOx_PClkControl+0x144>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d105      	bne.n	800039e <GPIOx_PClkControl+0x11e>
			GPIOH_PCLK_DI();
 8000392:	4b07      	ldr	r3, [pc, #28]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000396:	4a06      	ldr	r2, [pc, #24]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800039c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40020000 	.word	0x40020000
 80003b0:	40023800 	.word	0x40023800
 80003b4:	40020400 	.word	0x40020400
 80003b8:	40020800 	.word	0x40020800
 80003bc:	40020c00 	.word	0x40020c00
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40021c00 	.word	0x40021c00

080003c8 <GPIO_SetPullUpDown>:
	uint8_t bit_pos = GPIO_Pin * 2;
	pGPIOx_Base->OSPEEDR &= ~(0x3 << bit_pos);		//Clear bits
	pGPIOx_Base->OSPEEDR |= (speed << bit_pos);		//Set bits
}

void GPIO_SetPullUpDown(GPIOx_RegDef_t *pGPIOx_Base, uint8_t GPIO_Pin, uint8_t config){
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	70fb      	strb	r3, [r7, #3]
 80003d4:	4613      	mov	r3, r2
 80003d6:	70bb      	strb	r3, [r7, #2]
	uint8_t bit_pos = GPIO_Pin;
 80003d8:	78fb      	ldrb	r3, [r7, #3]
 80003da:	73fb      	strb	r3, [r7, #15]
	pGPIOx_Base->PUPDR &= ~(0x3 << bit_pos);	//Clear bits
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	7bfa      	ldrb	r2, [r7, #15]
 80003e2:	2103      	movs	r1, #3
 80003e4:	fa01 f202 	lsl.w	r2, r1, r2
 80003e8:	43d2      	mvns	r2, r2
 80003ea:	401a      	ands	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	60da      	str	r2, [r3, #12]
	pGPIOx_Base->PUPDR |= (config << bit_pos);	//Set bits
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	78b9      	ldrb	r1, [r7, #2]
 80003f6:	7bfa      	ldrb	r2, [r7, #15]
 80003f8:	fa01 f202 	lsl.w	r2, r1, r2
 80003fc:	431a      	orrs	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	60da      	str	r2, [r3, #12]
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
	...

08000410 <GPIOx_Init>:
}

/*
 * GPIO Peripheral - GPIO Initialization API Definition
 */
void GPIOx_Init(GPIOx_Handle_t *pGPIOHandle){
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	//Initialize variables
	uint8_t bit_pos = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_index = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	73bb      	strb	r3, [r7, #14]
	uint8_t temp = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	737b      	strb	r3, [r7, #13]
	uint8_t port_code = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	733b      	strb	r3, [r7, #12]

	//Initialize GPIO Peripheral clock
	GPIOx_PClkControl(pGPIOHandle->pGPIOx_Base, CLK_EN);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2101      	movs	r1, #1
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff ff26 	bl	8000280 <GPIOx_PClkControl>

	/*Non Interrupt mode configurations*/
	if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode <= GPIO_MODE_ANALOG){
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	795b      	ldrb	r3, [r3, #5]
 8000438:	2b03      	cmp	r3, #3
 800043a:	f200 80ca 	bhi.w	80005d2 <GPIOx_Init+0x1c2>
		//1. Set GPIO Pin Mode
		bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber * 2;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx_Base->MODER &= ~(0x3 << bit_pos);		//Clear the Bits
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	7bfb      	ldrb	r3, [r7, #15]
 800044e:	2103      	movs	r1, #3
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	43db      	mvns	r3, r3
 8000456:	4619      	mov	r1, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	400a      	ands	r2, r1
 800045e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx_Base->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode << bit_pos);		//Set Bits
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	795b      	ldrb	r3, [r3, #5]
 800046a:	4619      	mov	r1, r3
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	4619      	mov	r1, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	430a      	orrs	r2, r1
 800047a:	601a      	str	r2, [r3, #0]
		bit_pos = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]

		//2. Set GPIO Pin Output Type
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_OUTPUT){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	795b      	ldrb	r3, [r3, #5]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d11f      	bne.n	80004c8 <GPIOx_Init+0xb8>
			bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	791b      	ldrb	r3, [r3, #4]
 800048c:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx_Base->OTYPER &= ~(0x1 << bit_pos);	//Clear the Bits
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	2101      	movs	r1, #1
 8000498:	fa01 f303 	lsl.w	r3, r1, r3
 800049c:	43db      	mvns	r3, r3
 800049e:	4619      	mov	r1, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	400a      	ands	r2, r1
 80004a6:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx_Base->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinOPType << bit_pos);	//Set Bits
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	685a      	ldr	r2, [r3, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	79db      	ldrb	r3, [r3, #7]
 80004b2:	4619      	mov	r1, r3
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ba:	4619      	mov	r1, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	430a      	orrs	r2, r1
 80004c2:	605a      	str	r2, [r3, #4]
			bit_pos = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	73fb      	strb	r3, [r7, #15]
		}

		//3. Set GPIO Pin Speed
		bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber * 2;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx_Base->OSPEEDR &= ~(0x3 << bit_pos);	//Clear the Bits
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	689a      	ldr	r2, [r3, #8]
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	2103      	movs	r1, #3
 80004da:	fa01 f303 	lsl.w	r3, r1, r3
 80004de:	43db      	mvns	r3, r3
 80004e0:	4619      	mov	r1, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	400a      	ands	r2, r1
 80004e8:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx_Base->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinSpeed << bit_pos);	//Set Bits
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	689a      	ldr	r2, [r3, #8]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	799b      	ldrb	r3, [r3, #6]
 80004f4:	4619      	mov	r1, r3
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	fa01 f303 	lsl.w	r3, r1, r3
 80004fc:	4619      	mov	r1, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	430a      	orrs	r2, r1
 8000504:	609a      	str	r2, [r3, #8]
		bit_pos = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	73fb      	strb	r3, [r7, #15]

		//4. Set GPIO Pin Pull Up/Down Register
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INPUT){
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	795b      	ldrb	r3, [r3, #5]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d120      	bne.n	8000554 <GPIOx_Init+0x144>
			bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber * 2;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx_Base->PUPDR &= ~(0x3 << bit_pos);	//Clear the Bits
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	68da      	ldr	r2, [r3, #12]
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	2103      	movs	r1, #3
 8000524:	fa01 f303 	lsl.w	r3, r1, r3
 8000528:	43db      	mvns	r3, r3
 800052a:	4619      	mov	r1, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	400a      	ands	r2, r1
 8000532:	60da      	str	r2, [r3, #12]
			pGPIOHandle->pGPIOx_Base->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinPUPDControl << bit_pos);	//Set Bits
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	68da      	ldr	r2, [r3, #12]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	7a1b      	ldrb	r3, [r3, #8]
 800053e:	4619      	mov	r1, r3
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	4619      	mov	r1, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	430a      	orrs	r2, r1
 800054e:	60da      	str	r2, [r3, #12]
			bit_pos = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]
		}

		//5. Set GPIO Pin Alternate Functionality Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_ALTERNATE){
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	795b      	ldrb	r3, [r3, #5]
 8000558:	2b02      	cmp	r3, #2
 800055a:	f040 80eb 	bne.w	8000734 <GPIOx_Init+0x324>
			//Configure the Alternate functionality registers
			reg_index = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber / 8);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	08db      	lsrs	r3, r3, #3
 8000564:	73bb      	strb	r3, [r7, #14]
			temp = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber % 8);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	791b      	ldrb	r3, [r3, #4]
 800056a:	f003 0307 	and.w	r3, r3, #7
 800056e:	737b      	strb	r3, [r7, #13]
			bit_pos = (temp * 4);
 8000570:	7b7b      	ldrb	r3, [r7, #13]
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx_Base->AFR[reg_index] &= ~(0xf << bit_pos);	//Clear the Bits
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	7bba      	ldrb	r2, [r7, #14]
 800057c:	3208      	adds	r2, #8
 800057e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	220f      	movs	r2, #15
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	43db      	mvns	r3, r3
 800058c:	4618      	mov	r0, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	7bba      	ldrb	r2, [r7, #14]
 8000594:	4001      	ands	r1, r0
 8000596:	3208      	adds	r2, #8
 8000598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx_Base->AFR[reg_index] |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinAltFunMode << bit_pos);	//Set Bits
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	7bba      	ldrb	r2, [r7, #14]
 80005a2:	3208      	adds	r2, #8
 80005a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7a5b      	ldrb	r3, [r3, #9]
 80005ac:	461a      	mov	r2, r3
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	7bba      	ldrb	r2, [r7, #14]
 80005bc:	4301      	orrs	r1, r0
 80005be:	3208      	adds	r2, #8
 80005c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			reg_index = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73bb      	strb	r3, [r7, #14]
			temp = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	737b      	strb	r3, [r7, #13]
			bit_pos = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
		bit_pos = 0;

		//3. Enable the EXTI Interrupt delivery using IMR
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
	}
}
 80005d0:	e0b0      	b.n	8000734 <GPIOx_Init+0x324>
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INT_RISING){
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	2b05      	cmp	r3, #5
 80005d8:	d117      	bne.n	800060a <GPIOx_Init+0x1fa>
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 80005da:	4b58      	ldr	r3, [pc, #352]	@ (800073c <GPIOx_Init+0x32c>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	7912      	ldrb	r2, [r2, #4]
 80005e2:	4611      	mov	r1, r2
 80005e4:	2201      	movs	r2, #1
 80005e6:	408a      	lsls	r2, r1
 80005e8:	4611      	mov	r1, r2
 80005ea:	4a54      	ldr	r2, [pc, #336]	@ (800073c <GPIOx_Init+0x32c>)
 80005ec:	430b      	orrs	r3, r1
 80005ee:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 80005f0:	4b52      	ldr	r3, [pc, #328]	@ (800073c <GPIOx_Init+0x32c>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	7912      	ldrb	r2, [r2, #4]
 80005f8:	4611      	mov	r1, r2
 80005fa:	2201      	movs	r2, #1
 80005fc:	408a      	lsls	r2, r1
 80005fe:	43d2      	mvns	r2, r2
 8000600:	4611      	mov	r1, r2
 8000602:	4a4e      	ldr	r2, [pc, #312]	@ (800073c <GPIOx_Init+0x32c>)
 8000604:	400b      	ands	r3, r1
 8000606:	60d3      	str	r3, [r2, #12]
 8000608:	e035      	b.n	8000676 <GPIOx_Init+0x266>
		else if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INT_FALLING){
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	795b      	ldrb	r3, [r3, #5]
 800060e:	2b04      	cmp	r3, #4
 8000610:	d117      	bne.n	8000642 <GPIOx_Init+0x232>
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 8000612:	4b4a      	ldr	r3, [pc, #296]	@ (800073c <GPIOx_Init+0x32c>)
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	7912      	ldrb	r2, [r2, #4]
 800061a:	4611      	mov	r1, r2
 800061c:	2201      	movs	r2, #1
 800061e:	408a      	lsls	r2, r1
 8000620:	4611      	mov	r1, r2
 8000622:	4a46      	ldr	r2, [pc, #280]	@ (800073c <GPIOx_Init+0x32c>)
 8000624:	430b      	orrs	r3, r1
 8000626:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 8000628:	4b44      	ldr	r3, [pc, #272]	@ (800073c <GPIOx_Init+0x32c>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	7912      	ldrb	r2, [r2, #4]
 8000630:	4611      	mov	r1, r2
 8000632:	2201      	movs	r2, #1
 8000634:	408a      	lsls	r2, r1
 8000636:	43d2      	mvns	r2, r2
 8000638:	4611      	mov	r1, r2
 800063a:	4a40      	ldr	r2, [pc, #256]	@ (800073c <GPIOx_Init+0x32c>)
 800063c:	400b      	ands	r3, r1
 800063e:	6093      	str	r3, [r2, #8]
 8000640:	e019      	b.n	8000676 <GPIOx_Init+0x266>
		else if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INT_BOTH){
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	795b      	ldrb	r3, [r3, #5]
 8000646:	2b06      	cmp	r3, #6
 8000648:	d115      	bne.n	8000676 <GPIOx_Init+0x266>
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 800064a:	4b3c      	ldr	r3, [pc, #240]	@ (800073c <GPIOx_Init+0x32c>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	7912      	ldrb	r2, [r2, #4]
 8000652:	4611      	mov	r1, r2
 8000654:	2201      	movs	r2, #1
 8000656:	408a      	lsls	r2, r1
 8000658:	4611      	mov	r1, r2
 800065a:	4a38      	ldr	r2, [pc, #224]	@ (800073c <GPIOx_Init+0x32c>)
 800065c:	430b      	orrs	r3, r1
 800065e:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 8000660:	4b36      	ldr	r3, [pc, #216]	@ (800073c <GPIOx_Init+0x32c>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	7912      	ldrb	r2, [r2, #4]
 8000668:	4611      	mov	r1, r2
 800066a:	2201      	movs	r2, #1
 800066c:	408a      	lsls	r2, r1
 800066e:	4611      	mov	r1, r2
 8000670:	4a32      	ldr	r2, [pc, #200]	@ (800073c <GPIOx_Init+0x32c>)
 8000672:	430b      	orrs	r3, r1
 8000674:	60d3      	str	r3, [r2, #12]
		reg_index = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber / 4);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	089b      	lsrs	r3, r3, #2
 800067c:	73bb      	strb	r3, [r7, #14]
		temp = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber % 4);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	f003 0303 	and.w	r3, r3, #3
 8000686:	737b      	strb	r3, [r7, #13]
		bit_pos = (temp * 4);
 8000688:	7b7b      	ldrb	r3, [r7, #13]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	73fb      	strb	r3, [r7, #15]
		port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx_Base);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a2b      	ldr	r2, [pc, #172]	@ (8000740 <GPIOx_Init+0x330>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d024      	beq.n	80006e2 <GPIOx_Init+0x2d2>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a29      	ldr	r2, [pc, #164]	@ (8000744 <GPIOx_Init+0x334>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d01d      	beq.n	80006de <GPIOx_Init+0x2ce>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <GPIOx_Init+0x338>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d016      	beq.n	80006da <GPIOx_Init+0x2ca>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a26      	ldr	r2, [pc, #152]	@ (800074c <GPIOx_Init+0x33c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d00f      	beq.n	80006d6 <GPIOx_Init+0x2c6>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a25      	ldr	r2, [pc, #148]	@ (8000750 <GPIOx_Init+0x340>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d008      	beq.n	80006d2 <GPIOx_Init+0x2c2>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a23      	ldr	r2, [pc, #140]	@ (8000754 <GPIOx_Init+0x344>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d101      	bne.n	80006ce <GPIOx_Init+0x2be>
 80006ca:	2307      	movs	r3, #7
 80006cc:	e00a      	b.n	80006e4 <GPIOx_Init+0x2d4>
 80006ce:	2300      	movs	r3, #0
 80006d0:	e008      	b.n	80006e4 <GPIOx_Init+0x2d4>
 80006d2:	2304      	movs	r3, #4
 80006d4:	e006      	b.n	80006e4 <GPIOx_Init+0x2d4>
 80006d6:	2303      	movs	r3, #3
 80006d8:	e004      	b.n	80006e4 <GPIOx_Init+0x2d4>
 80006da:	2302      	movs	r3, #2
 80006dc:	e002      	b.n	80006e4 <GPIOx_Init+0x2d4>
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <GPIOx_Init+0x2d4>
 80006e2:	2300      	movs	r3, #0
 80006e4:	733b      	strb	r3, [r7, #12]
		SYSCFG_PCLK_EN();
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <GPIOx_Init+0x348>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000758 <GPIOx_Init+0x348>)
 80006ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f0:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[reg_index] |= (port_code << bit_pos);
 80006f2:	4a1a      	ldr	r2, [pc, #104]	@ (800075c <GPIOx_Init+0x34c>)
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	3302      	adds	r3, #2
 80006f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006fc:	7b39      	ldrb	r1, [r7, #12]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	fa01 f303 	lsl.w	r3, r1, r3
 8000704:	4618      	mov	r0, r3
 8000706:	4915      	ldr	r1, [pc, #84]	@ (800075c <GPIOx_Init+0x34c>)
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	4302      	orrs	r2, r0
 800070c:	3302      	adds	r3, #2
 800070e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		reg_index = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	73bb      	strb	r3, [r7, #14]
		temp = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	737b      	strb	r3, [r7, #13]
		bit_pos = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	73fb      	strb	r3, [r7, #15]
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 800071e:	4b07      	ldr	r3, [pc, #28]	@ (800073c <GPIOx_Init+0x32c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	7912      	ldrb	r2, [r2, #4]
 8000726:	4611      	mov	r1, r2
 8000728:	2201      	movs	r2, #1
 800072a:	408a      	lsls	r2, r1
 800072c:	4611      	mov	r1, r2
 800072e:	4a03      	ldr	r2, [pc, #12]	@ (800073c <GPIOx_Init+0x32c>)
 8000730:	430b      	orrs	r3, r1
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40013c00 	.word	0x40013c00
 8000740:	40020000 	.word	0x40020000
 8000744:	40020400 	.word	0x40020400
 8000748:	40020800 	.word	0x40020800
 800074c:	40020c00 	.word	0x40020c00
 8000750:	40021000 	.word	0x40021000
 8000754:	40021c00 	.word	0x40021c00
 8000758:	40023800 	.word	0x40023800
 800075c:	40013800 	.word	0x40013800

08000760 <GPIO_IRQ_INT_Config>:
/*
 * GPIO Peripheral - IRQ API Definitions
 */


void GPIO_IRQ_INT_Config(uint8_t IRQNumber, uint8_t EN_DI){
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	4613      	mov	r3, r2
 800076e:	71bb      	strb	r3, [r7, #6]
	uint8_t bit_pos = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]

	/*1. Enable/Disable Interrupts */
	if(EN_DI == ENABLE){
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d137      	bne.n	80007ea <GPIO_IRQ_INT_Config+0x8a>
		if(IRQNumber <= 31){
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b1f      	cmp	r3, #31
 800077e:	d80a      	bhi.n	8000796 <GPIO_IRQ_INT_Config+0x36>
			//To Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000780:	4b39      	ldr	r3, [pc, #228]	@ (8000868 <GPIO_IRQ_INT_Config+0x108>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	79fa      	ldrb	r2, [r7, #7]
 8000786:	2101      	movs	r1, #1
 8000788:	fa01 f202 	lsl.w	r2, r1, r2
 800078c:	4611      	mov	r1, r2
 800078e:	4a36      	ldr	r2, [pc, #216]	@ (8000868 <GPIO_IRQ_INT_Config+0x108>)
 8000790:	430b      	orrs	r3, r1
 8000792:	6013      	str	r3, [r2, #0]
			//To Program ICER2 Register
			bit_pos = IRQNumber % 32;
			*NVIC_ICER2 |= (1 << bit_pos);
		}
	}
}
 8000794:	e061      	b.n	800085a <GPIO_IRQ_INT_Config+0xfa>
		else if(IRQNumber > 31 && IRQNumber < 64){
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b1f      	cmp	r3, #31
 800079a:	d911      	bls.n	80007c0 <GPIO_IRQ_INT_Config+0x60>
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b3f      	cmp	r3, #63	@ 0x3f
 80007a0:	d80e      	bhi.n	80007c0 <GPIO_IRQ_INT_Config+0x60>
			bit_pos = IRQNumber % 32;
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 031f 	and.w	r3, r3, #31
 80007a8:	73fb      	strb	r3, [r7, #15]
			*NVIC_ISER1 |= (1 << bit_pos);
 80007aa:	4b30      	ldr	r3, [pc, #192]	@ (800086c <GPIO_IRQ_INT_Config+0x10c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	2101      	movs	r1, #1
 80007b2:	fa01 f202 	lsl.w	r2, r1, r2
 80007b6:	4611      	mov	r1, r2
 80007b8:	4a2c      	ldr	r2, [pc, #176]	@ (800086c <GPIO_IRQ_INT_Config+0x10c>)
 80007ba:	430b      	orrs	r3, r1
 80007bc:	6013      	str	r3, [r2, #0]
 80007be:	e04c      	b.n	800085a <GPIO_IRQ_INT_Config+0xfa>
		else if(IRQNumber >= 64 && IRQNumber < 92){
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80007c4:	d949      	bls.n	800085a <GPIO_IRQ_INT_Config+0xfa>
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b5b      	cmp	r3, #91	@ 0x5b
 80007ca:	d846      	bhi.n	800085a <GPIO_IRQ_INT_Config+0xfa>
			bit_pos = IRQNumber % 32;
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 031f 	and.w	r3, r3, #31
 80007d2:	73fb      	strb	r3, [r7, #15]
			*NVIC_ISER2 |= (1 << bit_pos);
 80007d4:	4b26      	ldr	r3, [pc, #152]	@ (8000870 <GPIO_IRQ_INT_Config+0x110>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	7bfa      	ldrb	r2, [r7, #15]
 80007da:	2101      	movs	r1, #1
 80007dc:	fa01 f202 	lsl.w	r2, r1, r2
 80007e0:	4611      	mov	r1, r2
 80007e2:	4a23      	ldr	r2, [pc, #140]	@ (8000870 <GPIO_IRQ_INT_Config+0x110>)
 80007e4:	430b      	orrs	r3, r1
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	e037      	b.n	800085a <GPIO_IRQ_INT_Config+0xfa>
		if(IRQNumber <= 31){
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b1f      	cmp	r3, #31
 80007ee:	d80a      	bhi.n	8000806 <GPIO_IRQ_INT_Config+0xa6>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80007f0:	4b20      	ldr	r3, [pc, #128]	@ (8000874 <GPIO_IRQ_INT_Config+0x114>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	2101      	movs	r1, #1
 80007f8:	fa01 f202 	lsl.w	r2, r1, r2
 80007fc:	4611      	mov	r1, r2
 80007fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000874 <GPIO_IRQ_INT_Config+0x114>)
 8000800:	430b      	orrs	r3, r1
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	e029      	b.n	800085a <GPIO_IRQ_INT_Config+0xfa>
		else if(IRQNumber > 31 && IRQNumber < 64){
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b1f      	cmp	r3, #31
 800080a:	d911      	bls.n	8000830 <GPIO_IRQ_INT_Config+0xd0>
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000810:	d80e      	bhi.n	8000830 <GPIO_IRQ_INT_Config+0xd0>
			bit_pos = IRQNumber % 32;
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	f003 031f 	and.w	r3, r3, #31
 8000818:	73fb      	strb	r3, [r7, #15]
			*NVIC_ICER1 |= (1 << bit_pos);
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <GPIO_IRQ_INT_Config+0x118>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	7bfa      	ldrb	r2, [r7, #15]
 8000820:	2101      	movs	r1, #1
 8000822:	fa01 f202 	lsl.w	r2, r1, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4a13      	ldr	r2, [pc, #76]	@ (8000878 <GPIO_IRQ_INT_Config+0x118>)
 800082a:	430b      	orrs	r3, r1
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	e014      	b.n	800085a <GPIO_IRQ_INT_Config+0xfa>
		else if(IRQNumber >= 64 && IRQNumber < 92){
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b3f      	cmp	r3, #63	@ 0x3f
 8000834:	d911      	bls.n	800085a <GPIO_IRQ_INT_Config+0xfa>
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b5b      	cmp	r3, #91	@ 0x5b
 800083a:	d80e      	bhi.n	800085a <GPIO_IRQ_INT_Config+0xfa>
			bit_pos = IRQNumber % 32;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 031f 	and.w	r3, r3, #31
 8000842:	73fb      	strb	r3, [r7, #15]
			*NVIC_ICER2 |= (1 << bit_pos);
 8000844:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <GPIO_IRQ_INT_Config+0x11c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	7bfa      	ldrb	r2, [r7, #15]
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	4611      	mov	r1, r2
 8000852:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <GPIO_IRQ_INT_Config+0x11c>)
 8000854:	430b      	orrs	r3, r1
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	e7ff      	b.n	800085a <GPIO_IRQ_INT_Config+0xfa>
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000e104 	.word	0xe000e104
 8000870:	e000e108 	.word	0xe000e108
 8000874:	e000e180 	.word	0xe000e180
 8000878:	e000e184 	.word	0xe000e184
 800087c:	e000e188 	.word	0xe000e188

08000880 <GPIO_IRQ_Priority_Config>:


void GPIO_IRQ_Priority_Config(uint8_t IRQNumber, uint32_t IRQPriority){
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
	/* To Configure the Priority of the Interrupt*/
	uint8_t bit_pos = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	73bb      	strb	r3, [r7, #14]
	uint8_t iprx_section = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	737b      	strb	r3, [r7, #13]

	//1. Find the IPRx register no
	iprx = IRQNumber % 4;
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	f003 0303 	and.w	r3, r3, #3
 800089e:	73bb      	strb	r3, [r7, #14]

	//2. Find the section and bit position
	iprx_section = IRQNumber % 4;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	f003 0303 	and.w	r3, r3, #3
 80008a6:	737b      	strb	r3, [r7, #13]
	bit_pos = (iprx_section * 8) + (8 - NO_PR_BITS_IMPLEMENTED);
 80008a8:	7b7b      	ldrb	r3, [r7, #13]
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	3304      	adds	r3, #4
 80008b0:	73fb      	strb	r3, [r7, #15]

	//3. Configure the Priority
	*(NVIC_IPRx_BASE + (iprx)) |= (IRQPriority << bit_pos);
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80008ba:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80008be:	6819      	ldr	r1, [r3, #0]
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	409a      	lsls	r2, r3
 80008c6:	7bbb      	ldrb	r3, [r7, #14]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80008ce:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80008d2:	430a      	orrs	r2, r1
 80008d4:	601a      	str	r2, [r3, #0]

}
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <GPIO_IRQHandling>:


void GPIO_IRQHandling(uint8_t PinNumber){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
	//User code starts here

	//User code ends here

	//Clear the EXTI PR register, corresponding to the pin number
	if(EXTI->EXTI_PR & (1 << PinNumber)){
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <GPIO_IRQHandling+0x3c>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	79fa      	ldrb	r2, [r7, #7]
 80008f4:	2101      	movs	r1, #1
 80008f6:	fa01 f202 	lsl.w	r2, r1, r2
 80008fa:	4013      	ands	r3, r2
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d009      	beq.n	8000914 <GPIO_IRQHandling+0x30>
		//Clear
		EXTI->EXTI_PR |= (1 << PinNumber);
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <GPIO_IRQHandling+0x3c>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	79fa      	ldrb	r2, [r7, #7]
 8000906:	2101      	movs	r1, #1
 8000908:	fa01 f202 	lsl.w	r2, r1, r2
 800090c:	4611      	mov	r1, r2
 800090e:	4a04      	ldr	r2, [pc, #16]	@ (8000920 <GPIO_IRQHandling+0x3c>)
 8000910:	430b      	orrs	r3, r1
 8000912:	6153      	str	r3, [r2, #20]
	}
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	40013c00 	.word	0x40013c00

08000924 <TIMx_ClockEnable>:

#define TIMx_UIE		 0


//Configuration APIs
void TIMx_ClockEnable(TIM_RegDef_t *TIMx){
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	if(TIMx == TIM2){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000932:	d106      	bne.n	8000942 <TIMx_ClockEnable+0x1e>
		//Enable TIM2 clock Access
		RCC->APB1ENR |= TIM2_EN;
 8000934:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <TIMx_ClockEnable+0x6c>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000938:	4a15      	ldr	r2, [pc, #84]	@ (8000990 <TIMx_ClockEnable+0x6c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6413      	str	r3, [r2, #64]	@ 0x40
		//Enable TIM5 clock Access
		RCC->APB1ENR |= TIM5_EN;
	} else{
		//No conditions matched!
	}
}
 8000940:	e01f      	b.n	8000982 <TIMx_ClockEnable+0x5e>
	} else if(TIMx == TIM3){
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a13      	ldr	r2, [pc, #76]	@ (8000994 <TIMx_ClockEnable+0x70>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d106      	bne.n	8000958 <TIMx_ClockEnable+0x34>
		RCC->APB1ENR |= TIM3_EN;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <TIMx_ClockEnable+0x6c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	4a10      	ldr	r2, [pc, #64]	@ (8000990 <TIMx_ClockEnable+0x6c>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000956:	e014      	b.n	8000982 <TIMx_ClockEnable+0x5e>
	} else if(TIMx == TIM4){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <TIMx_ClockEnable+0x74>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d106      	bne.n	800096e <TIMx_ClockEnable+0x4a>
		RCC->APB1ENR |= TIM4_EN;
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <TIMx_ClockEnable+0x6c>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <TIMx_ClockEnable+0x6c>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800096c:	e009      	b.n	8000982 <TIMx_ClockEnable+0x5e>
	} else if(TIMx == TIM5){
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <TIMx_ClockEnable+0x78>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d105      	bne.n	8000982 <TIMx_ClockEnable+0x5e>
		RCC->APB1ENR |= TIM5_EN;
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <TIMx_ClockEnable+0x6c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <TIMx_ClockEnable+0x6c>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40000400 	.word	0x40000400
 8000998:	40000800 	.word	0x40000800
 800099c:	40000c00 	.word	0x40000c00

080009a0 <TIMx_SetPrescaler>:
//	} else{
//		//No conditions matched!
//	}
//}

void TIMx_SetPrescaler(TIM_RegDef_t *TIMx, uint32_t prescaler){
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
	TIMx->PSC = prescaler;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <TIMx_SetPeriod>:

uint32_t TIMx_ComputePrescaler(TIM_RegDef_t *TIMx, uint32_t sys_freq, uint32_t tim_freq){
	return ((sys_freq/tim_freq) - 1);
}

void TIMx_SetPeriod(TIM_RegDef_t *TIMx, uint32_t period){
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
	//Set ARR Register
	TIMx->ARR = (period-1);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	1e5a      	subs	r2, r3, #1
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <TIMx_ConfigMode>:

void TIMx_ConfigMode(TIM_RegDef_t *TIMx, uint8_t Mode){
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	70fb      	strb	r3, [r7, #3]
	if(Mode == 0){
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d104      	bne.n	80009f6 <TIMx_ConfigMode+0x1c>
		TIMx->CR1 |= (TIM_MODE_DOWN_COUNTER << 4);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	601a      	str	r2, [r3, #0]
	} else {
		TIMx->CR1 |= (TIM_MODE_UP_COUNTER << 4);
	}
}
 80009f4:	e005      	b.n	8000a02 <TIMx_ConfigMode+0x28>
		TIMx->CR1 |= (TIM_MODE_UP_COUNTER << 4);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f043 0210 	orr.w	r2, r3, #16
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <TIMx_Start>:
	}
}


//General Application APIs
void TIMx_Start(TIM_RegDef_t *TIMx){
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
	TIMx->CNT = 0;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIMx->CR1 |= TIMx_CEN;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f043 0201 	orr.w	r2, r3, #1
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <TIMx_Stop>:

void TIMx_Stop(TIM_RegDef_t *TIMx){
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	TIMx->CNT = 0;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24
	TIMx->CR1 &= ~(TIMx_CEN);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f023 0201 	bic.w	r2, r3, #1
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	601a      	str	r2, [r3, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <TIMx_Delay_ms_Init>:

// One-time configuration for TIM2 to prepare for delays
void TIMx_Delay_ms_Init(TIM_RegDef_t *TIMx) {
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
    // Enable clock access
    TIMx_ClockEnable(TIMx);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ff5e 	bl	8000924 <TIMx_ClockEnable>

    // Set prescaler register
    TIMx_SetPrescaler(TIMx, 15);
 8000a68:	210f      	movs	r1, #15
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ff98 	bl	80009a0 <TIMx_SetPrescaler>

    //Set Auto reload register
    TIMx_SetPeriod(TIMx, 1000);
 8000a70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ffa1 	bl	80009bc <TIMx_SetPeriod>

    // Set Counter Mode (Up counter)
    TIMx_ConfigMode(TIMx, TIM_MODE_UP_COUNTER);
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ffac 	bl	80009da <TIMx_ConfigMode>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <TIMx_Delay_ms>:

// Blocking delay in milliseconds
void TIMx_Delay_ms(TIM_RegDef_t *TIMx, uint32_t delay_ms) {
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b084      	sub	sp, #16
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
	//Start timer
	TIMx_Start(TIMx);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ffba 	bl	8000a0e <TIMx_Start>
    for(volatile uint32_t i = 0; i < delay_ms; i++){
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	e00f      	b.n	8000ac0 <TIMx_Delay_ms+0x36>
    	//Check for update flag
    	while(!(TIMx->SR & TIMx_SR_UIF)){}
 8000aa0:	bf00      	nop
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	691b      	ldr	r3, [r3, #16]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0f9      	beq.n	8000aa2 <TIMx_Delay_ms+0x18>
    	//Clear flag
    	TIMx->SR &= ~TIMx_SR_UIF;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	f023 0201 	bic.w	r2, r3, #1
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	611a      	str	r2, [r3, #16]
    for(volatile uint32_t i = 0; i < delay_ms; i++){
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3301      	adds	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d8eb      	bhi.n	8000aa0 <TIMx_Delay_ms+0x16>
    }
    //Stop timer
    TIMx_Stop(TIMx);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ffb3 	bl	8000a34 <TIMx_Stop>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <SPI_PCLK_Control>:
#include <stdint.h>
#include "STM32F411xx.h"
#include "SPI_Driver.h"

/*SPI Clock Control API*/
void SPI_PCLK_Control(SPI_RegDef_t *pSPIx, uint8_t EN_DI){
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]
    if(EN_DI == CLK_EN){
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d136      	bne.n	8000b58 <SPI_PCLK_Control+0x80>
		if(pSPIx == SPI1){
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a3a      	ldr	r2, [pc, #232]	@ (8000bd8 <SPI_PCLK_Control+0x100>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d106      	bne.n	8000b00 <SPI_PCLK_Control+0x28>
			SPI1_PCLK_EN();
 8000af2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a39      	ldr	r2, [pc, #228]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000af8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
			SPI5_PCLK_DI();
		}
		else{
		}
	}
}
 8000afe:	e064      	b.n	8000bca <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI2){
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a37      	ldr	r2, [pc, #220]	@ (8000be0 <SPI_PCLK_Control+0x108>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d106      	bne.n	8000b16 <SPI_PCLK_Control+0x3e>
			SPI2_PCLK_EN();
 8000b08:	4b34      	ldr	r3, [pc, #208]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	4a33      	ldr	r2, [pc, #204]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b12:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b14:	e059      	b.n	8000bca <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI3){
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a32      	ldr	r2, [pc, #200]	@ (8000be4 <SPI_PCLK_Control+0x10c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d106      	bne.n	8000b2c <SPI_PCLK_Control+0x54>
			SPI3_PCLK_EN();
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	4a2e      	ldr	r2, [pc, #184]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b28:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b2a:	e04e      	b.n	8000bca <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI4){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a2e      	ldr	r2, [pc, #184]	@ (8000be8 <SPI_PCLK_Control+0x110>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d106      	bne.n	8000b42 <SPI_PCLK_Control+0x6a>
			SPI4_PCLK_EN();
 8000b34:	4b29      	ldr	r3, [pc, #164]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b38:	4a28      	ldr	r2, [pc, #160]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b3a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b3e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000b40:	e043      	b.n	8000bca <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI5){
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a29      	ldr	r2, [pc, #164]	@ (8000bec <SPI_PCLK_Control+0x114>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d13f      	bne.n	8000bca <SPI_PCLK_Control+0xf2>
			SPI5_PCLK_EN();
 8000b4a:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	4a23      	ldr	r2, [pc, #140]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b54:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000b56:	e038      	b.n	8000bca <SPI_PCLK_Control+0xf2>
	else if(EN_DI == CLK_DI){
 8000b58:	78fb      	ldrb	r3, [r7, #3]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d135      	bne.n	8000bca <SPI_PCLK_Control+0xf2>
		if(pSPIx == SPI1){
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd8 <SPI_PCLK_Control+0x100>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d106      	bne.n	8000b74 <SPI_PCLK_Control+0x9c>
			SPI1_PCLK_DI();
 8000b66:	4b1d      	ldr	r3, [pc, #116]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b70:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000b72:	e02a      	b.n	8000bca <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI2){
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a1a      	ldr	r2, [pc, #104]	@ (8000be0 <SPI_PCLK_Control+0x108>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d106      	bne.n	8000b8a <SPI_PCLK_Control+0xb2>
			SPI2_PCLK_DI();
 8000b7c:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a16      	ldr	r2, [pc, #88]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b88:	e01f      	b.n	8000bca <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI3){
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a15      	ldr	r2, [pc, #84]	@ (8000be4 <SPI_PCLK_Control+0x10c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d106      	bne.n	8000ba0 <SPI_PCLK_Control+0xc8>
			SPI3_PCLK_DI();
 8000b92:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a11      	ldr	r2, [pc, #68]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000b98:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b9e:	e014      	b.n	8000bca <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI4){
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a11      	ldr	r2, [pc, #68]	@ (8000be8 <SPI_PCLK_Control+0x110>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d106      	bne.n	8000bb6 <SPI_PCLK_Control+0xde>
			SPI4_PCLK_DI();
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bac:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000bae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000bb2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000bb4:	e009      	b.n	8000bca <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI5){
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bec <SPI_PCLK_Control+0x114>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d105      	bne.n	8000bca <SPI_PCLK_Control+0xf2>
			SPI5_PCLK_DI();
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	4a06      	ldr	r2, [pc, #24]	@ (8000bdc <SPI_PCLK_Control+0x104>)
 8000bc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000bc8:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40013000 	.word	0x40013000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40003800 	.word	0x40003800
 8000be4:	40003c00 	.word	0x40003c00
 8000be8:	40013400 	.word	0x40013400
 8000bec:	40015000 	.word	0x40015000

08000bf0 <SPI_Init>:

/*SPI Initialize & Deinitialize APIs*/
void SPI_Init(SPIx_Handle_t *pSPIHandle){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    //Configure the SPI CR1 Register
	uint32_t tempreg = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]

	//Initialize SPI Peripheral clock
	SPI_PCLK_Control(pSPIHandle->pSPIx, CLK_EN);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff68 	bl	8000ad8 <SPI_PCLK_Control>

	//Configure SPI Peripheral
	//1. Configure SPI Device Mode
	tempreg |= pSPIHandle->SPIx_Config.SPI_DEVICE_MODE << SPI_CR1_MSTR_BIT;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	791b      	ldrb	r3, [r3, #4]
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]

	//2. Configure the SPI Bus configuration
	if(pSPIHandle->SPIx_Config.SPI_BUS_CONFIG == SPI_BUS_CONFIG_FULL_DUPLEX){
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	795b      	ldrb	r3, [r3, #5]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d104      	bne.n	8000c26 <SPI_Init+0x36>
		//BIDI Mode should be cleared - 2-line Unidirectional data mode selected
		tempreg &= ~(1<<SPI_CR1_BIDI_MODE_BIT);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	e014      	b.n	8000c50 <SPI_Init+0x60>
	} 
	else if(pSPIHandle->SPIx_Config.SPI_BUS_CONFIG == SPI_BUS_CONFIG_HALF_DUPLEX){
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	795b      	ldrb	r3, [r3, #5]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d104      	bne.n	8000c38 <SPI_Init+0x48>
		//BIDI Mode should be Set - 1-line bidirectional mode selected
		tempreg |= (1<<SPI_CR1_BIDI_MODE_BIT);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	e00b      	b.n	8000c50 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIx_Config.SPI_BUS_CONFIG == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	795b      	ldrb	r3, [r3, #5]
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d107      	bne.n	8000c50 <SPI_Init+0x60>
		//BIDI Mode should be cleared - 2-line unidirectional mode selected
		tempreg &= ~(1<<SPI_CR1_BIDI_MODE_BIT);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000c46:	60fb      	str	r3, [r7, #12]
		//RXONLY Bit also needs to be Set 
		tempreg |= (1<<SPI_CR1_RX_ONLY_BIT);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c4e:	60fb      	str	r3, [r7, #12]
	else{
		//Error!
	}

	//3. Configure the SPI Clock Speed
	if(pSPIHandle->SPIx_Config.SPI_DEVICE_MODE == SPI_DEVICE_MODE_MASTER){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	791b      	ldrb	r3, [r3, #4]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d105      	bne.n	8000c64 <SPI_Init+0x74>
		//IF configured in master mode, then only set the baud rate
		tempreg |= (pSPIHandle->SPIx_Config.SPI_SCLK_SPEED << SPI_CR1_BR_BIT);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	799b      	ldrb	r3, [r3, #6]
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
	}

	//4. Configure the SPI Data frame format
	if(pSPIHandle->SPIx_Config.SPI_DFF == SPI_DFF_16BIT){
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	79db      	ldrb	r3, [r3, #7]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d104      	bne.n	8000c76 <SPI_Init+0x86>
		//Set DFF to 16bits
		tempreg |= (1 << SPI_CR1_DFF_BIT);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	e003      	b.n	8000c7e <SPI_Init+0x8e>
	}
	else{
		//Set DFF to 8 bits (default)
		tempreg &= ~(1 << SPI_CR1_DFF_BIT);	
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000c7c:	60fb      	str	r3, [r7, #12]
	}

	//5. Configure CPOL & CPHA
	if(pSPIHandle->SPIx_Config.SPI_CPOL == SPI_CPOL_HIGH){
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7a1b      	ldrb	r3, [r3, #8]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d104      	bne.n	8000c90 <SPI_Init+0xa0>
		//Set: CPOL idle state as HIGH
		tempreg |= (1 << SPI_CR1_CPOL_BIT);	//Set CPOL
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	e003      	b.n	8000c98 <SPI_Init+0xa8>
	}
	else{
		//Clear: CPOL idle state as LOW
		tempreg &= ~(1 << SPI_CR1_CPOL_BIT);	//Set CPOL
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f023 0302 	bic.w	r3, r3, #2
 8000c96:	60fb      	str	r3, [r7, #12]
	}
	
	if(pSPIHandle->SPIx_Config.SPI_CPHA == SPI_CPHA_HIGH){
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7a5b      	ldrb	r3, [r3, #9]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d104      	bne.n	8000caa <SPI_Init+0xba>
		//Set: CPHA idle state as HIGH
		tempreg |= (1 << SPI_CR1_CPHA_BIT);	//Set CPHA
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	e003      	b.n	8000cb2 <SPI_Init+0xc2>
	}
	else{
		//Clear: CPHA idle state as LOW
		tempreg &= ~(1 << SPI_CR1_CPHA_BIT);	//Set CPHA
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
	}

	//Configure SPI SSM
	if(pSPIHandle->SPIx_Config.SPI_SSM == SPI_SSM_ENABLED){
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7a9b      	ldrb	r3, [r3, #10]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d104      	bne.n	8000cc4 <SPI_Init+0xd4>
		//Set SSM bit == 1
		tempreg |= (1 << SPI_CR1_SSM_BIT);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	e003      	b.n	8000ccc <SPI_Init+0xdc>
		//Set SSI bit == 1 , so NSS pin is pulled high
	}
	else{
		tempreg &= ~(1 << SPI_CR1_SSM_BIT);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000cca:	60fb      	str	r3, [r7, #12]
	}

	//Initialize the SPI Peripheral with all configured settings
	pSPIHandle->pSPIx->SPI_CR1 |= tempreg;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6819      	ldr	r1, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <SPI_Enable>:
/*
 * SPI Enable API
 *
 * 
*/
void SPI_Enable(SPI_RegDef_t *pSPIx){
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	//Enable the SPE Bit in SPI_CR1 Register
	pSPIx->SPI_CR1 |= (1 << SPI_CR1_SPE_BIT);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	601a      	str	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <SPI_Disable_blocking>:
/*
 * SPI Disable API
 *
 * 
*/
void SPI_Disable_blocking(SPI_RegDef_t *pSPIx){
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	//Disable the SPE Bit in SPI_CR1 Register
	while( pSPIx->SPI_SR & (1 << SPI_SR_BSY_BIT) ){
 8000d0c:	bf00      	nop
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f9      	bne.n	8000d0e <SPI_Disable_blocking+0xa>
		 * If the flag is no longer raised, the condition will no longer be true, and will exit the while loop, and
		 * will procced to execute the SPI Peripheral Disable code.\
		 * BSY Flag raised basically means the SPI TX buffer is currently busy in transmission.
		 */
	}
	pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SPE_BIT);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	601a      	str	r2, [r3, #0]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <SPI_SSOE_Configure>:
/*
 * SPI SSOE Configure API
 *
 * 
*/
void SPI_SSOE_Configure(SPI_RegDef_t *pSPIx, uint8_t EN_DI){
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	70fb      	strb	r3, [r7, #3]
	//
	if(EN_DI == ENABLE){
 8000d3e:	78fb      	ldrb	r3, [r7, #3]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d106      	bne.n	8000d52 <SPI_SSOE_Configure+0x20>
		pSPIx->SPI_CR2 |= (1 << SPI_CR2_SSOE_BIT);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f043 0204 	orr.w	r2, r3, #4
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	605a      	str	r2, [r3, #4]
	}
	else{
		pSPIx->SPI_CR2 &= ~(1 << SPI_CR2_SSOE_BIT);
	}
}
 8000d50:	e005      	b.n	8000d5e <SPI_SSOE_Configure+0x2c>
		pSPIx->SPI_CR2 &= ~(1 << SPI_CR2_SSOE_BIT);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f023 0204 	bic.w	r2, r3, #4
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	605a      	str	r2, [r3, #4]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <SPI_FullDuplex_Master>:


//test function

void SPI_FullDuplex_Master(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, volatile uint8_t *pRxBuffer, uint32_t length){
 8000d6a:	b480      	push	{r7}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	603b      	str	r3, [r7, #0]
    while (length > 0) {
 8000d78:	e020      	b.n	8000dbc <SPI_FullDuplex_Master+0x52>
        // Wait for TXE flag (Transmit Buffer Empty)
        while (!(pSPIx->SPI_SR & (1 << SPI_SR_TXE_BIT)));
 8000d7a:	bf00      	nop
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f9      	beq.n	8000d7c <SPI_FullDuplex_Master+0x12>

        // Write data to SPI_DR (Transmit Data Register)
        pSPIx->SPI_DR = *pTxBuffer;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	60da      	str	r2, [r3, #12]

		// Wait for RXNE flag (Receive Buffer Not Empty)
        while( !(pSPIx->SPI_SR & (1 << SPI_SR_RXNE_BIT)));
 8000d92:	bf00      	nop
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0f9      	beq.n	8000d94 <SPI_FullDuplex_Master+0x2a>

        // Read data from SPI_DR (Receive Data Register)
        *pRxBuffer = pSPIx->SPI_DR;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	701a      	strb	r2, [r3, #0]

        // Increment buffer pointers and decrement length
        pTxBuffer++;
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	3301      	adds	r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
        pRxBuffer++;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3301      	adds	r3, #1
 8000db4:	607b      	str	r3, [r7, #4]
        length--;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	603b      	str	r3, [r7, #0]
    while (length > 0) {
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1db      	bne.n	8000d7a <SPI_FullDuplex_Master+0x10>
    }

    // Wait for SPI busy flag (BSY) to clear (ensure last transfer is complete)
    while (pSPIx->SPI_SR & (1 << SPI_SR_BSY_BIT));
 8000dc2:	bf00      	nop
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1f9      	bne.n	8000dc4 <SPI_FullDuplex_Master+0x5a>
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <main>:
	int c;
}data_t;


int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
	//initialise_monitor_handles();

	/*------------------------------------------*/
	//Create a buffer
	//char user_data[BUFFER_SIZE] = "Hello World";		//master mode
	data_t data_list = {15,30,60};
 8000de6:	4a25      	ldr	r2, [pc, #148]	@ (8000e7c <main+0x9c>)
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* Creating an 12 bit RX buffer */
	//char rx_buffer[BUFFER_SIZE] = {0};  // Initialize with zeros
	data_t data_rx_list = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]

	printf("SWV printf Debugging Initialized\n");
 8000dfc:	4820      	ldr	r0, [pc, #128]	@ (8000e80 <main+0xa0>)
 8000dfe:	f000 faef 	bl	80013e0 <puts>

	//Configure & Initialize SPI2 Peripheral
	SPI2_GPIOInit();
 8000e02:	f000 f847 	bl	8000e94 <SPI2_GPIOInit>

	SPI2_Init_Master();		//for master mode
 8000e06:	f000 f873 	bl	8000ef0 <SPI2_Init_Master>

	TIMx_Delay_ms_Init(TIM2);
 8000e0a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000e0e:	f7ff fe24 	bl	8000a5a <TIMx_Delay_ms_Init>

	BUTTON_GPIO_INIT(); //Commented when device is in slave mode
 8000e12:	f000 f891 	bl	8000f38 <BUTTON_GPIO_INIT>
	
	/* Loop forever */
	/*Master flag loop code*/
	for(;;){
		while(transmit_flag == 1){
 8000e16:	e025      	b.n	8000e64 <main+0x84>
			transmit_flag = 0;
 8000e18:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <main+0xa4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
			//memset(&rx_buffer, 0, BUFFER_SIZE);
			//SPI_TX_TEST(user_data);
			SPI_SSOE_Configure(SPI2, ENABLE);
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4819      	ldr	r0, [pc, #100]	@ (8000e88 <main+0xa8>)
 8000e22:	f7ff ff86 	bl	8000d32 <SPI_SSOE_Configure>
			SPI_Enable(SPI2);
 8000e26:	4818      	ldr	r0, [pc, #96]	@ (8000e88 <main+0xa8>)
 8000e28:	f7ff ff5c 	bl	8000ce4 <SPI_Enable>

			SPI_FullDuplex_Master(SPI2, (uint8_t *)&data_list, (uint8_t *)&data_rx_list, sizeof(data_t));
 8000e2c:	463a      	mov	r2, r7
 8000e2e:	f107 010c 	add.w	r1, r7, #12
 8000e32:	230c      	movs	r3, #12
 8000e34:	4814      	ldr	r0, [pc, #80]	@ (8000e88 <main+0xa8>)
 8000e36:	f7ff ff98 	bl	8000d6a <SPI_FullDuplex_Master>

			printf("USER Data sent! Through SPI Interface!!\n");
 8000e3a:	4814      	ldr	r0, [pc, #80]	@ (8000e8c <main+0xac>)
 8000e3c:	f000 fad0 	bl	80013e0 <puts>
			printf("Data received: %d\n", data_rx_list.a);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	4619      	mov	r1, r3
 8000e44:	4812      	ldr	r0, [pc, #72]	@ (8000e90 <main+0xb0>)
 8000e46:	f000 fa63 	bl	8001310 <iprintf>
			printf("Data received: %d\n", data_rx_list.b);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4810      	ldr	r0, [pc, #64]	@ (8000e90 <main+0xb0>)
 8000e50:	f000 fa5e 	bl	8001310 <iprintf>
			printf("Data received: %d\n", data_rx_list.c);
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4619      	mov	r1, r3
 8000e58:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <main+0xb0>)
 8000e5a:	f000 fa59 	bl	8001310 <iprintf>

			SPI_Disable_blocking(SPI2);
 8000e5e:	480a      	ldr	r0, [pc, #40]	@ (8000e88 <main+0xa8>)
 8000e60:	f7ff ff50 	bl	8000d04 <SPI_Disable_blocking>
		while(transmit_flag == 1){
 8000e64:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <main+0xa4>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d0d4      	beq.n	8000e18 <main+0x38>
		}
		TIMx_Delay_ms(TIM2, 100);	//100ms
 8000e6e:	2164      	movs	r1, #100	@ 0x64
 8000e70:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000e74:	f7ff fe09 	bl	8000a8a <TIMx_Delay_ms>
		while(transmit_flag == 1){
 8000e78:	e7f4      	b.n	8000e64 <main+0x84>
 8000e7a:	bf00      	nop
 8000e7c:	08002120 	.word	0x08002120
 8000e80:	080020c0 	.word	0x080020c0
 8000e84:	20000078 	.word	0x20000078
 8000e88:	40003800 	.word	0x40003800
 8000e8c:	080020e4 	.word	0x080020e4
 8000e90:	0800210c 	.word	0x0800210c

08000e94 <SPI2_GPIOInit>:
	}
}



void SPI2_GPIOInit(void){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
	//Create a GPIO Handle and perform configure
	GPIOx_Handle_t SPIPins;

	SPIPins.pGPIOx_Base = GPIOB;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <SPI2_GPIOInit+0x58>)
 8000e9c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIOx_PinMode = GPIO_MODE_ALTERNATE;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIOx_PinAltFunMode = GPIO_AFR_AF5;
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIOx_PinOPType = GPIO_OUTPUT_PUSH_PULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIOx_PinSpeed = GPIO_SPEED_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIOx_PinPUPDControl = GPIO_PUPD_PULL_UP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	733b      	strb	r3, [r7, #12]

	//Initialize MOSI Pin
	SPIPins.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_15;
 8000eb2:	230f      	movs	r3, #15
 8000eb4:	723b      	strb	r3, [r7, #8]
	GPIOx_Init(&SPIPins);
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff faa9 	bl	8000410 <GPIOx_Init>

	//Initialize MISO Pin
	SPIPins.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_14;
 8000ebe:	230e      	movs	r3, #14
 8000ec0:	723b      	strb	r3, [r7, #8]
	GPIOx_Init(&SPIPins);
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff faa3 	bl	8000410 <GPIOx_Init>

	//Initialize SCK
	SPIPins.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_13;
 8000eca:	230d      	movs	r3, #13
 8000ecc:	723b      	strb	r3, [r7, #8]
	GPIOx_Init(&SPIPins);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fa9d 	bl	8000410 <GPIOx_Init>

	//Initialize NSS
	SPIPins.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_12;
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	723b      	strb	r3, [r7, #8]

	//SPI Pins configured!
	GPIOx_Init(&SPIPins);
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fa97 	bl	8000410 <GPIOx_Init>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40020400 	.word	0x40020400

08000ef0 <SPI2_Init_Master>:

	//Initialize SPI2 Peripheral
	SPI_Init(&SPI2_Handle);
}

void SPI2_Init_Master(void){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
	//Configure and Initialize SPI2 peripheral
	SPIx_Handle_t SPI2_Handle;
	memset(&SPI2_Handle, 0, sizeof(SPIx_Handle_t));	//clear the handle before performing the operations on it.
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	220c      	movs	r2, #12
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 fb4f 	bl	80015a0 <memset>

	SPI2_Handle.pSPIx = SPI2;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <SPI2_Init_Master+0x44>)
 8000f04:	607b      	str	r3, [r7, #4]
	SPI2_Handle.SPIx_Config.SPI_DEVICE_MODE = SPI_DEVICE_MODE_MASTER;
 8000f06:	2301      	movs	r3, #1
 8000f08:	723b      	strb	r3, [r7, #8]
	SPI2_Handle.SPIx_Config.SPI_BUS_CONFIG = SPI_BUS_CONFIG_FULL_DUPLEX;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	727b      	strb	r3, [r7, #9]
	SPI2_Handle.SPIx_Config.SPI_SCLK_SPEED = SPI_BAUDRATE_DIV8;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	72bb      	strb	r3, [r7, #10]
	SPI2_Handle.SPIx_Config.SPI_DFF = SPI_DFF_8BIT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	72fb      	strb	r3, [r7, #11]

	//Configure to Mode 0
	SPI2_Handle.SPIx_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	733b      	strb	r3, [r7, #12]
	SPI2_Handle.SPIx_Config.SPI_CPHA = SPI_CPHA_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	737b      	strb	r3, [r7, #13]

	//Enable Software Slave management for NSS
	// SPI2_Handle.SPIx_Config.SPI_SSM = SPI_SSM_ENABLED;
	SPI2_Handle.SPIx_Config.SPI_SSM = SPI_SSM_DISABLED;		//Hardware Slave management enabled
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73bb      	strb	r3, [r7, #14]
	
	//Initialize SPI2 Peripheral
	SPI_Init(&SPI2_Handle);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fe63 	bl	8000bf0 <SPI_Init>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40003800 	.word	0x40003800

08000f38 <BUTTON_GPIO_INIT>:
	printf("RX Buffer is: %s\n", data);
	memset(&data, 0, sizeof(BUFFER_SIZE));
}


void BUTTON_GPIO_INIT(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
	//Create handle
	GPIOx_Handle_t GPIOHandle;
	memset(&GPIOHandle, 0, sizeof(GPIOHandle));	//Clear
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	220c      	movs	r2, #12
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fb2b 	bl	80015a0 <memset>
	GPIOHandle.pGPIOx_Base = GPIOA;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <BUTTON_GPIO_INIT+0x4c>)
 8000f4c:	607b      	str	r3, [r7, #4]
	GPIOHandle.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	723b      	strb	r3, [r7, #8]
	GPIOHandle.GPIO_PinConfig.GPIOx_PinMode = GPIO_MODE_INT_FALLING; //GPIO_MODE_INPUT;
 8000f52:	2304      	movs	r3, #4
 8000f54:	727b      	strb	r3, [r7, #9]
	GPIOHandle.GPIO_PinConfig.GPIOx_PinPUPDControl = GPIO_PUPD_PULL_UP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	733b      	strb	r3, [r7, #12]
	//Initialize
	GPIOx_Init(&GPIOHandle);
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fa57 	bl	8000410 <GPIOx_Init>
	GPIO_SetPullUpDown(GPIOA, GPIO_PIN_0, GPIO_PUPD_PULL_UP);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2100      	movs	r1, #0
 8000f66:	4807      	ldr	r0, [pc, #28]	@ (8000f84 <BUTTON_GPIO_INIT+0x4c>)
 8000f68:	f7ff fa2e 	bl	80003c8 <GPIO_SetPullUpDown>

	//IRQ Configurations
	GPIO_IRQ_INT_Config(IRQ_NO_EXTI0, ENABLE);
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	2006      	movs	r0, #6
 8000f70:	f7ff fbf6 	bl	8000760 <GPIO_IRQ_INT_Config>
	GPIO_IRQ_Priority_Config(IRQ_NO_EXTI0, NVIC_IRQ_PRI_15);	//Priority no - 15
 8000f74:	210f      	movs	r1, #15
 8000f76:	2006      	movs	r0, #6
 8000f78:	f7ff fc82 	bl	8000880 <GPIO_IRQ_Priority_Config>
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40020000 	.word	0x40020000

08000f88 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	//Handle debouncing
	//for(int i=0; i < 50000; i++);

	//Clear the Interrupt
	GPIO_IRQHandling(GPIO_PIN_0);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fca9 	bl	80008e4 <GPIO_IRQHandling>

	//Raise Flag
	transmit_flag = 1;
 8000f92:	4b02      	ldr	r3, [pc, #8]	@ (8000f9c <EXTI0_IRQHandler+0x14>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000078 	.word	0x20000078

08000fa0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <ITM_SendChar+0x48>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe8 <ITM_SendChar+0x48>)
 8000fb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fb4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <ITM_SendChar+0x4c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a0c      	ldr	r2, [pc, #48]	@ (8000fec <ITM_SendChar+0x4c>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000fc2:	bf00      	nop
 8000fc4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f8      	beq.n	8000fc4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000fd2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	6013      	str	r3, [r2, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000edfc 	.word	0xe000edfc
 8000fec:	e0000e00 	.word	0xe0000e00

08000ff0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e00a      	b.n	8001018 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001002:	f3af 8000 	nop.w
 8001006:	4601      	mov	r1, r0
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf0      	blt.n	8001002 <_read+0x12>
  }

  return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e009      	b.n	8001050 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	60ba      	str	r2, [r7, #8]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ffab 	bl	8000fa0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	dbf1      	blt.n	800103c <_write+0x12>
  }
  return len;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_close>:

int _close(int file)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800108a:	605a      	str	r2, [r3, #4]
  return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_isatty>:

int _isatty(int file)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	@ (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f000 fa9e 	bl	800163c <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20020000 	.word	0x20020000
 800112c:	00000400 	.word	0x00000400
 8001130:	2000007c 	.word	0x2000007c
 8001134:	200001d0 	.word	0x200001d0

08001138 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001138:	480d      	ldr	r0, [pc, #52]	@ (8001170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800113a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800113c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <LoopForever+0x6>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	@ (8001178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <LoopForever+0xe>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	@ (8001184 <LoopForever+0x16>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001166:	f000 fa6f 	bl	8001648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800116a:	f7ff fe39 	bl	8000de0 <main>

0800116e <LoopForever>:

LoopForever:
  b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   r0, =_estack
 8001170:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800117c:	08002184 	.word	0x08002184
  ldr r2, =_sbss
 8001180:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001184:	200001cc 	.word	0x200001cc

08001188 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC_IRQHandler>
	...

0800118c <std>:
 800118c:	2300      	movs	r3, #0
 800118e:	b510      	push	{r4, lr}
 8001190:	4604      	mov	r4, r0
 8001192:	e9c0 3300 	strd	r3, r3, [r0]
 8001196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800119a:	6083      	str	r3, [r0, #8]
 800119c:	8181      	strh	r1, [r0, #12]
 800119e:	6643      	str	r3, [r0, #100]	@ 0x64
 80011a0:	81c2      	strh	r2, [r0, #14]
 80011a2:	6183      	str	r3, [r0, #24]
 80011a4:	4619      	mov	r1, r3
 80011a6:	2208      	movs	r2, #8
 80011a8:	305c      	adds	r0, #92	@ 0x5c
 80011aa:	f000 f9f9 	bl	80015a0 <memset>
 80011ae:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <std+0x58>)
 80011b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <std+0x5c>)
 80011b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <std+0x60>)
 80011b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80011ba:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <std+0x64>)
 80011bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80011be:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <std+0x68>)
 80011c0:	6224      	str	r4, [r4, #32]
 80011c2:	429c      	cmp	r4, r3
 80011c4:	d006      	beq.n	80011d4 <std+0x48>
 80011c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80011ca:	4294      	cmp	r4, r2
 80011cc:	d002      	beq.n	80011d4 <std+0x48>
 80011ce:	33d0      	adds	r3, #208	@ 0xd0
 80011d0:	429c      	cmp	r4, r3
 80011d2:	d105      	bne.n	80011e0 <std+0x54>
 80011d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80011d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011dc:	f000 ba58 	b.w	8001690 <__retarget_lock_init_recursive>
 80011e0:	bd10      	pop	{r4, pc}
 80011e2:	bf00      	nop
 80011e4:	080013f1 	.word	0x080013f1
 80011e8:	08001413 	.word	0x08001413
 80011ec:	0800144b 	.word	0x0800144b
 80011f0:	0800146f 	.word	0x0800146f
 80011f4:	20000080 	.word	0x20000080

080011f8 <stdio_exit_handler>:
 80011f8:	4a02      	ldr	r2, [pc, #8]	@ (8001204 <stdio_exit_handler+0xc>)
 80011fa:	4903      	ldr	r1, [pc, #12]	@ (8001208 <stdio_exit_handler+0x10>)
 80011fc:	4803      	ldr	r0, [pc, #12]	@ (800120c <stdio_exit_handler+0x14>)
 80011fe:	f000 b869 	b.w	80012d4 <_fwalk_sglue>
 8001202:	bf00      	nop
 8001204:	20000000 	.word	0x20000000
 8001208:	08001f31 	.word	0x08001f31
 800120c:	20000010 	.word	0x20000010

08001210 <cleanup_stdio>:
 8001210:	6841      	ldr	r1, [r0, #4]
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <cleanup_stdio+0x34>)
 8001214:	4299      	cmp	r1, r3
 8001216:	b510      	push	{r4, lr}
 8001218:	4604      	mov	r4, r0
 800121a:	d001      	beq.n	8001220 <cleanup_stdio+0x10>
 800121c:	f000 fe88 	bl	8001f30 <_fflush_r>
 8001220:	68a1      	ldr	r1, [r4, #8]
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <cleanup_stdio+0x38>)
 8001224:	4299      	cmp	r1, r3
 8001226:	d002      	beq.n	800122e <cleanup_stdio+0x1e>
 8001228:	4620      	mov	r0, r4
 800122a:	f000 fe81 	bl	8001f30 <_fflush_r>
 800122e:	68e1      	ldr	r1, [r4, #12]
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <cleanup_stdio+0x3c>)
 8001232:	4299      	cmp	r1, r3
 8001234:	d004      	beq.n	8001240 <cleanup_stdio+0x30>
 8001236:	4620      	mov	r0, r4
 8001238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800123c:	f000 be78 	b.w	8001f30 <_fflush_r>
 8001240:	bd10      	pop	{r4, pc}
 8001242:	bf00      	nop
 8001244:	20000080 	.word	0x20000080
 8001248:	200000e8 	.word	0x200000e8
 800124c:	20000150 	.word	0x20000150

08001250 <global_stdio_init.part.0>:
 8001250:	b510      	push	{r4, lr}
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <global_stdio_init.part.0+0x30>)
 8001254:	4c0b      	ldr	r4, [pc, #44]	@ (8001284 <global_stdio_init.part.0+0x34>)
 8001256:	4a0c      	ldr	r2, [pc, #48]	@ (8001288 <global_stdio_init.part.0+0x38>)
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	4620      	mov	r0, r4
 800125c:	2200      	movs	r2, #0
 800125e:	2104      	movs	r1, #4
 8001260:	f7ff ff94 	bl	800118c <std>
 8001264:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001268:	2201      	movs	r2, #1
 800126a:	2109      	movs	r1, #9
 800126c:	f7ff ff8e 	bl	800118c <std>
 8001270:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001274:	2202      	movs	r2, #2
 8001276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800127a:	2112      	movs	r1, #18
 800127c:	f7ff bf86 	b.w	800118c <std>
 8001280:	200001b8 	.word	0x200001b8
 8001284:	20000080 	.word	0x20000080
 8001288:	080011f9 	.word	0x080011f9

0800128c <__sfp_lock_acquire>:
 800128c:	4801      	ldr	r0, [pc, #4]	@ (8001294 <__sfp_lock_acquire+0x8>)
 800128e:	f000 ba00 	b.w	8001692 <__retarget_lock_acquire_recursive>
 8001292:	bf00      	nop
 8001294:	200001c1 	.word	0x200001c1

08001298 <__sfp_lock_release>:
 8001298:	4801      	ldr	r0, [pc, #4]	@ (80012a0 <__sfp_lock_release+0x8>)
 800129a:	f000 b9fb 	b.w	8001694 <__retarget_lock_release_recursive>
 800129e:	bf00      	nop
 80012a0:	200001c1 	.word	0x200001c1

080012a4 <__sinit>:
 80012a4:	b510      	push	{r4, lr}
 80012a6:	4604      	mov	r4, r0
 80012a8:	f7ff fff0 	bl	800128c <__sfp_lock_acquire>
 80012ac:	6a23      	ldr	r3, [r4, #32]
 80012ae:	b11b      	cbz	r3, 80012b8 <__sinit+0x14>
 80012b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012b4:	f7ff bff0 	b.w	8001298 <__sfp_lock_release>
 80012b8:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <__sinit+0x28>)
 80012ba:	6223      	str	r3, [r4, #32]
 80012bc:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <__sinit+0x2c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f5      	bne.n	80012b0 <__sinit+0xc>
 80012c4:	f7ff ffc4 	bl	8001250 <global_stdio_init.part.0>
 80012c8:	e7f2      	b.n	80012b0 <__sinit+0xc>
 80012ca:	bf00      	nop
 80012cc:	08001211 	.word	0x08001211
 80012d0:	200001b8 	.word	0x200001b8

080012d4 <_fwalk_sglue>:
 80012d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012d8:	4607      	mov	r7, r0
 80012da:	4688      	mov	r8, r1
 80012dc:	4614      	mov	r4, r2
 80012de:	2600      	movs	r6, #0
 80012e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80012e4:	f1b9 0901 	subs.w	r9, r9, #1
 80012e8:	d505      	bpl.n	80012f6 <_fwalk_sglue+0x22>
 80012ea:	6824      	ldr	r4, [r4, #0]
 80012ec:	2c00      	cmp	r4, #0
 80012ee:	d1f7      	bne.n	80012e0 <_fwalk_sglue+0xc>
 80012f0:	4630      	mov	r0, r6
 80012f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012f6:	89ab      	ldrh	r3, [r5, #12]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d907      	bls.n	800130c <_fwalk_sglue+0x38>
 80012fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001300:	3301      	adds	r3, #1
 8001302:	d003      	beq.n	800130c <_fwalk_sglue+0x38>
 8001304:	4629      	mov	r1, r5
 8001306:	4638      	mov	r0, r7
 8001308:	47c0      	blx	r8
 800130a:	4306      	orrs	r6, r0
 800130c:	3568      	adds	r5, #104	@ 0x68
 800130e:	e7e9      	b.n	80012e4 <_fwalk_sglue+0x10>

08001310 <iprintf>:
 8001310:	b40f      	push	{r0, r1, r2, r3}
 8001312:	b507      	push	{r0, r1, r2, lr}
 8001314:	4906      	ldr	r1, [pc, #24]	@ (8001330 <iprintf+0x20>)
 8001316:	ab04      	add	r3, sp, #16
 8001318:	6808      	ldr	r0, [r1, #0]
 800131a:	f853 2b04 	ldr.w	r2, [r3], #4
 800131e:	6881      	ldr	r1, [r0, #8]
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	f000 fadb 	bl	80018dc <_vfiprintf_r>
 8001326:	b003      	add	sp, #12
 8001328:	f85d eb04 	ldr.w	lr, [sp], #4
 800132c:	b004      	add	sp, #16
 800132e:	4770      	bx	lr
 8001330:	2000000c 	.word	0x2000000c

08001334 <_puts_r>:
 8001334:	6a03      	ldr	r3, [r0, #32]
 8001336:	b570      	push	{r4, r5, r6, lr}
 8001338:	6884      	ldr	r4, [r0, #8]
 800133a:	4605      	mov	r5, r0
 800133c:	460e      	mov	r6, r1
 800133e:	b90b      	cbnz	r3, 8001344 <_puts_r+0x10>
 8001340:	f7ff ffb0 	bl	80012a4 <__sinit>
 8001344:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001346:	07db      	lsls	r3, r3, #31
 8001348:	d405      	bmi.n	8001356 <_puts_r+0x22>
 800134a:	89a3      	ldrh	r3, [r4, #12]
 800134c:	0598      	lsls	r0, r3, #22
 800134e:	d402      	bmi.n	8001356 <_puts_r+0x22>
 8001350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001352:	f000 f99e 	bl	8001692 <__retarget_lock_acquire_recursive>
 8001356:	89a3      	ldrh	r3, [r4, #12]
 8001358:	0719      	lsls	r1, r3, #28
 800135a:	d502      	bpl.n	8001362 <_puts_r+0x2e>
 800135c:	6923      	ldr	r3, [r4, #16]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d135      	bne.n	80013ce <_puts_r+0x9a>
 8001362:	4621      	mov	r1, r4
 8001364:	4628      	mov	r0, r5
 8001366:	f000 f8c5 	bl	80014f4 <__swsetup_r>
 800136a:	b380      	cbz	r0, 80013ce <_puts_r+0x9a>
 800136c:	f04f 35ff 	mov.w	r5, #4294967295
 8001370:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001372:	07da      	lsls	r2, r3, #31
 8001374:	d405      	bmi.n	8001382 <_puts_r+0x4e>
 8001376:	89a3      	ldrh	r3, [r4, #12]
 8001378:	059b      	lsls	r3, r3, #22
 800137a:	d402      	bmi.n	8001382 <_puts_r+0x4e>
 800137c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800137e:	f000 f989 	bl	8001694 <__retarget_lock_release_recursive>
 8001382:	4628      	mov	r0, r5
 8001384:	bd70      	pop	{r4, r5, r6, pc}
 8001386:	2b00      	cmp	r3, #0
 8001388:	da04      	bge.n	8001394 <_puts_r+0x60>
 800138a:	69a2      	ldr	r2, [r4, #24]
 800138c:	429a      	cmp	r2, r3
 800138e:	dc17      	bgt.n	80013c0 <_puts_r+0x8c>
 8001390:	290a      	cmp	r1, #10
 8001392:	d015      	beq.n	80013c0 <_puts_r+0x8c>
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	6022      	str	r2, [r4, #0]
 800139a:	7019      	strb	r1, [r3, #0]
 800139c:	68a3      	ldr	r3, [r4, #8]
 800139e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80013a2:	3b01      	subs	r3, #1
 80013a4:	60a3      	str	r3, [r4, #8]
 80013a6:	2900      	cmp	r1, #0
 80013a8:	d1ed      	bne.n	8001386 <_puts_r+0x52>
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	da11      	bge.n	80013d2 <_puts_r+0x9e>
 80013ae:	4622      	mov	r2, r4
 80013b0:	210a      	movs	r1, #10
 80013b2:	4628      	mov	r0, r5
 80013b4:	f000 f85f 	bl	8001476 <__swbuf_r>
 80013b8:	3001      	adds	r0, #1
 80013ba:	d0d7      	beq.n	800136c <_puts_r+0x38>
 80013bc:	250a      	movs	r5, #10
 80013be:	e7d7      	b.n	8001370 <_puts_r+0x3c>
 80013c0:	4622      	mov	r2, r4
 80013c2:	4628      	mov	r0, r5
 80013c4:	f000 f857 	bl	8001476 <__swbuf_r>
 80013c8:	3001      	adds	r0, #1
 80013ca:	d1e7      	bne.n	800139c <_puts_r+0x68>
 80013cc:	e7ce      	b.n	800136c <_puts_r+0x38>
 80013ce:	3e01      	subs	r6, #1
 80013d0:	e7e4      	b.n	800139c <_puts_r+0x68>
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	6022      	str	r2, [r4, #0]
 80013d8:	220a      	movs	r2, #10
 80013da:	701a      	strb	r2, [r3, #0]
 80013dc:	e7ee      	b.n	80013bc <_puts_r+0x88>
	...

080013e0 <puts>:
 80013e0:	4b02      	ldr	r3, [pc, #8]	@ (80013ec <puts+0xc>)
 80013e2:	4601      	mov	r1, r0
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	f7ff bfa5 	b.w	8001334 <_puts_r>
 80013ea:	bf00      	nop
 80013ec:	2000000c 	.word	0x2000000c

080013f0 <__sread>:
 80013f0:	b510      	push	{r4, lr}
 80013f2:	460c      	mov	r4, r1
 80013f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013f8:	f000 f8fc 	bl	80015f4 <_read_r>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	bfab      	itete	ge
 8001400:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001402:	89a3      	ldrhlt	r3, [r4, #12]
 8001404:	181b      	addge	r3, r3, r0
 8001406:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800140a:	bfac      	ite	ge
 800140c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800140e:	81a3      	strhlt	r3, [r4, #12]
 8001410:	bd10      	pop	{r4, pc}

08001412 <__swrite>:
 8001412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001416:	461f      	mov	r7, r3
 8001418:	898b      	ldrh	r3, [r1, #12]
 800141a:	05db      	lsls	r3, r3, #23
 800141c:	4605      	mov	r5, r0
 800141e:	460c      	mov	r4, r1
 8001420:	4616      	mov	r6, r2
 8001422:	d505      	bpl.n	8001430 <__swrite+0x1e>
 8001424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001428:	2302      	movs	r3, #2
 800142a:	2200      	movs	r2, #0
 800142c:	f000 f8d0 	bl	80015d0 <_lseek_r>
 8001430:	89a3      	ldrh	r3, [r4, #12]
 8001432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001436:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800143a:	81a3      	strh	r3, [r4, #12]
 800143c:	4632      	mov	r2, r6
 800143e:	463b      	mov	r3, r7
 8001440:	4628      	mov	r0, r5
 8001442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001446:	f000 b8e7 	b.w	8001618 <_write_r>

0800144a <__sseek>:
 800144a:	b510      	push	{r4, lr}
 800144c:	460c      	mov	r4, r1
 800144e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001452:	f000 f8bd 	bl	80015d0 <_lseek_r>
 8001456:	1c43      	adds	r3, r0, #1
 8001458:	89a3      	ldrh	r3, [r4, #12]
 800145a:	bf15      	itete	ne
 800145c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800145e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001462:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001466:	81a3      	strheq	r3, [r4, #12]
 8001468:	bf18      	it	ne
 800146a:	81a3      	strhne	r3, [r4, #12]
 800146c:	bd10      	pop	{r4, pc}

0800146e <__sclose>:
 800146e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001472:	f000 b89d 	b.w	80015b0 <_close_r>

08001476 <__swbuf_r>:
 8001476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001478:	460e      	mov	r6, r1
 800147a:	4614      	mov	r4, r2
 800147c:	4605      	mov	r5, r0
 800147e:	b118      	cbz	r0, 8001488 <__swbuf_r+0x12>
 8001480:	6a03      	ldr	r3, [r0, #32]
 8001482:	b90b      	cbnz	r3, 8001488 <__swbuf_r+0x12>
 8001484:	f7ff ff0e 	bl	80012a4 <__sinit>
 8001488:	69a3      	ldr	r3, [r4, #24]
 800148a:	60a3      	str	r3, [r4, #8]
 800148c:	89a3      	ldrh	r3, [r4, #12]
 800148e:	071a      	lsls	r2, r3, #28
 8001490:	d501      	bpl.n	8001496 <__swbuf_r+0x20>
 8001492:	6923      	ldr	r3, [r4, #16]
 8001494:	b943      	cbnz	r3, 80014a8 <__swbuf_r+0x32>
 8001496:	4621      	mov	r1, r4
 8001498:	4628      	mov	r0, r5
 800149a:	f000 f82b 	bl	80014f4 <__swsetup_r>
 800149e:	b118      	cbz	r0, 80014a8 <__swbuf_r+0x32>
 80014a0:	f04f 37ff 	mov.w	r7, #4294967295
 80014a4:	4638      	mov	r0, r7
 80014a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	6922      	ldr	r2, [r4, #16]
 80014ac:	1a98      	subs	r0, r3, r2
 80014ae:	6963      	ldr	r3, [r4, #20]
 80014b0:	b2f6      	uxtb	r6, r6
 80014b2:	4283      	cmp	r3, r0
 80014b4:	4637      	mov	r7, r6
 80014b6:	dc05      	bgt.n	80014c4 <__swbuf_r+0x4e>
 80014b8:	4621      	mov	r1, r4
 80014ba:	4628      	mov	r0, r5
 80014bc:	f000 fd38 	bl	8001f30 <_fflush_r>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d1ed      	bne.n	80014a0 <__swbuf_r+0x2a>
 80014c4:	68a3      	ldr	r3, [r4, #8]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	60a3      	str	r3, [r4, #8]
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	6022      	str	r2, [r4, #0]
 80014d0:	701e      	strb	r6, [r3, #0]
 80014d2:	6962      	ldr	r2, [r4, #20]
 80014d4:	1c43      	adds	r3, r0, #1
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d004      	beq.n	80014e4 <__swbuf_r+0x6e>
 80014da:	89a3      	ldrh	r3, [r4, #12]
 80014dc:	07db      	lsls	r3, r3, #31
 80014de:	d5e1      	bpl.n	80014a4 <__swbuf_r+0x2e>
 80014e0:	2e0a      	cmp	r6, #10
 80014e2:	d1df      	bne.n	80014a4 <__swbuf_r+0x2e>
 80014e4:	4621      	mov	r1, r4
 80014e6:	4628      	mov	r0, r5
 80014e8:	f000 fd22 	bl	8001f30 <_fflush_r>
 80014ec:	2800      	cmp	r0, #0
 80014ee:	d0d9      	beq.n	80014a4 <__swbuf_r+0x2e>
 80014f0:	e7d6      	b.n	80014a0 <__swbuf_r+0x2a>
	...

080014f4 <__swsetup_r>:
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	4b29      	ldr	r3, [pc, #164]	@ (800159c <__swsetup_r+0xa8>)
 80014f8:	4605      	mov	r5, r0
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	460c      	mov	r4, r1
 80014fe:	b118      	cbz	r0, 8001508 <__swsetup_r+0x14>
 8001500:	6a03      	ldr	r3, [r0, #32]
 8001502:	b90b      	cbnz	r3, 8001508 <__swsetup_r+0x14>
 8001504:	f7ff fece 	bl	80012a4 <__sinit>
 8001508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800150c:	0719      	lsls	r1, r3, #28
 800150e:	d422      	bmi.n	8001556 <__swsetup_r+0x62>
 8001510:	06da      	lsls	r2, r3, #27
 8001512:	d407      	bmi.n	8001524 <__swsetup_r+0x30>
 8001514:	2209      	movs	r2, #9
 8001516:	602a      	str	r2, [r5, #0]
 8001518:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800151c:	81a3      	strh	r3, [r4, #12]
 800151e:	f04f 30ff 	mov.w	r0, #4294967295
 8001522:	e033      	b.n	800158c <__swsetup_r+0x98>
 8001524:	0758      	lsls	r0, r3, #29
 8001526:	d512      	bpl.n	800154e <__swsetup_r+0x5a>
 8001528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800152a:	b141      	cbz	r1, 800153e <__swsetup_r+0x4a>
 800152c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001530:	4299      	cmp	r1, r3
 8001532:	d002      	beq.n	800153a <__swsetup_r+0x46>
 8001534:	4628      	mov	r0, r5
 8001536:	f000 f8af 	bl	8001698 <_free_r>
 800153a:	2300      	movs	r3, #0
 800153c:	6363      	str	r3, [r4, #52]	@ 0x34
 800153e:	89a3      	ldrh	r3, [r4, #12]
 8001540:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001544:	81a3      	strh	r3, [r4, #12]
 8001546:	2300      	movs	r3, #0
 8001548:	6063      	str	r3, [r4, #4]
 800154a:	6923      	ldr	r3, [r4, #16]
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	89a3      	ldrh	r3, [r4, #12]
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	81a3      	strh	r3, [r4, #12]
 8001556:	6923      	ldr	r3, [r4, #16]
 8001558:	b94b      	cbnz	r3, 800156e <__swsetup_r+0x7a>
 800155a:	89a3      	ldrh	r3, [r4, #12]
 800155c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001564:	d003      	beq.n	800156e <__swsetup_r+0x7a>
 8001566:	4621      	mov	r1, r4
 8001568:	4628      	mov	r0, r5
 800156a:	f000 fd2f 	bl	8001fcc <__smakebuf_r>
 800156e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001572:	f013 0201 	ands.w	r2, r3, #1
 8001576:	d00a      	beq.n	800158e <__swsetup_r+0x9a>
 8001578:	2200      	movs	r2, #0
 800157a:	60a2      	str	r2, [r4, #8]
 800157c:	6962      	ldr	r2, [r4, #20]
 800157e:	4252      	negs	r2, r2
 8001580:	61a2      	str	r2, [r4, #24]
 8001582:	6922      	ldr	r2, [r4, #16]
 8001584:	b942      	cbnz	r2, 8001598 <__swsetup_r+0xa4>
 8001586:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800158a:	d1c5      	bne.n	8001518 <__swsetup_r+0x24>
 800158c:	bd38      	pop	{r3, r4, r5, pc}
 800158e:	0799      	lsls	r1, r3, #30
 8001590:	bf58      	it	pl
 8001592:	6962      	ldrpl	r2, [r4, #20]
 8001594:	60a2      	str	r2, [r4, #8]
 8001596:	e7f4      	b.n	8001582 <__swsetup_r+0x8e>
 8001598:	2000      	movs	r0, #0
 800159a:	e7f7      	b.n	800158c <__swsetup_r+0x98>
 800159c:	2000000c 	.word	0x2000000c

080015a0 <memset>:
 80015a0:	4402      	add	r2, r0
 80015a2:	4603      	mov	r3, r0
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d100      	bne.n	80015aa <memset+0xa>
 80015a8:	4770      	bx	lr
 80015aa:	f803 1b01 	strb.w	r1, [r3], #1
 80015ae:	e7f9      	b.n	80015a4 <memset+0x4>

080015b0 <_close_r>:
 80015b0:	b538      	push	{r3, r4, r5, lr}
 80015b2:	4d06      	ldr	r5, [pc, #24]	@ (80015cc <_close_r+0x1c>)
 80015b4:	2300      	movs	r3, #0
 80015b6:	4604      	mov	r4, r0
 80015b8:	4608      	mov	r0, r1
 80015ba:	602b      	str	r3, [r5, #0]
 80015bc:	f7ff fd51 	bl	8001062 <_close>
 80015c0:	1c43      	adds	r3, r0, #1
 80015c2:	d102      	bne.n	80015ca <_close_r+0x1a>
 80015c4:	682b      	ldr	r3, [r5, #0]
 80015c6:	b103      	cbz	r3, 80015ca <_close_r+0x1a>
 80015c8:	6023      	str	r3, [r4, #0]
 80015ca:	bd38      	pop	{r3, r4, r5, pc}
 80015cc:	200001bc 	.word	0x200001bc

080015d0 <_lseek_r>:
 80015d0:	b538      	push	{r3, r4, r5, lr}
 80015d2:	4d07      	ldr	r5, [pc, #28]	@ (80015f0 <_lseek_r+0x20>)
 80015d4:	4604      	mov	r4, r0
 80015d6:	4608      	mov	r0, r1
 80015d8:	4611      	mov	r1, r2
 80015da:	2200      	movs	r2, #0
 80015dc:	602a      	str	r2, [r5, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	f7ff fd66 	bl	80010b0 <_lseek>
 80015e4:	1c43      	adds	r3, r0, #1
 80015e6:	d102      	bne.n	80015ee <_lseek_r+0x1e>
 80015e8:	682b      	ldr	r3, [r5, #0]
 80015ea:	b103      	cbz	r3, 80015ee <_lseek_r+0x1e>
 80015ec:	6023      	str	r3, [r4, #0]
 80015ee:	bd38      	pop	{r3, r4, r5, pc}
 80015f0:	200001bc 	.word	0x200001bc

080015f4 <_read_r>:
 80015f4:	b538      	push	{r3, r4, r5, lr}
 80015f6:	4d07      	ldr	r5, [pc, #28]	@ (8001614 <_read_r+0x20>)
 80015f8:	4604      	mov	r4, r0
 80015fa:	4608      	mov	r0, r1
 80015fc:	4611      	mov	r1, r2
 80015fe:	2200      	movs	r2, #0
 8001600:	602a      	str	r2, [r5, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	f7ff fcf4 	bl	8000ff0 <_read>
 8001608:	1c43      	adds	r3, r0, #1
 800160a:	d102      	bne.n	8001612 <_read_r+0x1e>
 800160c:	682b      	ldr	r3, [r5, #0]
 800160e:	b103      	cbz	r3, 8001612 <_read_r+0x1e>
 8001610:	6023      	str	r3, [r4, #0]
 8001612:	bd38      	pop	{r3, r4, r5, pc}
 8001614:	200001bc 	.word	0x200001bc

08001618 <_write_r>:
 8001618:	b538      	push	{r3, r4, r5, lr}
 800161a:	4d07      	ldr	r5, [pc, #28]	@ (8001638 <_write_r+0x20>)
 800161c:	4604      	mov	r4, r0
 800161e:	4608      	mov	r0, r1
 8001620:	4611      	mov	r1, r2
 8001622:	2200      	movs	r2, #0
 8001624:	602a      	str	r2, [r5, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	f7ff fcff 	bl	800102a <_write>
 800162c:	1c43      	adds	r3, r0, #1
 800162e:	d102      	bne.n	8001636 <_write_r+0x1e>
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	b103      	cbz	r3, 8001636 <_write_r+0x1e>
 8001634:	6023      	str	r3, [r4, #0]
 8001636:	bd38      	pop	{r3, r4, r5, pc}
 8001638:	200001bc 	.word	0x200001bc

0800163c <__errno>:
 800163c:	4b01      	ldr	r3, [pc, #4]	@ (8001644 <__errno+0x8>)
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000000c 	.word	0x2000000c

08001648 <__libc_init_array>:
 8001648:	b570      	push	{r4, r5, r6, lr}
 800164a:	4d0d      	ldr	r5, [pc, #52]	@ (8001680 <__libc_init_array+0x38>)
 800164c:	4c0d      	ldr	r4, [pc, #52]	@ (8001684 <__libc_init_array+0x3c>)
 800164e:	1b64      	subs	r4, r4, r5
 8001650:	10a4      	asrs	r4, r4, #2
 8001652:	2600      	movs	r6, #0
 8001654:	42a6      	cmp	r6, r4
 8001656:	d109      	bne.n	800166c <__libc_init_array+0x24>
 8001658:	4d0b      	ldr	r5, [pc, #44]	@ (8001688 <__libc_init_array+0x40>)
 800165a:	4c0c      	ldr	r4, [pc, #48]	@ (800168c <__libc_init_array+0x44>)
 800165c:	f000 fd24 	bl	80020a8 <_init>
 8001660:	1b64      	subs	r4, r4, r5
 8001662:	10a4      	asrs	r4, r4, #2
 8001664:	2600      	movs	r6, #0
 8001666:	42a6      	cmp	r6, r4
 8001668:	d105      	bne.n	8001676 <__libc_init_array+0x2e>
 800166a:	bd70      	pop	{r4, r5, r6, pc}
 800166c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001670:	4798      	blx	r3
 8001672:	3601      	adds	r6, #1
 8001674:	e7ee      	b.n	8001654 <__libc_init_array+0xc>
 8001676:	f855 3b04 	ldr.w	r3, [r5], #4
 800167a:	4798      	blx	r3
 800167c:	3601      	adds	r6, #1
 800167e:	e7f2      	b.n	8001666 <__libc_init_array+0x1e>
 8001680:	0800217c 	.word	0x0800217c
 8001684:	0800217c 	.word	0x0800217c
 8001688:	0800217c 	.word	0x0800217c
 800168c:	08002180 	.word	0x08002180

08001690 <__retarget_lock_init_recursive>:
 8001690:	4770      	bx	lr

08001692 <__retarget_lock_acquire_recursive>:
 8001692:	4770      	bx	lr

08001694 <__retarget_lock_release_recursive>:
 8001694:	4770      	bx	lr
	...

08001698 <_free_r>:
 8001698:	b538      	push	{r3, r4, r5, lr}
 800169a:	4605      	mov	r5, r0
 800169c:	2900      	cmp	r1, #0
 800169e:	d041      	beq.n	8001724 <_free_r+0x8c>
 80016a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016a4:	1f0c      	subs	r4, r1, #4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bfb8      	it	lt
 80016aa:	18e4      	addlt	r4, r4, r3
 80016ac:	f000 f8e0 	bl	8001870 <__malloc_lock>
 80016b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001728 <_free_r+0x90>)
 80016b2:	6813      	ldr	r3, [r2, #0]
 80016b4:	b933      	cbnz	r3, 80016c4 <_free_r+0x2c>
 80016b6:	6063      	str	r3, [r4, #4]
 80016b8:	6014      	str	r4, [r2, #0]
 80016ba:	4628      	mov	r0, r5
 80016bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016c0:	f000 b8dc 	b.w	800187c <__malloc_unlock>
 80016c4:	42a3      	cmp	r3, r4
 80016c6:	d908      	bls.n	80016da <_free_r+0x42>
 80016c8:	6820      	ldr	r0, [r4, #0]
 80016ca:	1821      	adds	r1, r4, r0
 80016cc:	428b      	cmp	r3, r1
 80016ce:	bf01      	itttt	eq
 80016d0:	6819      	ldreq	r1, [r3, #0]
 80016d2:	685b      	ldreq	r3, [r3, #4]
 80016d4:	1809      	addeq	r1, r1, r0
 80016d6:	6021      	streq	r1, [r4, #0]
 80016d8:	e7ed      	b.n	80016b6 <_free_r+0x1e>
 80016da:	461a      	mov	r2, r3
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	b10b      	cbz	r3, 80016e4 <_free_r+0x4c>
 80016e0:	42a3      	cmp	r3, r4
 80016e2:	d9fa      	bls.n	80016da <_free_r+0x42>
 80016e4:	6811      	ldr	r1, [r2, #0]
 80016e6:	1850      	adds	r0, r2, r1
 80016e8:	42a0      	cmp	r0, r4
 80016ea:	d10b      	bne.n	8001704 <_free_r+0x6c>
 80016ec:	6820      	ldr	r0, [r4, #0]
 80016ee:	4401      	add	r1, r0
 80016f0:	1850      	adds	r0, r2, r1
 80016f2:	4283      	cmp	r3, r0
 80016f4:	6011      	str	r1, [r2, #0]
 80016f6:	d1e0      	bne.n	80016ba <_free_r+0x22>
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	6053      	str	r3, [r2, #4]
 80016fe:	4408      	add	r0, r1
 8001700:	6010      	str	r0, [r2, #0]
 8001702:	e7da      	b.n	80016ba <_free_r+0x22>
 8001704:	d902      	bls.n	800170c <_free_r+0x74>
 8001706:	230c      	movs	r3, #12
 8001708:	602b      	str	r3, [r5, #0]
 800170a:	e7d6      	b.n	80016ba <_free_r+0x22>
 800170c:	6820      	ldr	r0, [r4, #0]
 800170e:	1821      	adds	r1, r4, r0
 8001710:	428b      	cmp	r3, r1
 8001712:	bf04      	itt	eq
 8001714:	6819      	ldreq	r1, [r3, #0]
 8001716:	685b      	ldreq	r3, [r3, #4]
 8001718:	6063      	str	r3, [r4, #4]
 800171a:	bf04      	itt	eq
 800171c:	1809      	addeq	r1, r1, r0
 800171e:	6021      	streq	r1, [r4, #0]
 8001720:	6054      	str	r4, [r2, #4]
 8001722:	e7ca      	b.n	80016ba <_free_r+0x22>
 8001724:	bd38      	pop	{r3, r4, r5, pc}
 8001726:	bf00      	nop
 8001728:	200001c8 	.word	0x200001c8

0800172c <sbrk_aligned>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	4e0f      	ldr	r6, [pc, #60]	@ (800176c <sbrk_aligned+0x40>)
 8001730:	460c      	mov	r4, r1
 8001732:	6831      	ldr	r1, [r6, #0]
 8001734:	4605      	mov	r5, r0
 8001736:	b911      	cbnz	r1, 800173e <sbrk_aligned+0x12>
 8001738:	f000 fca6 	bl	8002088 <_sbrk_r>
 800173c:	6030      	str	r0, [r6, #0]
 800173e:	4621      	mov	r1, r4
 8001740:	4628      	mov	r0, r5
 8001742:	f000 fca1 	bl	8002088 <_sbrk_r>
 8001746:	1c43      	adds	r3, r0, #1
 8001748:	d103      	bne.n	8001752 <sbrk_aligned+0x26>
 800174a:	f04f 34ff 	mov.w	r4, #4294967295
 800174e:	4620      	mov	r0, r4
 8001750:	bd70      	pop	{r4, r5, r6, pc}
 8001752:	1cc4      	adds	r4, r0, #3
 8001754:	f024 0403 	bic.w	r4, r4, #3
 8001758:	42a0      	cmp	r0, r4
 800175a:	d0f8      	beq.n	800174e <sbrk_aligned+0x22>
 800175c:	1a21      	subs	r1, r4, r0
 800175e:	4628      	mov	r0, r5
 8001760:	f000 fc92 	bl	8002088 <_sbrk_r>
 8001764:	3001      	adds	r0, #1
 8001766:	d1f2      	bne.n	800174e <sbrk_aligned+0x22>
 8001768:	e7ef      	b.n	800174a <sbrk_aligned+0x1e>
 800176a:	bf00      	nop
 800176c:	200001c4 	.word	0x200001c4

08001770 <_malloc_r>:
 8001770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001774:	1ccd      	adds	r5, r1, #3
 8001776:	f025 0503 	bic.w	r5, r5, #3
 800177a:	3508      	adds	r5, #8
 800177c:	2d0c      	cmp	r5, #12
 800177e:	bf38      	it	cc
 8001780:	250c      	movcc	r5, #12
 8001782:	2d00      	cmp	r5, #0
 8001784:	4606      	mov	r6, r0
 8001786:	db01      	blt.n	800178c <_malloc_r+0x1c>
 8001788:	42a9      	cmp	r1, r5
 800178a:	d904      	bls.n	8001796 <_malloc_r+0x26>
 800178c:	230c      	movs	r3, #12
 800178e:	6033      	str	r3, [r6, #0]
 8001790:	2000      	movs	r0, #0
 8001792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001796:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800186c <_malloc_r+0xfc>
 800179a:	f000 f869 	bl	8001870 <__malloc_lock>
 800179e:	f8d8 3000 	ldr.w	r3, [r8]
 80017a2:	461c      	mov	r4, r3
 80017a4:	bb44      	cbnz	r4, 80017f8 <_malloc_r+0x88>
 80017a6:	4629      	mov	r1, r5
 80017a8:	4630      	mov	r0, r6
 80017aa:	f7ff ffbf 	bl	800172c <sbrk_aligned>
 80017ae:	1c43      	adds	r3, r0, #1
 80017b0:	4604      	mov	r4, r0
 80017b2:	d158      	bne.n	8001866 <_malloc_r+0xf6>
 80017b4:	f8d8 4000 	ldr.w	r4, [r8]
 80017b8:	4627      	mov	r7, r4
 80017ba:	2f00      	cmp	r7, #0
 80017bc:	d143      	bne.n	8001846 <_malloc_r+0xd6>
 80017be:	2c00      	cmp	r4, #0
 80017c0:	d04b      	beq.n	800185a <_malloc_r+0xea>
 80017c2:	6823      	ldr	r3, [r4, #0]
 80017c4:	4639      	mov	r1, r7
 80017c6:	4630      	mov	r0, r6
 80017c8:	eb04 0903 	add.w	r9, r4, r3
 80017cc:	f000 fc5c 	bl	8002088 <_sbrk_r>
 80017d0:	4581      	cmp	r9, r0
 80017d2:	d142      	bne.n	800185a <_malloc_r+0xea>
 80017d4:	6821      	ldr	r1, [r4, #0]
 80017d6:	1a6d      	subs	r5, r5, r1
 80017d8:	4629      	mov	r1, r5
 80017da:	4630      	mov	r0, r6
 80017dc:	f7ff ffa6 	bl	800172c <sbrk_aligned>
 80017e0:	3001      	adds	r0, #1
 80017e2:	d03a      	beq.n	800185a <_malloc_r+0xea>
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	442b      	add	r3, r5
 80017e8:	6023      	str	r3, [r4, #0]
 80017ea:	f8d8 3000 	ldr.w	r3, [r8]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	bb62      	cbnz	r2, 800184c <_malloc_r+0xdc>
 80017f2:	f8c8 7000 	str.w	r7, [r8]
 80017f6:	e00f      	b.n	8001818 <_malloc_r+0xa8>
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	1b52      	subs	r2, r2, r5
 80017fc:	d420      	bmi.n	8001840 <_malloc_r+0xd0>
 80017fe:	2a0b      	cmp	r2, #11
 8001800:	d917      	bls.n	8001832 <_malloc_r+0xc2>
 8001802:	1961      	adds	r1, r4, r5
 8001804:	42a3      	cmp	r3, r4
 8001806:	6025      	str	r5, [r4, #0]
 8001808:	bf18      	it	ne
 800180a:	6059      	strne	r1, [r3, #4]
 800180c:	6863      	ldr	r3, [r4, #4]
 800180e:	bf08      	it	eq
 8001810:	f8c8 1000 	streq.w	r1, [r8]
 8001814:	5162      	str	r2, [r4, r5]
 8001816:	604b      	str	r3, [r1, #4]
 8001818:	4630      	mov	r0, r6
 800181a:	f000 f82f 	bl	800187c <__malloc_unlock>
 800181e:	f104 000b 	add.w	r0, r4, #11
 8001822:	1d23      	adds	r3, r4, #4
 8001824:	f020 0007 	bic.w	r0, r0, #7
 8001828:	1ac2      	subs	r2, r0, r3
 800182a:	bf1c      	itt	ne
 800182c:	1a1b      	subne	r3, r3, r0
 800182e:	50a3      	strne	r3, [r4, r2]
 8001830:	e7af      	b.n	8001792 <_malloc_r+0x22>
 8001832:	6862      	ldr	r2, [r4, #4]
 8001834:	42a3      	cmp	r3, r4
 8001836:	bf0c      	ite	eq
 8001838:	f8c8 2000 	streq.w	r2, [r8]
 800183c:	605a      	strne	r2, [r3, #4]
 800183e:	e7eb      	b.n	8001818 <_malloc_r+0xa8>
 8001840:	4623      	mov	r3, r4
 8001842:	6864      	ldr	r4, [r4, #4]
 8001844:	e7ae      	b.n	80017a4 <_malloc_r+0x34>
 8001846:	463c      	mov	r4, r7
 8001848:	687f      	ldr	r7, [r7, #4]
 800184a:	e7b6      	b.n	80017ba <_malloc_r+0x4a>
 800184c:	461a      	mov	r2, r3
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	42a3      	cmp	r3, r4
 8001852:	d1fb      	bne.n	800184c <_malloc_r+0xdc>
 8001854:	2300      	movs	r3, #0
 8001856:	6053      	str	r3, [r2, #4]
 8001858:	e7de      	b.n	8001818 <_malloc_r+0xa8>
 800185a:	230c      	movs	r3, #12
 800185c:	6033      	str	r3, [r6, #0]
 800185e:	4630      	mov	r0, r6
 8001860:	f000 f80c 	bl	800187c <__malloc_unlock>
 8001864:	e794      	b.n	8001790 <_malloc_r+0x20>
 8001866:	6005      	str	r5, [r0, #0]
 8001868:	e7d6      	b.n	8001818 <_malloc_r+0xa8>
 800186a:	bf00      	nop
 800186c:	200001c8 	.word	0x200001c8

08001870 <__malloc_lock>:
 8001870:	4801      	ldr	r0, [pc, #4]	@ (8001878 <__malloc_lock+0x8>)
 8001872:	f7ff bf0e 	b.w	8001692 <__retarget_lock_acquire_recursive>
 8001876:	bf00      	nop
 8001878:	200001c0 	.word	0x200001c0

0800187c <__malloc_unlock>:
 800187c:	4801      	ldr	r0, [pc, #4]	@ (8001884 <__malloc_unlock+0x8>)
 800187e:	f7ff bf09 	b.w	8001694 <__retarget_lock_release_recursive>
 8001882:	bf00      	nop
 8001884:	200001c0 	.word	0x200001c0

08001888 <__sfputc_r>:
 8001888:	6893      	ldr	r3, [r2, #8]
 800188a:	3b01      	subs	r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	b410      	push	{r4}
 8001890:	6093      	str	r3, [r2, #8]
 8001892:	da08      	bge.n	80018a6 <__sfputc_r+0x1e>
 8001894:	6994      	ldr	r4, [r2, #24]
 8001896:	42a3      	cmp	r3, r4
 8001898:	db01      	blt.n	800189e <__sfputc_r+0x16>
 800189a:	290a      	cmp	r1, #10
 800189c:	d103      	bne.n	80018a6 <__sfputc_r+0x1e>
 800189e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018a2:	f7ff bde8 	b.w	8001476 <__swbuf_r>
 80018a6:	6813      	ldr	r3, [r2, #0]
 80018a8:	1c58      	adds	r0, r3, #1
 80018aa:	6010      	str	r0, [r2, #0]
 80018ac:	7019      	strb	r1, [r3, #0]
 80018ae:	4608      	mov	r0, r1
 80018b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <__sfputs_r>:
 80018b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b8:	4606      	mov	r6, r0
 80018ba:	460f      	mov	r7, r1
 80018bc:	4614      	mov	r4, r2
 80018be:	18d5      	adds	r5, r2, r3
 80018c0:	42ac      	cmp	r4, r5
 80018c2:	d101      	bne.n	80018c8 <__sfputs_r+0x12>
 80018c4:	2000      	movs	r0, #0
 80018c6:	e007      	b.n	80018d8 <__sfputs_r+0x22>
 80018c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018cc:	463a      	mov	r2, r7
 80018ce:	4630      	mov	r0, r6
 80018d0:	f7ff ffda 	bl	8001888 <__sfputc_r>
 80018d4:	1c43      	adds	r3, r0, #1
 80018d6:	d1f3      	bne.n	80018c0 <__sfputs_r+0xa>
 80018d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018dc <_vfiprintf_r>:
 80018dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e0:	460d      	mov	r5, r1
 80018e2:	b09d      	sub	sp, #116	@ 0x74
 80018e4:	4614      	mov	r4, r2
 80018e6:	4698      	mov	r8, r3
 80018e8:	4606      	mov	r6, r0
 80018ea:	b118      	cbz	r0, 80018f4 <_vfiprintf_r+0x18>
 80018ec:	6a03      	ldr	r3, [r0, #32]
 80018ee:	b90b      	cbnz	r3, 80018f4 <_vfiprintf_r+0x18>
 80018f0:	f7ff fcd8 	bl	80012a4 <__sinit>
 80018f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80018f6:	07d9      	lsls	r1, r3, #31
 80018f8:	d405      	bmi.n	8001906 <_vfiprintf_r+0x2a>
 80018fa:	89ab      	ldrh	r3, [r5, #12]
 80018fc:	059a      	lsls	r2, r3, #22
 80018fe:	d402      	bmi.n	8001906 <_vfiprintf_r+0x2a>
 8001900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001902:	f7ff fec6 	bl	8001692 <__retarget_lock_acquire_recursive>
 8001906:	89ab      	ldrh	r3, [r5, #12]
 8001908:	071b      	lsls	r3, r3, #28
 800190a:	d501      	bpl.n	8001910 <_vfiprintf_r+0x34>
 800190c:	692b      	ldr	r3, [r5, #16]
 800190e:	b99b      	cbnz	r3, 8001938 <_vfiprintf_r+0x5c>
 8001910:	4629      	mov	r1, r5
 8001912:	4630      	mov	r0, r6
 8001914:	f7ff fdee 	bl	80014f4 <__swsetup_r>
 8001918:	b170      	cbz	r0, 8001938 <_vfiprintf_r+0x5c>
 800191a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800191c:	07dc      	lsls	r4, r3, #31
 800191e:	d504      	bpl.n	800192a <_vfiprintf_r+0x4e>
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	b01d      	add	sp, #116	@ 0x74
 8001926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800192a:	89ab      	ldrh	r3, [r5, #12]
 800192c:	0598      	lsls	r0, r3, #22
 800192e:	d4f7      	bmi.n	8001920 <_vfiprintf_r+0x44>
 8001930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001932:	f7ff feaf 	bl	8001694 <__retarget_lock_release_recursive>
 8001936:	e7f3      	b.n	8001920 <_vfiprintf_r+0x44>
 8001938:	2300      	movs	r3, #0
 800193a:	9309      	str	r3, [sp, #36]	@ 0x24
 800193c:	2320      	movs	r3, #32
 800193e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001942:	f8cd 800c 	str.w	r8, [sp, #12]
 8001946:	2330      	movs	r3, #48	@ 0x30
 8001948:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001af8 <_vfiprintf_r+0x21c>
 800194c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001950:	f04f 0901 	mov.w	r9, #1
 8001954:	4623      	mov	r3, r4
 8001956:	469a      	mov	sl, r3
 8001958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800195c:	b10a      	cbz	r2, 8001962 <_vfiprintf_r+0x86>
 800195e:	2a25      	cmp	r2, #37	@ 0x25
 8001960:	d1f9      	bne.n	8001956 <_vfiprintf_r+0x7a>
 8001962:	ebba 0b04 	subs.w	fp, sl, r4
 8001966:	d00b      	beq.n	8001980 <_vfiprintf_r+0xa4>
 8001968:	465b      	mov	r3, fp
 800196a:	4622      	mov	r2, r4
 800196c:	4629      	mov	r1, r5
 800196e:	4630      	mov	r0, r6
 8001970:	f7ff ffa1 	bl	80018b6 <__sfputs_r>
 8001974:	3001      	adds	r0, #1
 8001976:	f000 80a7 	beq.w	8001ac8 <_vfiprintf_r+0x1ec>
 800197a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800197c:	445a      	add	r2, fp
 800197e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001980:	f89a 3000 	ldrb.w	r3, [sl]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 809f 	beq.w	8001ac8 <_vfiprintf_r+0x1ec>
 800198a:	2300      	movs	r3, #0
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001994:	f10a 0a01 	add.w	sl, sl, #1
 8001998:	9304      	str	r3, [sp, #16]
 800199a:	9307      	str	r3, [sp, #28]
 800199c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80019a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80019a2:	4654      	mov	r4, sl
 80019a4:	2205      	movs	r2, #5
 80019a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019aa:	4853      	ldr	r0, [pc, #332]	@ (8001af8 <_vfiprintf_r+0x21c>)
 80019ac:	f7fe fc18 	bl	80001e0 <memchr>
 80019b0:	9a04      	ldr	r2, [sp, #16]
 80019b2:	b9d8      	cbnz	r0, 80019ec <_vfiprintf_r+0x110>
 80019b4:	06d1      	lsls	r1, r2, #27
 80019b6:	bf44      	itt	mi
 80019b8:	2320      	movmi	r3, #32
 80019ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019be:	0713      	lsls	r3, r2, #28
 80019c0:	bf44      	itt	mi
 80019c2:	232b      	movmi	r3, #43	@ 0x2b
 80019c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019c8:	f89a 3000 	ldrb.w	r3, [sl]
 80019cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80019ce:	d015      	beq.n	80019fc <_vfiprintf_r+0x120>
 80019d0:	9a07      	ldr	r2, [sp, #28]
 80019d2:	4654      	mov	r4, sl
 80019d4:	2000      	movs	r0, #0
 80019d6:	f04f 0c0a 	mov.w	ip, #10
 80019da:	4621      	mov	r1, r4
 80019dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019e0:	3b30      	subs	r3, #48	@ 0x30
 80019e2:	2b09      	cmp	r3, #9
 80019e4:	d94b      	bls.n	8001a7e <_vfiprintf_r+0x1a2>
 80019e6:	b1b0      	cbz	r0, 8001a16 <_vfiprintf_r+0x13a>
 80019e8:	9207      	str	r2, [sp, #28]
 80019ea:	e014      	b.n	8001a16 <_vfiprintf_r+0x13a>
 80019ec:	eba0 0308 	sub.w	r3, r0, r8
 80019f0:	fa09 f303 	lsl.w	r3, r9, r3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	9304      	str	r3, [sp, #16]
 80019f8:	46a2      	mov	sl, r4
 80019fa:	e7d2      	b.n	80019a2 <_vfiprintf_r+0xc6>
 80019fc:	9b03      	ldr	r3, [sp, #12]
 80019fe:	1d19      	adds	r1, r3, #4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	9103      	str	r1, [sp, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bfbb      	ittet	lt
 8001a08:	425b      	neglt	r3, r3
 8001a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8001a0e:	9307      	strge	r3, [sp, #28]
 8001a10:	9307      	strlt	r3, [sp, #28]
 8001a12:	bfb8      	it	lt
 8001a14:	9204      	strlt	r2, [sp, #16]
 8001a16:	7823      	ldrb	r3, [r4, #0]
 8001a18:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a1a:	d10a      	bne.n	8001a32 <_vfiprintf_r+0x156>
 8001a1c:	7863      	ldrb	r3, [r4, #1]
 8001a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a20:	d132      	bne.n	8001a88 <_vfiprintf_r+0x1ac>
 8001a22:	9b03      	ldr	r3, [sp, #12]
 8001a24:	1d1a      	adds	r2, r3, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	9203      	str	r2, [sp, #12]
 8001a2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a2e:	3402      	adds	r4, #2
 8001a30:	9305      	str	r3, [sp, #20]
 8001a32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001b08 <_vfiprintf_r+0x22c>
 8001a36:	7821      	ldrb	r1, [r4, #0]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	4650      	mov	r0, sl
 8001a3c:	f7fe fbd0 	bl	80001e0 <memchr>
 8001a40:	b138      	cbz	r0, 8001a52 <_vfiprintf_r+0x176>
 8001a42:	9b04      	ldr	r3, [sp, #16]
 8001a44:	eba0 000a 	sub.w	r0, r0, sl
 8001a48:	2240      	movs	r2, #64	@ 0x40
 8001a4a:	4082      	lsls	r2, r0
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	3401      	adds	r4, #1
 8001a50:	9304      	str	r3, [sp, #16]
 8001a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a56:	4829      	ldr	r0, [pc, #164]	@ (8001afc <_vfiprintf_r+0x220>)
 8001a58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001a5c:	2206      	movs	r2, #6
 8001a5e:	f7fe fbbf 	bl	80001e0 <memchr>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	d03f      	beq.n	8001ae6 <_vfiprintf_r+0x20a>
 8001a66:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <_vfiprintf_r+0x224>)
 8001a68:	bb1b      	cbnz	r3, 8001ab2 <_vfiprintf_r+0x1d6>
 8001a6a:	9b03      	ldr	r3, [sp, #12]
 8001a6c:	3307      	adds	r3, #7
 8001a6e:	f023 0307 	bic.w	r3, r3, #7
 8001a72:	3308      	adds	r3, #8
 8001a74:	9303      	str	r3, [sp, #12]
 8001a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a78:	443b      	add	r3, r7
 8001a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a7c:	e76a      	b.n	8001954 <_vfiprintf_r+0x78>
 8001a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a82:	460c      	mov	r4, r1
 8001a84:	2001      	movs	r0, #1
 8001a86:	e7a8      	b.n	80019da <_vfiprintf_r+0xfe>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	3401      	adds	r4, #1
 8001a8c:	9305      	str	r3, [sp, #20]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f04f 0c0a 	mov.w	ip, #10
 8001a94:	4620      	mov	r0, r4
 8001a96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a9a:	3a30      	subs	r2, #48	@ 0x30
 8001a9c:	2a09      	cmp	r2, #9
 8001a9e:	d903      	bls.n	8001aa8 <_vfiprintf_r+0x1cc>
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0c6      	beq.n	8001a32 <_vfiprintf_r+0x156>
 8001aa4:	9105      	str	r1, [sp, #20]
 8001aa6:	e7c4      	b.n	8001a32 <_vfiprintf_r+0x156>
 8001aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8001aac:	4604      	mov	r4, r0
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e7f0      	b.n	8001a94 <_vfiprintf_r+0x1b8>
 8001ab2:	ab03      	add	r3, sp, #12
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	462a      	mov	r2, r5
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <_vfiprintf_r+0x228>)
 8001aba:	a904      	add	r1, sp, #16
 8001abc:	4630      	mov	r0, r6
 8001abe:	f3af 8000 	nop.w
 8001ac2:	4607      	mov	r7, r0
 8001ac4:	1c78      	adds	r0, r7, #1
 8001ac6:	d1d6      	bne.n	8001a76 <_vfiprintf_r+0x19a>
 8001ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001aca:	07d9      	lsls	r1, r3, #31
 8001acc:	d405      	bmi.n	8001ada <_vfiprintf_r+0x1fe>
 8001ace:	89ab      	ldrh	r3, [r5, #12]
 8001ad0:	059a      	lsls	r2, r3, #22
 8001ad2:	d402      	bmi.n	8001ada <_vfiprintf_r+0x1fe>
 8001ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ad6:	f7ff fddd 	bl	8001694 <__retarget_lock_release_recursive>
 8001ada:	89ab      	ldrh	r3, [r5, #12]
 8001adc:	065b      	lsls	r3, r3, #25
 8001ade:	f53f af1f 	bmi.w	8001920 <_vfiprintf_r+0x44>
 8001ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001ae4:	e71e      	b.n	8001924 <_vfiprintf_r+0x48>
 8001ae6:	ab03      	add	r3, sp, #12
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	462a      	mov	r2, r5
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <_vfiprintf_r+0x228>)
 8001aee:	a904      	add	r1, sp, #16
 8001af0:	4630      	mov	r0, r6
 8001af2:	f000 f879 	bl	8001be8 <_printf_i>
 8001af6:	e7e4      	b.n	8001ac2 <_vfiprintf_r+0x1e6>
 8001af8:	0800213e 	.word	0x0800213e
 8001afc:	08002148 	.word	0x08002148
 8001b00:	00000000 	.word	0x00000000
 8001b04:	080018b7 	.word	0x080018b7
 8001b08:	08002144 	.word	0x08002144

08001b0c <_printf_common>:
 8001b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b10:	4616      	mov	r6, r2
 8001b12:	4698      	mov	r8, r3
 8001b14:	688a      	ldr	r2, [r1, #8]
 8001b16:	690b      	ldr	r3, [r1, #16]
 8001b18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	bfb8      	it	lt
 8001b20:	4613      	movlt	r3, r2
 8001b22:	6033      	str	r3, [r6, #0]
 8001b24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001b28:	4607      	mov	r7, r0
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	b10a      	cbz	r2, 8001b32 <_printf_common+0x26>
 8001b2e:	3301      	adds	r3, #1
 8001b30:	6033      	str	r3, [r6, #0]
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	0699      	lsls	r1, r3, #26
 8001b36:	bf42      	ittt	mi
 8001b38:	6833      	ldrmi	r3, [r6, #0]
 8001b3a:	3302      	addmi	r3, #2
 8001b3c:	6033      	strmi	r3, [r6, #0]
 8001b3e:	6825      	ldr	r5, [r4, #0]
 8001b40:	f015 0506 	ands.w	r5, r5, #6
 8001b44:	d106      	bne.n	8001b54 <_printf_common+0x48>
 8001b46:	f104 0a19 	add.w	sl, r4, #25
 8001b4a:	68e3      	ldr	r3, [r4, #12]
 8001b4c:	6832      	ldr	r2, [r6, #0]
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	42ab      	cmp	r3, r5
 8001b52:	dc26      	bgt.n	8001ba2 <_printf_common+0x96>
 8001b54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001b58:	6822      	ldr	r2, [r4, #0]
 8001b5a:	3b00      	subs	r3, #0
 8001b5c:	bf18      	it	ne
 8001b5e:	2301      	movne	r3, #1
 8001b60:	0692      	lsls	r2, r2, #26
 8001b62:	d42b      	bmi.n	8001bbc <_printf_common+0xb0>
 8001b64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001b68:	4641      	mov	r1, r8
 8001b6a:	4638      	mov	r0, r7
 8001b6c:	47c8      	blx	r9
 8001b6e:	3001      	adds	r0, #1
 8001b70:	d01e      	beq.n	8001bb0 <_printf_common+0xa4>
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	6922      	ldr	r2, [r4, #16]
 8001b76:	f003 0306 	and.w	r3, r3, #6
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf02      	ittt	eq
 8001b7e:	68e5      	ldreq	r5, [r4, #12]
 8001b80:	6833      	ldreq	r3, [r6, #0]
 8001b82:	1aed      	subeq	r5, r5, r3
 8001b84:	68a3      	ldr	r3, [r4, #8]
 8001b86:	bf0c      	ite	eq
 8001b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b8c:	2500      	movne	r5, #0
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	bfc4      	itt	gt
 8001b92:	1a9b      	subgt	r3, r3, r2
 8001b94:	18ed      	addgt	r5, r5, r3
 8001b96:	2600      	movs	r6, #0
 8001b98:	341a      	adds	r4, #26
 8001b9a:	42b5      	cmp	r5, r6
 8001b9c:	d11a      	bne.n	8001bd4 <_printf_common+0xc8>
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	e008      	b.n	8001bb4 <_printf_common+0xa8>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	4652      	mov	r2, sl
 8001ba6:	4641      	mov	r1, r8
 8001ba8:	4638      	mov	r0, r7
 8001baa:	47c8      	blx	r9
 8001bac:	3001      	adds	r0, #1
 8001bae:	d103      	bne.n	8001bb8 <_printf_common+0xac>
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bb8:	3501      	adds	r5, #1
 8001bba:	e7c6      	b.n	8001b4a <_printf_common+0x3e>
 8001bbc:	18e1      	adds	r1, r4, r3
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	2030      	movs	r0, #48	@ 0x30
 8001bc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001bc6:	4422      	add	r2, r4
 8001bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001bcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	e7c7      	b.n	8001b64 <_printf_common+0x58>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	4641      	mov	r1, r8
 8001bda:	4638      	mov	r0, r7
 8001bdc:	47c8      	blx	r9
 8001bde:	3001      	adds	r0, #1
 8001be0:	d0e6      	beq.n	8001bb0 <_printf_common+0xa4>
 8001be2:	3601      	adds	r6, #1
 8001be4:	e7d9      	b.n	8001b9a <_printf_common+0x8e>
	...

08001be8 <_printf_i>:
 8001be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001bec:	7e0f      	ldrb	r7, [r1, #24]
 8001bee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001bf0:	2f78      	cmp	r7, #120	@ 0x78
 8001bf2:	4691      	mov	r9, r2
 8001bf4:	4680      	mov	r8, r0
 8001bf6:	460c      	mov	r4, r1
 8001bf8:	469a      	mov	sl, r3
 8001bfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001bfe:	d807      	bhi.n	8001c10 <_printf_i+0x28>
 8001c00:	2f62      	cmp	r7, #98	@ 0x62
 8001c02:	d80a      	bhi.n	8001c1a <_printf_i+0x32>
 8001c04:	2f00      	cmp	r7, #0
 8001c06:	f000 80d2 	beq.w	8001dae <_printf_i+0x1c6>
 8001c0a:	2f58      	cmp	r7, #88	@ 0x58
 8001c0c:	f000 80b9 	beq.w	8001d82 <_printf_i+0x19a>
 8001c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c18:	e03a      	b.n	8001c90 <_printf_i+0xa8>
 8001c1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c1e:	2b15      	cmp	r3, #21
 8001c20:	d8f6      	bhi.n	8001c10 <_printf_i+0x28>
 8001c22:	a101      	add	r1, pc, #4	@ (adr r1, 8001c28 <_printf_i+0x40>)
 8001c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c28:	08001c81 	.word	0x08001c81
 8001c2c:	08001c95 	.word	0x08001c95
 8001c30:	08001c11 	.word	0x08001c11
 8001c34:	08001c11 	.word	0x08001c11
 8001c38:	08001c11 	.word	0x08001c11
 8001c3c:	08001c11 	.word	0x08001c11
 8001c40:	08001c95 	.word	0x08001c95
 8001c44:	08001c11 	.word	0x08001c11
 8001c48:	08001c11 	.word	0x08001c11
 8001c4c:	08001c11 	.word	0x08001c11
 8001c50:	08001c11 	.word	0x08001c11
 8001c54:	08001d95 	.word	0x08001d95
 8001c58:	08001cbf 	.word	0x08001cbf
 8001c5c:	08001d4f 	.word	0x08001d4f
 8001c60:	08001c11 	.word	0x08001c11
 8001c64:	08001c11 	.word	0x08001c11
 8001c68:	08001db7 	.word	0x08001db7
 8001c6c:	08001c11 	.word	0x08001c11
 8001c70:	08001cbf 	.word	0x08001cbf
 8001c74:	08001c11 	.word	0x08001c11
 8001c78:	08001c11 	.word	0x08001c11
 8001c7c:	08001d57 	.word	0x08001d57
 8001c80:	6833      	ldr	r3, [r6, #0]
 8001c82:	1d1a      	adds	r2, r3, #4
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6032      	str	r2, [r6, #0]
 8001c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001c90:	2301      	movs	r3, #1
 8001c92:	e09d      	b.n	8001dd0 <_printf_i+0x1e8>
 8001c94:	6833      	ldr	r3, [r6, #0]
 8001c96:	6820      	ldr	r0, [r4, #0]
 8001c98:	1d19      	adds	r1, r3, #4
 8001c9a:	6031      	str	r1, [r6, #0]
 8001c9c:	0606      	lsls	r6, r0, #24
 8001c9e:	d501      	bpl.n	8001ca4 <_printf_i+0xbc>
 8001ca0:	681d      	ldr	r5, [r3, #0]
 8001ca2:	e003      	b.n	8001cac <_printf_i+0xc4>
 8001ca4:	0645      	lsls	r5, r0, #25
 8001ca6:	d5fb      	bpl.n	8001ca0 <_printf_i+0xb8>
 8001ca8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001cac:	2d00      	cmp	r5, #0
 8001cae:	da03      	bge.n	8001cb8 <_printf_i+0xd0>
 8001cb0:	232d      	movs	r3, #45	@ 0x2d
 8001cb2:	426d      	negs	r5, r5
 8001cb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cb8:	4859      	ldr	r0, [pc, #356]	@ (8001e20 <_printf_i+0x238>)
 8001cba:	230a      	movs	r3, #10
 8001cbc:	e011      	b.n	8001ce2 <_printf_i+0xfa>
 8001cbe:	6821      	ldr	r1, [r4, #0]
 8001cc0:	6833      	ldr	r3, [r6, #0]
 8001cc2:	0608      	lsls	r0, r1, #24
 8001cc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8001cc8:	d402      	bmi.n	8001cd0 <_printf_i+0xe8>
 8001cca:	0649      	lsls	r1, r1, #25
 8001ccc:	bf48      	it	mi
 8001cce:	b2ad      	uxthmi	r5, r5
 8001cd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8001cd2:	4853      	ldr	r0, [pc, #332]	@ (8001e20 <_printf_i+0x238>)
 8001cd4:	6033      	str	r3, [r6, #0]
 8001cd6:	bf14      	ite	ne
 8001cd8:	230a      	movne	r3, #10
 8001cda:	2308      	moveq	r3, #8
 8001cdc:	2100      	movs	r1, #0
 8001cde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001ce2:	6866      	ldr	r6, [r4, #4]
 8001ce4:	60a6      	str	r6, [r4, #8]
 8001ce6:	2e00      	cmp	r6, #0
 8001ce8:	bfa2      	ittt	ge
 8001cea:	6821      	ldrge	r1, [r4, #0]
 8001cec:	f021 0104 	bicge.w	r1, r1, #4
 8001cf0:	6021      	strge	r1, [r4, #0]
 8001cf2:	b90d      	cbnz	r5, 8001cf8 <_printf_i+0x110>
 8001cf4:	2e00      	cmp	r6, #0
 8001cf6:	d04b      	beq.n	8001d90 <_printf_i+0x1a8>
 8001cf8:	4616      	mov	r6, r2
 8001cfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8001cfe:	fb03 5711 	mls	r7, r3, r1, r5
 8001d02:	5dc7      	ldrb	r7, [r0, r7]
 8001d04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d08:	462f      	mov	r7, r5
 8001d0a:	42bb      	cmp	r3, r7
 8001d0c:	460d      	mov	r5, r1
 8001d0e:	d9f4      	bls.n	8001cfa <_printf_i+0x112>
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d10b      	bne.n	8001d2c <_printf_i+0x144>
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	07df      	lsls	r7, r3, #31
 8001d18:	d508      	bpl.n	8001d2c <_printf_i+0x144>
 8001d1a:	6923      	ldr	r3, [r4, #16]
 8001d1c:	6861      	ldr	r1, [r4, #4]
 8001d1e:	4299      	cmp	r1, r3
 8001d20:	bfde      	ittt	le
 8001d22:	2330      	movle	r3, #48	@ 0x30
 8001d24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d2c:	1b92      	subs	r2, r2, r6
 8001d2e:	6122      	str	r2, [r4, #16]
 8001d30:	f8cd a000 	str.w	sl, [sp]
 8001d34:	464b      	mov	r3, r9
 8001d36:	aa03      	add	r2, sp, #12
 8001d38:	4621      	mov	r1, r4
 8001d3a:	4640      	mov	r0, r8
 8001d3c:	f7ff fee6 	bl	8001b0c <_printf_common>
 8001d40:	3001      	adds	r0, #1
 8001d42:	d14a      	bne.n	8001dda <_printf_i+0x1f2>
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	b004      	add	sp, #16
 8001d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	f043 0320 	orr.w	r3, r3, #32
 8001d54:	6023      	str	r3, [r4, #0]
 8001d56:	4833      	ldr	r0, [pc, #204]	@ (8001e24 <_printf_i+0x23c>)
 8001d58:	2778      	movs	r7, #120	@ 0x78
 8001d5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	6831      	ldr	r1, [r6, #0]
 8001d62:	061f      	lsls	r7, r3, #24
 8001d64:	f851 5b04 	ldr.w	r5, [r1], #4
 8001d68:	d402      	bmi.n	8001d70 <_printf_i+0x188>
 8001d6a:	065f      	lsls	r7, r3, #25
 8001d6c:	bf48      	it	mi
 8001d6e:	b2ad      	uxthmi	r5, r5
 8001d70:	6031      	str	r1, [r6, #0]
 8001d72:	07d9      	lsls	r1, r3, #31
 8001d74:	bf44      	itt	mi
 8001d76:	f043 0320 	orrmi.w	r3, r3, #32
 8001d7a:	6023      	strmi	r3, [r4, #0]
 8001d7c:	b11d      	cbz	r5, 8001d86 <_printf_i+0x19e>
 8001d7e:	2310      	movs	r3, #16
 8001d80:	e7ac      	b.n	8001cdc <_printf_i+0xf4>
 8001d82:	4827      	ldr	r0, [pc, #156]	@ (8001e20 <_printf_i+0x238>)
 8001d84:	e7e9      	b.n	8001d5a <_printf_i+0x172>
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	f023 0320 	bic.w	r3, r3, #32
 8001d8c:	6023      	str	r3, [r4, #0]
 8001d8e:	e7f6      	b.n	8001d7e <_printf_i+0x196>
 8001d90:	4616      	mov	r6, r2
 8001d92:	e7bd      	b.n	8001d10 <_printf_i+0x128>
 8001d94:	6833      	ldr	r3, [r6, #0]
 8001d96:	6825      	ldr	r5, [r4, #0]
 8001d98:	6961      	ldr	r1, [r4, #20]
 8001d9a:	1d18      	adds	r0, r3, #4
 8001d9c:	6030      	str	r0, [r6, #0]
 8001d9e:	062e      	lsls	r6, r5, #24
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	d501      	bpl.n	8001da8 <_printf_i+0x1c0>
 8001da4:	6019      	str	r1, [r3, #0]
 8001da6:	e002      	b.n	8001dae <_printf_i+0x1c6>
 8001da8:	0668      	lsls	r0, r5, #25
 8001daa:	d5fb      	bpl.n	8001da4 <_printf_i+0x1bc>
 8001dac:	8019      	strh	r1, [r3, #0]
 8001dae:	2300      	movs	r3, #0
 8001db0:	6123      	str	r3, [r4, #16]
 8001db2:	4616      	mov	r6, r2
 8001db4:	e7bc      	b.n	8001d30 <_printf_i+0x148>
 8001db6:	6833      	ldr	r3, [r6, #0]
 8001db8:	1d1a      	adds	r2, r3, #4
 8001dba:	6032      	str	r2, [r6, #0]
 8001dbc:	681e      	ldr	r6, [r3, #0]
 8001dbe:	6862      	ldr	r2, [r4, #4]
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4630      	mov	r0, r6
 8001dc4:	f7fe fa0c 	bl	80001e0 <memchr>
 8001dc8:	b108      	cbz	r0, 8001dce <_printf_i+0x1e6>
 8001dca:	1b80      	subs	r0, r0, r6
 8001dcc:	6060      	str	r0, [r4, #4]
 8001dce:	6863      	ldr	r3, [r4, #4]
 8001dd0:	6123      	str	r3, [r4, #16]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001dd8:	e7aa      	b.n	8001d30 <_printf_i+0x148>
 8001dda:	6923      	ldr	r3, [r4, #16]
 8001ddc:	4632      	mov	r2, r6
 8001dde:	4649      	mov	r1, r9
 8001de0:	4640      	mov	r0, r8
 8001de2:	47d0      	blx	sl
 8001de4:	3001      	adds	r0, #1
 8001de6:	d0ad      	beq.n	8001d44 <_printf_i+0x15c>
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	079b      	lsls	r3, r3, #30
 8001dec:	d413      	bmi.n	8001e16 <_printf_i+0x22e>
 8001dee:	68e0      	ldr	r0, [r4, #12]
 8001df0:	9b03      	ldr	r3, [sp, #12]
 8001df2:	4298      	cmp	r0, r3
 8001df4:	bfb8      	it	lt
 8001df6:	4618      	movlt	r0, r3
 8001df8:	e7a6      	b.n	8001d48 <_printf_i+0x160>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	4632      	mov	r2, r6
 8001dfe:	4649      	mov	r1, r9
 8001e00:	4640      	mov	r0, r8
 8001e02:	47d0      	blx	sl
 8001e04:	3001      	adds	r0, #1
 8001e06:	d09d      	beq.n	8001d44 <_printf_i+0x15c>
 8001e08:	3501      	adds	r5, #1
 8001e0a:	68e3      	ldr	r3, [r4, #12]
 8001e0c:	9903      	ldr	r1, [sp, #12]
 8001e0e:	1a5b      	subs	r3, r3, r1
 8001e10:	42ab      	cmp	r3, r5
 8001e12:	dcf2      	bgt.n	8001dfa <_printf_i+0x212>
 8001e14:	e7eb      	b.n	8001dee <_printf_i+0x206>
 8001e16:	2500      	movs	r5, #0
 8001e18:	f104 0619 	add.w	r6, r4, #25
 8001e1c:	e7f5      	b.n	8001e0a <_printf_i+0x222>
 8001e1e:	bf00      	nop
 8001e20:	0800214f 	.word	0x0800214f
 8001e24:	08002160 	.word	0x08002160

08001e28 <__sflush_r>:
 8001e28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e30:	0716      	lsls	r6, r2, #28
 8001e32:	4605      	mov	r5, r0
 8001e34:	460c      	mov	r4, r1
 8001e36:	d454      	bmi.n	8001ee2 <__sflush_r+0xba>
 8001e38:	684b      	ldr	r3, [r1, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	dc02      	bgt.n	8001e44 <__sflush_r+0x1c>
 8001e3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	dd48      	ble.n	8001ed6 <__sflush_r+0xae>
 8001e44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e46:	2e00      	cmp	r6, #0
 8001e48:	d045      	beq.n	8001ed6 <__sflush_r+0xae>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001e50:	682f      	ldr	r7, [r5, #0]
 8001e52:	6a21      	ldr	r1, [r4, #32]
 8001e54:	602b      	str	r3, [r5, #0]
 8001e56:	d030      	beq.n	8001eba <__sflush_r+0x92>
 8001e58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e5a:	89a3      	ldrh	r3, [r4, #12]
 8001e5c:	0759      	lsls	r1, r3, #29
 8001e5e:	d505      	bpl.n	8001e6c <__sflush_r+0x44>
 8001e60:	6863      	ldr	r3, [r4, #4]
 8001e62:	1ad2      	subs	r2, r2, r3
 8001e64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e66:	b10b      	cbz	r3, 8001e6c <__sflush_r+0x44>
 8001e68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e6a:	1ad2      	subs	r2, r2, r3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e70:	6a21      	ldr	r1, [r4, #32]
 8001e72:	4628      	mov	r0, r5
 8001e74:	47b0      	blx	r6
 8001e76:	1c43      	adds	r3, r0, #1
 8001e78:	89a3      	ldrh	r3, [r4, #12]
 8001e7a:	d106      	bne.n	8001e8a <__sflush_r+0x62>
 8001e7c:	6829      	ldr	r1, [r5, #0]
 8001e7e:	291d      	cmp	r1, #29
 8001e80:	d82b      	bhi.n	8001eda <__sflush_r+0xb2>
 8001e82:	4a2a      	ldr	r2, [pc, #168]	@ (8001f2c <__sflush_r+0x104>)
 8001e84:	410a      	asrs	r2, r1
 8001e86:	07d6      	lsls	r6, r2, #31
 8001e88:	d427      	bmi.n	8001eda <__sflush_r+0xb2>
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	6062      	str	r2, [r4, #4]
 8001e8e:	04d9      	lsls	r1, r3, #19
 8001e90:	6922      	ldr	r2, [r4, #16]
 8001e92:	6022      	str	r2, [r4, #0]
 8001e94:	d504      	bpl.n	8001ea0 <__sflush_r+0x78>
 8001e96:	1c42      	adds	r2, r0, #1
 8001e98:	d101      	bne.n	8001e9e <__sflush_r+0x76>
 8001e9a:	682b      	ldr	r3, [r5, #0]
 8001e9c:	b903      	cbnz	r3, 8001ea0 <__sflush_r+0x78>
 8001e9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ea0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ea2:	602f      	str	r7, [r5, #0]
 8001ea4:	b1b9      	cbz	r1, 8001ed6 <__sflush_r+0xae>
 8001ea6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001eaa:	4299      	cmp	r1, r3
 8001eac:	d002      	beq.n	8001eb4 <__sflush_r+0x8c>
 8001eae:	4628      	mov	r0, r5
 8001eb0:	f7ff fbf2 	bl	8001698 <_free_r>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	6363      	str	r3, [r4, #52]	@ 0x34
 8001eb8:	e00d      	b.n	8001ed6 <__sflush_r+0xae>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	4628      	mov	r0, r5
 8001ebe:	47b0      	blx	r6
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	1c50      	adds	r0, r2, #1
 8001ec4:	d1c9      	bne.n	8001e5a <__sflush_r+0x32>
 8001ec6:	682b      	ldr	r3, [r5, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0c6      	beq.n	8001e5a <__sflush_r+0x32>
 8001ecc:	2b1d      	cmp	r3, #29
 8001ece:	d001      	beq.n	8001ed4 <__sflush_r+0xac>
 8001ed0:	2b16      	cmp	r3, #22
 8001ed2:	d11e      	bne.n	8001f12 <__sflush_r+0xea>
 8001ed4:	602f      	str	r7, [r5, #0]
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	e022      	b.n	8001f20 <__sflush_r+0xf8>
 8001eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	e01b      	b.n	8001f1a <__sflush_r+0xf2>
 8001ee2:	690f      	ldr	r7, [r1, #16]
 8001ee4:	2f00      	cmp	r7, #0
 8001ee6:	d0f6      	beq.n	8001ed6 <__sflush_r+0xae>
 8001ee8:	0793      	lsls	r3, r2, #30
 8001eea:	680e      	ldr	r6, [r1, #0]
 8001eec:	bf08      	it	eq
 8001eee:	694b      	ldreq	r3, [r1, #20]
 8001ef0:	600f      	str	r7, [r1, #0]
 8001ef2:	bf18      	it	ne
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	eba6 0807 	sub.w	r8, r6, r7
 8001efa:	608b      	str	r3, [r1, #8]
 8001efc:	f1b8 0f00 	cmp.w	r8, #0
 8001f00:	dde9      	ble.n	8001ed6 <__sflush_r+0xae>
 8001f02:	6a21      	ldr	r1, [r4, #32]
 8001f04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001f06:	4643      	mov	r3, r8
 8001f08:	463a      	mov	r2, r7
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	47b0      	blx	r6
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	dc08      	bgt.n	8001f24 <__sflush_r+0xfc>
 8001f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f1a:	81a3      	strh	r3, [r4, #12]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f24:	4407      	add	r7, r0
 8001f26:	eba8 0800 	sub.w	r8, r8, r0
 8001f2a:	e7e7      	b.n	8001efc <__sflush_r+0xd4>
 8001f2c:	dfbffffe 	.word	0xdfbffffe

08001f30 <_fflush_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	690b      	ldr	r3, [r1, #16]
 8001f34:	4605      	mov	r5, r0
 8001f36:	460c      	mov	r4, r1
 8001f38:	b913      	cbnz	r3, 8001f40 <_fflush_r+0x10>
 8001f3a:	2500      	movs	r5, #0
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	bd38      	pop	{r3, r4, r5, pc}
 8001f40:	b118      	cbz	r0, 8001f4a <_fflush_r+0x1a>
 8001f42:	6a03      	ldr	r3, [r0, #32]
 8001f44:	b90b      	cbnz	r3, 8001f4a <_fflush_r+0x1a>
 8001f46:	f7ff f9ad 	bl	80012a4 <__sinit>
 8001f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f3      	beq.n	8001f3a <_fflush_r+0xa>
 8001f52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f54:	07d0      	lsls	r0, r2, #31
 8001f56:	d404      	bmi.n	8001f62 <_fflush_r+0x32>
 8001f58:	0599      	lsls	r1, r3, #22
 8001f5a:	d402      	bmi.n	8001f62 <_fflush_r+0x32>
 8001f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f5e:	f7ff fb98 	bl	8001692 <__retarget_lock_acquire_recursive>
 8001f62:	4628      	mov	r0, r5
 8001f64:	4621      	mov	r1, r4
 8001f66:	f7ff ff5f 	bl	8001e28 <__sflush_r>
 8001f6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f6c:	07da      	lsls	r2, r3, #31
 8001f6e:	4605      	mov	r5, r0
 8001f70:	d4e4      	bmi.n	8001f3c <_fflush_r+0xc>
 8001f72:	89a3      	ldrh	r3, [r4, #12]
 8001f74:	059b      	lsls	r3, r3, #22
 8001f76:	d4e1      	bmi.n	8001f3c <_fflush_r+0xc>
 8001f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f7a:	f7ff fb8b 	bl	8001694 <__retarget_lock_release_recursive>
 8001f7e:	e7dd      	b.n	8001f3c <_fflush_r+0xc>

08001f80 <__swhatbuf_r>:
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	460c      	mov	r4, r1
 8001f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f88:	2900      	cmp	r1, #0
 8001f8a:	b096      	sub	sp, #88	@ 0x58
 8001f8c:	4615      	mov	r5, r2
 8001f8e:	461e      	mov	r6, r3
 8001f90:	da0d      	bge.n	8001fae <__swhatbuf_r+0x2e>
 8001f92:	89a3      	ldrh	r3, [r4, #12]
 8001f94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f98:	f04f 0100 	mov.w	r1, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2340      	movne	r3, #64	@ 0x40
 8001fa0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	6031      	str	r1, [r6, #0]
 8001fa8:	602b      	str	r3, [r5, #0]
 8001faa:	b016      	add	sp, #88	@ 0x58
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
 8001fae:	466a      	mov	r2, sp
 8001fb0:	f000 f848 	bl	8002044 <_fstat_r>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	dbec      	blt.n	8001f92 <__swhatbuf_r+0x12>
 8001fb8:	9901      	ldr	r1, [sp, #4]
 8001fba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001fbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001fc2:	4259      	negs	r1, r3
 8001fc4:	4159      	adcs	r1, r3
 8001fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fca:	e7eb      	b.n	8001fa4 <__swhatbuf_r+0x24>

08001fcc <__smakebuf_r>:
 8001fcc:	898b      	ldrh	r3, [r1, #12]
 8001fce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fd0:	079d      	lsls	r5, r3, #30
 8001fd2:	4606      	mov	r6, r0
 8001fd4:	460c      	mov	r4, r1
 8001fd6:	d507      	bpl.n	8001fe8 <__smakebuf_r+0x1c>
 8001fd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001fdc:	6023      	str	r3, [r4, #0]
 8001fde:	6123      	str	r3, [r4, #16]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	6163      	str	r3, [r4, #20]
 8001fe4:	b003      	add	sp, #12
 8001fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe8:	ab01      	add	r3, sp, #4
 8001fea:	466a      	mov	r2, sp
 8001fec:	f7ff ffc8 	bl	8001f80 <__swhatbuf_r>
 8001ff0:	9f00      	ldr	r7, [sp, #0]
 8001ff2:	4605      	mov	r5, r0
 8001ff4:	4639      	mov	r1, r7
 8001ff6:	4630      	mov	r0, r6
 8001ff8:	f7ff fbba 	bl	8001770 <_malloc_r>
 8001ffc:	b948      	cbnz	r0, 8002012 <__smakebuf_r+0x46>
 8001ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002002:	059a      	lsls	r2, r3, #22
 8002004:	d4ee      	bmi.n	8001fe4 <__smakebuf_r+0x18>
 8002006:	f023 0303 	bic.w	r3, r3, #3
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	81a3      	strh	r3, [r4, #12]
 8002010:	e7e2      	b.n	8001fd8 <__smakebuf_r+0xc>
 8002012:	89a3      	ldrh	r3, [r4, #12]
 8002014:	6020      	str	r0, [r4, #0]
 8002016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800201a:	81a3      	strh	r3, [r4, #12]
 800201c:	9b01      	ldr	r3, [sp, #4]
 800201e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002022:	b15b      	cbz	r3, 800203c <__smakebuf_r+0x70>
 8002024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002028:	4630      	mov	r0, r6
 800202a:	f000 f81d 	bl	8002068 <_isatty_r>
 800202e:	b128      	cbz	r0, 800203c <__smakebuf_r+0x70>
 8002030:	89a3      	ldrh	r3, [r4, #12]
 8002032:	f023 0303 	bic.w	r3, r3, #3
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	81a3      	strh	r3, [r4, #12]
 800203c:	89a3      	ldrh	r3, [r4, #12]
 800203e:	431d      	orrs	r5, r3
 8002040:	81a5      	strh	r5, [r4, #12]
 8002042:	e7cf      	b.n	8001fe4 <__smakebuf_r+0x18>

08002044 <_fstat_r>:
 8002044:	b538      	push	{r3, r4, r5, lr}
 8002046:	4d07      	ldr	r5, [pc, #28]	@ (8002064 <_fstat_r+0x20>)
 8002048:	2300      	movs	r3, #0
 800204a:	4604      	mov	r4, r0
 800204c:	4608      	mov	r0, r1
 800204e:	4611      	mov	r1, r2
 8002050:	602b      	str	r3, [r5, #0]
 8002052:	f7ff f812 	bl	800107a <_fstat>
 8002056:	1c43      	adds	r3, r0, #1
 8002058:	d102      	bne.n	8002060 <_fstat_r+0x1c>
 800205a:	682b      	ldr	r3, [r5, #0]
 800205c:	b103      	cbz	r3, 8002060 <_fstat_r+0x1c>
 800205e:	6023      	str	r3, [r4, #0]
 8002060:	bd38      	pop	{r3, r4, r5, pc}
 8002062:	bf00      	nop
 8002064:	200001bc 	.word	0x200001bc

08002068 <_isatty_r>:
 8002068:	b538      	push	{r3, r4, r5, lr}
 800206a:	4d06      	ldr	r5, [pc, #24]	@ (8002084 <_isatty_r+0x1c>)
 800206c:	2300      	movs	r3, #0
 800206e:	4604      	mov	r4, r0
 8002070:	4608      	mov	r0, r1
 8002072:	602b      	str	r3, [r5, #0]
 8002074:	f7ff f811 	bl	800109a <_isatty>
 8002078:	1c43      	adds	r3, r0, #1
 800207a:	d102      	bne.n	8002082 <_isatty_r+0x1a>
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	b103      	cbz	r3, 8002082 <_isatty_r+0x1a>
 8002080:	6023      	str	r3, [r4, #0]
 8002082:	bd38      	pop	{r3, r4, r5, pc}
 8002084:	200001bc 	.word	0x200001bc

08002088 <_sbrk_r>:
 8002088:	b538      	push	{r3, r4, r5, lr}
 800208a:	4d06      	ldr	r5, [pc, #24]	@ (80020a4 <_sbrk_r+0x1c>)
 800208c:	2300      	movs	r3, #0
 800208e:	4604      	mov	r4, r0
 8002090:	4608      	mov	r0, r1
 8002092:	602b      	str	r3, [r5, #0]
 8002094:	f7ff f81a 	bl	80010cc <_sbrk>
 8002098:	1c43      	adds	r3, r0, #1
 800209a:	d102      	bne.n	80020a2 <_sbrk_r+0x1a>
 800209c:	682b      	ldr	r3, [r5, #0]
 800209e:	b103      	cbz	r3, 80020a2 <_sbrk_r+0x1a>
 80020a0:	6023      	str	r3, [r4, #0]
 80020a2:	bd38      	pop	{r3, r4, r5, pc}
 80020a4:	200001bc 	.word	0x200001bc

080020a8 <_init>:
 80020a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020aa:	bf00      	nop
 80020ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ae:	bc08      	pop	{r3}
 80020b0:	469e      	mov	lr, r3
 80020b2:	4770      	bx	lr

080020b4 <_fini>:
 80020b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b6:	bf00      	nop
 80020b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ba:	bc08      	pop	{r3}
 80020bc:	469e      	mov	lr, r3
 80020be:	4770      	bx	lr
