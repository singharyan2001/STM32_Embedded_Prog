
A01_GPIO_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000980  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b18  08000b20  00001b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b18  08000b18  00001b20  2**0
                  CONTENTS
  4 .ARM          00000000  08000b18  08000b18  00001b20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b18  08000b20  00001b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b18  08000b18  00001b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b1c  08000b1c  00001b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08000b20  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000b20  00002070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b60  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000037f  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000100  00000000  00000000  00002a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000b7  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002334  00000000  00000000  00002be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011ff  00000000  00000000  00004f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000895c  00000000  00000000  0000611a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000ea76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000035c  00000000  00000000  0000eabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0000ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000b00 	.word	0x08000b00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000b00 	.word	0x08000b00

080001d8 <GPIOx_PClkControl>:
#include "GPIO_Driver.h"

/*
 * GPIO Peripheral - GPIO Peripheral Clock Control API Definition
 */
void GPIOx_PClkControl(GPIOx_RegDef_t *pGPIOx_Base, uint8_t EN_DI){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	70fb      	strb	r3, [r7, #3]
	if(EN_DI == CLK_EN){
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d141      	bne.n	800026e <GPIOx_PClkControl+0x96>
		if(pGPIOx_Base == GPIOA){
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a45      	ldr	r2, [pc, #276]	@ (8000304 <GPIOx_PClkControl+0x12c>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIOx_PClkControl+0x28>
			GPIOA_PCLK_EN();
 80001f2:	4b45      	ldr	r3, [pc, #276]	@ (8000308 <GPIOx_PClkControl+0x130>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f6:	4a44      	ldr	r2, [pc, #272]	@ (8000308 <GPIOx_PClkControl+0x130>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOH_PCLK_DI();
		}
		else{
		}
	}
}
 80001fe:	e07a      	b.n	80002f6 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOB){
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a42      	ldr	r2, [pc, #264]	@ (800030c <GPIOx_PClkControl+0x134>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIOx_PClkControl+0x3e>
			GPIOB_PCLK_EN();
 8000208:	4b3f      	ldr	r3, [pc, #252]	@ (8000308 <GPIOx_PClkControl+0x130>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a3e      	ldr	r2, [pc, #248]	@ (8000308 <GPIOx_PClkControl+0x130>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000214:	e06f      	b.n	80002f6 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOC){
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a3d      	ldr	r2, [pc, #244]	@ (8000310 <GPIOx_PClkControl+0x138>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIOx_PClkControl+0x54>
			GPIOC_PCLK_EN();
 800021e:	4b3a      	ldr	r3, [pc, #232]	@ (8000308 <GPIOx_PClkControl+0x130>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000222:	4a39      	ldr	r2, [pc, #228]	@ (8000308 <GPIOx_PClkControl+0x130>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800022a:	e064      	b.n	80002f6 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOD){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a39      	ldr	r2, [pc, #228]	@ (8000314 <GPIOx_PClkControl+0x13c>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIOx_PClkControl+0x6a>
			GPIOD_PCLK_EN();
 8000234:	4b34      	ldr	r3, [pc, #208]	@ (8000308 <GPIOx_PClkControl+0x130>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000238:	4a33      	ldr	r2, [pc, #204]	@ (8000308 <GPIOx_PClkControl+0x130>)
 800023a:	f043 0308 	orr.w	r3, r3, #8
 800023e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000240:	e059      	b.n	80002f6 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOE){
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a34      	ldr	r2, [pc, #208]	@ (8000318 <GPIOx_PClkControl+0x140>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIOx_PClkControl+0x80>
			GPIOE_PCLK_EN();
 800024a:	4b2f      	ldr	r3, [pc, #188]	@ (8000308 <GPIOx_PClkControl+0x130>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024e:	4a2e      	ldr	r2, [pc, #184]	@ (8000308 <GPIOx_PClkControl+0x130>)
 8000250:	f043 0310 	orr.w	r3, r3, #16
 8000254:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000256:	e04e      	b.n	80002f6 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOH){
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a30      	ldr	r2, [pc, #192]	@ (800031c <GPIOx_PClkControl+0x144>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d14a      	bne.n	80002f6 <GPIOx_PClkControl+0x11e>
			GPIOH_PCLK_EN();
 8000260:	4b29      	ldr	r3, [pc, #164]	@ (8000308 <GPIOx_PClkControl+0x130>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000264:	4a28      	ldr	r2, [pc, #160]	@ (8000308 <GPIOx_PClkControl+0x130>)
 8000266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800026a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800026c:	e043      	b.n	80002f6 <GPIOx_PClkControl+0x11e>
	else if(EN_DI == CLK_DI){
 800026e:	78fb      	ldrb	r3, [r7, #3]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d140      	bne.n	80002f6 <GPIOx_PClkControl+0x11e>
		if(pGPIOx_Base == GPIOA){
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a23      	ldr	r2, [pc, #140]	@ (8000304 <GPIOx_PClkControl+0x12c>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d106      	bne.n	800028a <GPIOx_PClkControl+0xb2>
			GPIOA_PCLK_DI();
 800027c:	4b22      	ldr	r3, [pc, #136]	@ (8000308 <GPIOx_PClkControl+0x130>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000280:	4a21      	ldr	r2, [pc, #132]	@ (8000308 <GPIOx_PClkControl+0x130>)
 8000282:	f023 0301 	bic.w	r3, r3, #1
 8000286:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000288:	e035      	b.n	80002f6 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOB){
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a1f      	ldr	r2, [pc, #124]	@ (800030c <GPIOx_PClkControl+0x134>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d106      	bne.n	80002a0 <GPIOx_PClkControl+0xc8>
			GPIOB_PCLK_DI();
 8000292:	4b1d      	ldr	r3, [pc, #116]	@ (8000308 <GPIOx_PClkControl+0x130>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000296:	4a1c      	ldr	r2, [pc, #112]	@ (8000308 <GPIOx_PClkControl+0x130>)
 8000298:	f023 0302 	bic.w	r3, r3, #2
 800029c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800029e:	e02a      	b.n	80002f6 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOC){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000310 <GPIOx_PClkControl+0x138>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d106      	bne.n	80002b6 <GPIOx_PClkControl+0xde>
			GPIOC_PCLK_DI();
 80002a8:	4b17      	ldr	r3, [pc, #92]	@ (8000308 <GPIOx_PClkControl+0x130>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ac:	4a16      	ldr	r2, [pc, #88]	@ (8000308 <GPIOx_PClkControl+0x130>)
 80002ae:	f023 0304 	bic.w	r3, r3, #4
 80002b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002b4:	e01f      	b.n	80002f6 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOD){
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a16      	ldr	r2, [pc, #88]	@ (8000314 <GPIOx_PClkControl+0x13c>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIOx_PClkControl+0xf4>
			GPIOD_PCLK_DI();
 80002be:	4b12      	ldr	r3, [pc, #72]	@ (8000308 <GPIOx_PClkControl+0x130>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c2:	4a11      	ldr	r2, [pc, #68]	@ (8000308 <GPIOx_PClkControl+0x130>)
 80002c4:	f023 0308 	bic.w	r3, r3, #8
 80002c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ca:	e014      	b.n	80002f6 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOE){
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a12      	ldr	r2, [pc, #72]	@ (8000318 <GPIOx_PClkControl+0x140>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d106      	bne.n	80002e2 <GPIOx_PClkControl+0x10a>
			GPIOE_PCLK_DI();
 80002d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <GPIOx_PClkControl+0x130>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000308 <GPIOx_PClkControl+0x130>)
 80002da:	f023 0310 	bic.w	r3, r3, #16
 80002de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002e0:	e009      	b.n	80002f6 <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOH){
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a0d      	ldr	r2, [pc, #52]	@ (800031c <GPIOx_PClkControl+0x144>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d105      	bne.n	80002f6 <GPIOx_PClkControl+0x11e>
			GPIOH_PCLK_DI();
 80002ea:	4b07      	ldr	r3, [pc, #28]	@ (8000308 <GPIOx_PClkControl+0x130>)
 80002ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ee:	4a06      	ldr	r2, [pc, #24]	@ (8000308 <GPIOx_PClkControl+0x130>)
 80002f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40020000 	.word	0x40020000
 8000308:	40023800 	.word	0x40023800
 800030c:	40020400 	.word	0x40020400
 8000310:	40020800 	.word	0x40020800
 8000314:	40020c00 	.word	0x40020c00
 8000318:	40021000 	.word	0x40021000
 800031c:	40021c00 	.word	0x40021c00

08000320 <GPIOx_Init>:


/*
 * GPIO Peripheral - GPIO Initialization API Definition
 */
void GPIOx_Init(GPIOx_Handle_t *pGPIOHandle){
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	//Initialize variables
	uint8_t bit_pos = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_index = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	73bb      	strb	r3, [r7, #14]
	uint8_t temp = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	737b      	strb	r3, [r7, #13]
	uint8_t port_code = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	733b      	strb	r3, [r7, #12]

	/*Non Interrupt mode configurations*/
	if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode <= GPIO_MODE_ANALOG){
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	795b      	ldrb	r3, [r3, #5]
 800033c:	2b03      	cmp	r3, #3
 800033e:	f200 80ca 	bhi.w	80004d6 <GPIOx_Init+0x1b6>
		//1. Set GPIO Pin Mode
		bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber * 2;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	791b      	ldrb	r3, [r3, #4]
 8000346:	005b      	lsls	r3, r3, #1
 8000348:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx_Base->MODER &= ~(0x3 << bit_pos);		//Clear the Bits
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	2103      	movs	r1, #3
 8000354:	fa01 f303 	lsl.w	r3, r1, r3
 8000358:	43db      	mvns	r3, r3
 800035a:	4619      	mov	r1, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	400a      	ands	r2, r1
 8000362:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx_Base->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode << bit_pos);		//Set Bits
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	795b      	ldrb	r3, [r3, #5]
 800036e:	4619      	mov	r1, r3
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	4619      	mov	r1, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	430a      	orrs	r2, r1
 800037e:	601a      	str	r2, [r3, #0]
		bit_pos = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	73fb      	strb	r3, [r7, #15]

		//2. Set GPIO Pin Output Type
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_OUTPUT){
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	795b      	ldrb	r3, [r3, #5]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d11f      	bne.n	80003cc <GPIOx_Init+0xac>
			bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	791b      	ldrb	r3, [r3, #4]
 8000390:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx_Base->OTYPER &= ~(0x1 << bit_pos);	//Clear the Bits
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	685a      	ldr	r2, [r3, #4]
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	2101      	movs	r1, #1
 800039c:	fa01 f303 	lsl.w	r3, r1, r3
 80003a0:	43db      	mvns	r3, r3
 80003a2:	4619      	mov	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	400a      	ands	r2, r1
 80003aa:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx_Base->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinOPType << bit_pos);	//Set Bits
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	685a      	ldr	r2, [r3, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	79db      	ldrb	r3, [r3, #7]
 80003b6:	4619      	mov	r1, r3
 80003b8:	7bfb      	ldrb	r3, [r7, #15]
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	4619      	mov	r1, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	430a      	orrs	r2, r1
 80003c6:	605a      	str	r2, [r3, #4]
			bit_pos = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	73fb      	strb	r3, [r7, #15]
		}

		//3. Set GPIO Pin Speed
		bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber * 2;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	791b      	ldrb	r3, [r3, #4]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx_Base->OSPEEDR &= ~(0x3 << bit_pos);	//Clear the Bits
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	689a      	ldr	r2, [r3, #8]
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2103      	movs	r1, #3
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	43db      	mvns	r3, r3
 80003e4:	4619      	mov	r1, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	400a      	ands	r2, r1
 80003ec:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx_Base->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinSpeed << bit_pos);	//Set Bits
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	689a      	ldr	r2, [r3, #8]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	799b      	ldrb	r3, [r3, #6]
 80003f8:	4619      	mov	r1, r3
 80003fa:	7bfb      	ldrb	r3, [r7, #15]
 80003fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000400:	4619      	mov	r1, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	430a      	orrs	r2, r1
 8000408:	609a      	str	r2, [r3, #8]
		bit_pos = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	73fb      	strb	r3, [r7, #15]

		//4. Set GPIO Pin Pull Up/Down Register
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INPUT){
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	795b      	ldrb	r3, [r3, #5]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d120      	bne.n	8000458 <GPIOx_Init+0x138>
			bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber * 2;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	791b      	ldrb	r3, [r3, #4]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx_Base->PUPDR &= ~(0x3 << bit_pos);	//Clear the Bits
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	68da      	ldr	r2, [r3, #12]
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	2103      	movs	r1, #3
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	4619      	mov	r1, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	400a      	ands	r2, r1
 8000436:	60da      	str	r2, [r3, #12]
			pGPIOHandle->pGPIOx_Base->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinPUPDControl << bit_pos);	//Set Bits
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	68da      	ldr	r2, [r3, #12]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	7a1b      	ldrb	r3, [r3, #8]
 8000442:	4619      	mov	r1, r3
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	fa01 f303 	lsl.w	r3, r1, r3
 800044a:	4619      	mov	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	430a      	orrs	r2, r1
 8000452:	60da      	str	r2, [r3, #12]
			bit_pos = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	73fb      	strb	r3, [r7, #15]
		}

		//5. Set GPIO Pin Alternate Functionality Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_ALTERNATE){
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b02      	cmp	r3, #2
 800045e:	f040 80eb 	bne.w	8000638 <GPIOx_Init+0x318>
			//Configure the Alternate functionality registers
			reg_index = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber % 8);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	791b      	ldrb	r3, [r3, #4]
 8000466:	f003 0307 	and.w	r3, r3, #7
 800046a:	73bb      	strb	r3, [r7, #14]
			temp = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber / 8);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	08db      	lsrs	r3, r3, #3
 8000472:	737b      	strb	r3, [r7, #13]
			bit_pos = (temp * 4);
 8000474:	7b7b      	ldrb	r3, [r7, #13]
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx_Base->AFR[reg_index] &= ~(0xf << bit_pos);	//Clear the Bits
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	7bba      	ldrb	r2, [r7, #14]
 8000480:	3208      	adds	r2, #8
 8000482:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	220f      	movs	r2, #15
 800048a:	fa02 f303 	lsl.w	r3, r2, r3
 800048e:	43db      	mvns	r3, r3
 8000490:	4618      	mov	r0, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	7bba      	ldrb	r2, [r7, #14]
 8000498:	4001      	ands	r1, r0
 800049a:	3208      	adds	r2, #8
 800049c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx_Base->AFR[reg_index] |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinAltFunMode << bit_pos);	//Set Bits
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	7bba      	ldrb	r2, [r7, #14]
 80004a6:	3208      	adds	r2, #8
 80004a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	7a5b      	ldrb	r3, [r3, #9]
 80004b0:	461a      	mov	r2, r3
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	4618      	mov	r0, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	7bba      	ldrb	r2, [r7, #14]
 80004c0:	4301      	orrs	r1, r0
 80004c2:	3208      	adds	r2, #8
 80004c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			reg_index = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	73bb      	strb	r3, [r7, #14]
			temp = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	737b      	strb	r3, [r7, #13]
			bit_pos = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	73fb      	strb	r3, [r7, #15]
		bit_pos = 0;

		//3. Enable the EXTI Interrupt delivery using IMR
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
	}
}
 80004d4:	e0b0      	b.n	8000638 <GPIOx_Init+0x318>
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INT_RISING){
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	795b      	ldrb	r3, [r3, #5]
 80004da:	2b05      	cmp	r3, #5
 80004dc:	d117      	bne.n	800050e <GPIOx_Init+0x1ee>
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 80004de:	4b59      	ldr	r3, [pc, #356]	@ (8000644 <GPIOx_Init+0x324>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	7912      	ldrb	r2, [r2, #4]
 80004e6:	4611      	mov	r1, r2
 80004e8:	2201      	movs	r2, #1
 80004ea:	408a      	lsls	r2, r1
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a55      	ldr	r2, [pc, #340]	@ (8000644 <GPIOx_Init+0x324>)
 80004f0:	430b      	orrs	r3, r1
 80004f2:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 80004f4:	4b53      	ldr	r3, [pc, #332]	@ (8000644 <GPIOx_Init+0x324>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	7912      	ldrb	r2, [r2, #4]
 80004fc:	4611      	mov	r1, r2
 80004fe:	2201      	movs	r2, #1
 8000500:	408a      	lsls	r2, r1
 8000502:	43d2      	mvns	r2, r2
 8000504:	4611      	mov	r1, r2
 8000506:	4a4f      	ldr	r2, [pc, #316]	@ (8000644 <GPIOx_Init+0x324>)
 8000508:	400b      	ands	r3, r1
 800050a:	60d3      	str	r3, [r2, #12]
 800050c:	e035      	b.n	800057a <GPIOx_Init+0x25a>
		else if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INT_FALLING){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	795b      	ldrb	r3, [r3, #5]
 8000512:	2b04      	cmp	r3, #4
 8000514:	d117      	bne.n	8000546 <GPIOx_Init+0x226>
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 8000516:	4b4b      	ldr	r3, [pc, #300]	@ (8000644 <GPIOx_Init+0x324>)
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	7912      	ldrb	r2, [r2, #4]
 800051e:	4611      	mov	r1, r2
 8000520:	2201      	movs	r2, #1
 8000522:	408a      	lsls	r2, r1
 8000524:	4611      	mov	r1, r2
 8000526:	4a47      	ldr	r2, [pc, #284]	@ (8000644 <GPIOx_Init+0x324>)
 8000528:	430b      	orrs	r3, r1
 800052a:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 800052c:	4b45      	ldr	r3, [pc, #276]	@ (8000644 <GPIOx_Init+0x324>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	7912      	ldrb	r2, [r2, #4]
 8000534:	4611      	mov	r1, r2
 8000536:	2201      	movs	r2, #1
 8000538:	408a      	lsls	r2, r1
 800053a:	43d2      	mvns	r2, r2
 800053c:	4611      	mov	r1, r2
 800053e:	4a41      	ldr	r2, [pc, #260]	@ (8000644 <GPIOx_Init+0x324>)
 8000540:	400b      	ands	r3, r1
 8000542:	6093      	str	r3, [r2, #8]
 8000544:	e019      	b.n	800057a <GPIOx_Init+0x25a>
		else if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INT_BOTH){
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	795b      	ldrb	r3, [r3, #5]
 800054a:	2b06      	cmp	r3, #6
 800054c:	d115      	bne.n	800057a <GPIOx_Init+0x25a>
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 800054e:	4b3d      	ldr	r3, [pc, #244]	@ (8000644 <GPIOx_Init+0x324>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	7912      	ldrb	r2, [r2, #4]
 8000556:	4611      	mov	r1, r2
 8000558:	2201      	movs	r2, #1
 800055a:	408a      	lsls	r2, r1
 800055c:	4611      	mov	r1, r2
 800055e:	4a39      	ldr	r2, [pc, #228]	@ (8000644 <GPIOx_Init+0x324>)
 8000560:	430b      	orrs	r3, r1
 8000562:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 8000564:	4b37      	ldr	r3, [pc, #220]	@ (8000644 <GPIOx_Init+0x324>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	7912      	ldrb	r2, [r2, #4]
 800056c:	4611      	mov	r1, r2
 800056e:	2201      	movs	r2, #1
 8000570:	408a      	lsls	r2, r1
 8000572:	4611      	mov	r1, r2
 8000574:	4a33      	ldr	r2, [pc, #204]	@ (8000644 <GPIOx_Init+0x324>)
 8000576:	430b      	orrs	r3, r1
 8000578:	60d3      	str	r3, [r2, #12]
		reg_index = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber / 4);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	089b      	lsrs	r3, r3, #2
 8000580:	73bb      	strb	r3, [r7, #14]
		temp = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber % 4);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	737b      	strb	r3, [r7, #13]
		bit_pos = (temp * 4);
 800058c:	7b7b      	ldrb	r3, [r7, #13]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	73fb      	strb	r3, [r7, #15]
		port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx_Base);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a2c      	ldr	r2, [pc, #176]	@ (8000648 <GPIOx_Init+0x328>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d024      	beq.n	80005e6 <GPIOx_Init+0x2c6>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a2a      	ldr	r2, [pc, #168]	@ (800064c <GPIOx_Init+0x32c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d01d      	beq.n	80005e2 <GPIOx_Init+0x2c2>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a29      	ldr	r2, [pc, #164]	@ (8000650 <GPIOx_Init+0x330>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d016      	beq.n	80005de <GPIOx_Init+0x2be>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a27      	ldr	r2, [pc, #156]	@ (8000654 <GPIOx_Init+0x334>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d00f      	beq.n	80005da <GPIOx_Init+0x2ba>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a26      	ldr	r2, [pc, #152]	@ (8000658 <GPIOx_Init+0x338>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d008      	beq.n	80005d6 <GPIOx_Init+0x2b6>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a24      	ldr	r2, [pc, #144]	@ (800065c <GPIOx_Init+0x33c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d101      	bne.n	80005d2 <GPIOx_Init+0x2b2>
 80005ce:	2307      	movs	r3, #7
 80005d0:	e00a      	b.n	80005e8 <GPIOx_Init+0x2c8>
 80005d2:	2300      	movs	r3, #0
 80005d4:	e008      	b.n	80005e8 <GPIOx_Init+0x2c8>
 80005d6:	2304      	movs	r3, #4
 80005d8:	e006      	b.n	80005e8 <GPIOx_Init+0x2c8>
 80005da:	2303      	movs	r3, #3
 80005dc:	e004      	b.n	80005e8 <GPIOx_Init+0x2c8>
 80005de:	2302      	movs	r3, #2
 80005e0:	e002      	b.n	80005e8 <GPIOx_Init+0x2c8>
 80005e2:	2301      	movs	r3, #1
 80005e4:	e000      	b.n	80005e8 <GPIOx_Init+0x2c8>
 80005e6:	2300      	movs	r3, #0
 80005e8:	733b      	strb	r3, [r7, #12]
		SYSCFG_PCLK_EN();
 80005ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <GPIOx_Init+0x340>)
 80005ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000660 <GPIOx_Init+0x340>)
 80005f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f4:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[reg_index] |= (port_code << bit_pos);
 80005f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000664 <GPIOx_Init+0x344>)
 80005f8:	7bbb      	ldrb	r3, [r7, #14]
 80005fa:	3302      	adds	r3, #2
 80005fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000600:	7b39      	ldrb	r1, [r7, #12]
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	fa01 f303 	lsl.w	r3, r1, r3
 8000608:	4618      	mov	r0, r3
 800060a:	4916      	ldr	r1, [pc, #88]	@ (8000664 <GPIOx_Init+0x344>)
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	4302      	orrs	r2, r0
 8000610:	3302      	adds	r3, #2
 8000612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		reg_index = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	73bb      	strb	r3, [r7, #14]
		temp = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	737b      	strb	r3, [r7, #13]
		bit_pos = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 8000622:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <GPIOx_Init+0x324>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	7912      	ldrb	r2, [r2, #4]
 800062a:	4611      	mov	r1, r2
 800062c:	2201      	movs	r2, #1
 800062e:	408a      	lsls	r2, r1
 8000630:	4611      	mov	r1, r2
 8000632:	4a04      	ldr	r2, [pc, #16]	@ (8000644 <GPIOx_Init+0x324>)
 8000634:	430b      	orrs	r3, r1
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	40013c00 	.word	0x40013c00
 8000648:	40020000 	.word	0x40020000
 800064c:	40020400 	.word	0x40020400
 8000650:	40020800 	.word	0x40020800
 8000654:	40020c00 	.word	0x40020c00
 8000658:	40021000 	.word	0x40021000
 800065c:	40021c00 	.word	0x40021c00
 8000660:	40023800 	.word	0x40023800
 8000664:	40013800 	.word	0x40013800

08000668 <GPIO_ToggleOutputPin>:


/*
 * GPIO Peripheral - GPIO Toggle API Definition
 */
void GPIO_ToggleOutputPin(GPIOx_RegDef_t *pGPIOx_Base, uint8_t GPIO_Pin){
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
	pGPIOx_Base->ODR ^= (1 << GPIO_Pin);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	78fa      	ldrb	r2, [r7, #3]
 800067a:	2101      	movs	r1, #1
 800067c:	fa01 f202 	lsl.w	r2, r1, r2
 8000680:	405a      	eors	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	615a      	str	r2, [r3, #20]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <GPIO_IRQ_INT_Config>:
/*
 * GPIO Peripheral - IRQ API Definitions
 */


void GPIO_IRQ_INT_Config(uint8_t IRQNumber, uint8_t EN_DI){
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	460a      	mov	r2, r1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	4613      	mov	r3, r2
 80006a2:	71bb      	strb	r3, [r7, #6]
	uint8_t bit_pos = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]

	/*1. Enable/Disable Interrupts */
	if(EN_DI == ENABLE){
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d137      	bne.n	800071e <GPIO_IRQ_INT_Config+0x8a>
		if(IRQNumber <= 31){
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b1f      	cmp	r3, #31
 80006b2:	d80a      	bhi.n	80006ca <GPIO_IRQ_INT_Config+0x36>
			//To Program ISER0 Register
			*NVIC_ICER0 |= (1 << IRQNumber);
 80006b4:	4b39      	ldr	r3, [pc, #228]	@ (800079c <GPIO_IRQ_INT_Config+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	79fa      	ldrb	r2, [r7, #7]
 80006ba:	2101      	movs	r1, #1
 80006bc:	fa01 f202 	lsl.w	r2, r1, r2
 80006c0:	4611      	mov	r1, r2
 80006c2:	4a36      	ldr	r2, [pc, #216]	@ (800079c <GPIO_IRQ_INT_Config+0x108>)
 80006c4:	430b      	orrs	r3, r1
 80006c6:	6013      	str	r3, [r2, #0]
			//To Program ICER2 Register
			bit_pos = IRQNumber % 32;
			*NVIC_ICER2 |= (1 << bit_pos);
		}
	}
}
 80006c8:	e061      	b.n	800078e <GPIO_IRQ_INT_Config+0xfa>
		else if(IRQNumber > 31 && IRQNumber < 64){
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b1f      	cmp	r3, #31
 80006ce:	d911      	bls.n	80006f4 <GPIO_IRQ_INT_Config+0x60>
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80006d4:	d80e      	bhi.n	80006f4 <GPIO_IRQ_INT_Config+0x60>
			bit_pos = IRQNumber % 32;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f003 031f 	and.w	r3, r3, #31
 80006dc:	73fb      	strb	r3, [r7, #15]
			*NVIC_ISER1 |= (1 << bit_pos);
 80006de:	4b30      	ldr	r3, [pc, #192]	@ (80007a0 <GPIO_IRQ_INT_Config+0x10c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	7bfa      	ldrb	r2, [r7, #15]
 80006e4:	2101      	movs	r1, #1
 80006e6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a2c      	ldr	r2, [pc, #176]	@ (80007a0 <GPIO_IRQ_INT_Config+0x10c>)
 80006ee:	430b      	orrs	r3, r1
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e04c      	b.n	800078e <GPIO_IRQ_INT_Config+0xfa>
		else if(IRQNumber >= 64 && IRQNumber < 92){
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80006f8:	d949      	bls.n	800078e <GPIO_IRQ_INT_Config+0xfa>
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b5b      	cmp	r3, #91	@ 0x5b
 80006fe:	d846      	bhi.n	800078e <GPIO_IRQ_INT_Config+0xfa>
			bit_pos = IRQNumber % 32;
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 031f 	and.w	r3, r3, #31
 8000706:	73fb      	strb	r3, [r7, #15]
			*NVIC_ISER2 |= (1 << bit_pos);
 8000708:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <GPIO_IRQ_INT_Config+0x110>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	7bfa      	ldrb	r2, [r7, #15]
 800070e:	2101      	movs	r1, #1
 8000710:	fa01 f202 	lsl.w	r2, r1, r2
 8000714:	4611      	mov	r1, r2
 8000716:	4a23      	ldr	r2, [pc, #140]	@ (80007a4 <GPIO_IRQ_INT_Config+0x110>)
 8000718:	430b      	orrs	r3, r1
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	e037      	b.n	800078e <GPIO_IRQ_INT_Config+0xfa>
		if(IRQNumber <= 31){
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b1f      	cmp	r3, #31
 8000722:	d80a      	bhi.n	800073a <GPIO_IRQ_INT_Config+0xa6>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000724:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <GPIO_IRQ_INT_Config+0x108>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	79fa      	ldrb	r2, [r7, #7]
 800072a:	2101      	movs	r1, #1
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	4611      	mov	r1, r2
 8000732:	4a1a      	ldr	r2, [pc, #104]	@ (800079c <GPIO_IRQ_INT_Config+0x108>)
 8000734:	430b      	orrs	r3, r1
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	e029      	b.n	800078e <GPIO_IRQ_INT_Config+0xfa>
		else if(IRQNumber > 31 && IRQNumber < 64){
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b1f      	cmp	r3, #31
 800073e:	d911      	bls.n	8000764 <GPIO_IRQ_INT_Config+0xd0>
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b3f      	cmp	r3, #63	@ 0x3f
 8000744:	d80e      	bhi.n	8000764 <GPIO_IRQ_INT_Config+0xd0>
			bit_pos = IRQNumber % 32;
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f003 031f 	and.w	r3, r3, #31
 800074c:	73fb      	strb	r3, [r7, #15]
			*NVIC_ICER1 |= (1 << bit_pos);
 800074e:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <GPIO_IRQ_INT_Config+0x114>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	7bfa      	ldrb	r2, [r7, #15]
 8000754:	2101      	movs	r1, #1
 8000756:	fa01 f202 	lsl.w	r2, r1, r2
 800075a:	4611      	mov	r1, r2
 800075c:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <GPIO_IRQ_INT_Config+0x114>)
 800075e:	430b      	orrs	r3, r1
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	e014      	b.n	800078e <GPIO_IRQ_INT_Config+0xfa>
		else if(IRQNumber >= 64 && IRQNumber < 92){
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b3f      	cmp	r3, #63	@ 0x3f
 8000768:	d911      	bls.n	800078e <GPIO_IRQ_INT_Config+0xfa>
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b5b      	cmp	r3, #91	@ 0x5b
 800076e:	d80e      	bhi.n	800078e <GPIO_IRQ_INT_Config+0xfa>
			bit_pos = IRQNumber % 32;
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 031f 	and.w	r3, r3, #31
 8000776:	73fb      	strb	r3, [r7, #15]
			*NVIC_ICER2 |= (1 << bit_pos);
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <GPIO_IRQ_INT_Config+0x118>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	7bfa      	ldrb	r2, [r7, #15]
 800077e:	2101      	movs	r1, #1
 8000780:	fa01 f202 	lsl.w	r2, r1, r2
 8000784:	4611      	mov	r1, r2
 8000786:	4a09      	ldr	r2, [pc, #36]	@ (80007ac <GPIO_IRQ_INT_Config+0x118>)
 8000788:	430b      	orrs	r3, r1
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	e7ff      	b.n	800078e <GPIO_IRQ_INT_Config+0xfa>
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e180 	.word	0xe000e180
 80007a0:	e000e104 	.word	0xe000e104
 80007a4:	e000e108 	.word	0xe000e108
 80007a8:	e000e184 	.word	0xe000e184
 80007ac:	e000e188 	.word	0xe000e188

080007b0 <GPIO_IRQ_Priority_Config>:


void GPIO_IRQ_Priority_Config(uint8_t IRQNumber, uint32_t IRQPriority){
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	71fb      	strb	r3, [r7, #7]
	/* To Configure the Priority of the Interrupt*/
	uint8_t bit_pos = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	73bb      	strb	r3, [r7, #14]
	uint8_t iprx_section = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	737b      	strb	r3, [r7, #13]

	//1. Find the IPRx register no
	iprx = IRQNumber % 4;
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 0303 	and.w	r3, r3, #3
 80007ce:	73bb      	strb	r3, [r7, #14]

	//2. Find the section and bit position
	iprx_section = IRQNumber % 4;
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	f003 0303 	and.w	r3, r3, #3
 80007d6:	737b      	strb	r3, [r7, #13]
	bit_pos = (iprx_section * 8) + (8 - NO_PR_BITS_IMPLEMENTED);
 80007d8:	7b7b      	ldrb	r3, [r7, #13]
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	3304      	adds	r3, #4
 80007e0:	73fb      	strb	r3, [r7, #15]

	//3. Configure the Priority
	*(NVIC_IPRx_BASE + (iprx)) |= (IRQPriority << bit_pos);
 80007e2:	7bbb      	ldrb	r3, [r7, #14]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80007ea:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	409a      	lsls	r2, r3
 80007f6:	7bbb      	ldrb	r3, [r7, #14]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80007fe:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000802:	430a      	orrs	r2, r1
 8000804:	601a      	str	r2, [r3, #0]

}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <GPIO_IRQHandling>:


void GPIO_IRQHandling(uint8_t PinNumber){
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	//User code starts here

	//User code ends here

	//Clear the EXTI PR register, corresponding to the pin number
	if(EXTI->EXTI_PR & (1 << PinNumber)){
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <GPIO_IRQHandling+0x3c>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	79fa      	ldrb	r2, [r7, #7]
 8000824:	2101      	movs	r1, #1
 8000826:	fa01 f202 	lsl.w	r2, r1, r2
 800082a:	4013      	ands	r3, r2
 800082c:	2b00      	cmp	r3, #0
 800082e:	d009      	beq.n	8000844 <GPIO_IRQHandling+0x30>
		//Clear
		EXTI->EXTI_PR |= (1 << PinNumber);
 8000830:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <GPIO_IRQHandling+0x3c>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	79fa      	ldrb	r2, [r7, #7]
 8000836:	2101      	movs	r1, #1
 8000838:	fa01 f202 	lsl.w	r2, r1, r2
 800083c:	4611      	mov	r1, r2
 800083e:	4a04      	ldr	r2, [pc, #16]	@ (8000850 <GPIO_IRQHandling+0x3c>)
 8000840:	430b      	orrs	r3, r1
 8000842:	6153      	str	r3, [r2, #20]
	}
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	40013c00 	.word	0x40013c00

08000854 <main>:
GPIOx_Handle_t PushButton_Handle;
GPIOx_Handle_t EndstopLSW_Handle;


int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	//Clear the Newly created structures
	memset(&LED_Y, 0, sizeof(LED_Y));
 8000858:	220c      	movs	r2, #12
 800085a:	2100      	movs	r1, #0
 800085c:	485a      	ldr	r0, [pc, #360]	@ (80009c8 <main+0x174>)
 800085e:	f000 f922 	bl	8000aa6 <memset>
	memset(&LED_G, 0, sizeof(LED_G));
 8000862:	220c      	movs	r2, #12
 8000864:	2100      	movs	r1, #0
 8000866:	4859      	ldr	r0, [pc, #356]	@ (80009cc <main+0x178>)
 8000868:	f000 f91d 	bl	8000aa6 <memset>
	memset(&LED_R, 0, sizeof(LED_R));
 800086c:	220c      	movs	r2, #12
 800086e:	2100      	movs	r1, #0
 8000870:	4857      	ldr	r0, [pc, #348]	@ (80009d0 <main+0x17c>)
 8000872:	f000 f918 	bl	8000aa6 <memset>
	memset(&LED_B, 0, sizeof(LED_B));
 8000876:	220c      	movs	r2, #12
 8000878:	2100      	movs	r1, #0
 800087a:	4856      	ldr	r0, [pc, #344]	@ (80009d4 <main+0x180>)
 800087c:	f000 f913 	bl	8000aa6 <memset>
	memset(&ONBOARD_LED, 0, sizeof(ONBOARD_LED));
 8000880:	220c      	movs	r2, #12
 8000882:	2100      	movs	r1, #0
 8000884:	4854      	ldr	r0, [pc, #336]	@ (80009d8 <main+0x184>)
 8000886:	f000 f90e 	bl	8000aa6 <memset>
	memset(&PushButton_Handle, 0, sizeof(PushButton_Handle));
 800088a:	220c      	movs	r2, #12
 800088c:	2100      	movs	r1, #0
 800088e:	4853      	ldr	r0, [pc, #332]	@ (80009dc <main+0x188>)
 8000890:	f000 f909 	bl	8000aa6 <memset>
	memset(&EndstopLSW_Handle, 0, sizeof(EndstopLSW_Handle));
 8000894:	220c      	movs	r2, #12
 8000896:	2100      	movs	r1, #0
 8000898:	4851      	ldr	r0, [pc, #324]	@ (80009e0 <main+0x18c>)
 800089a:	f000 f904 	bl	8000aa6 <memset>

	//Configuring Up all Handlers
	//Output Configurations
	//GPIO Pin - PC8
	LED_Y.pGPIOx_Base = GPIOC;
 800089e:	4b4a      	ldr	r3, [pc, #296]	@ (80009c8 <main+0x174>)
 80008a0:	4a50      	ldr	r2, [pc, #320]	@ (80009e4 <main+0x190>)
 80008a2:	601a      	str	r2, [r3, #0]
	LED_Y.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_8;
 80008a4:	4b48      	ldr	r3, [pc, #288]	@ (80009c8 <main+0x174>)
 80008a6:	2208      	movs	r2, #8
 80008a8:	711a      	strb	r2, [r3, #4]
	LED_Y.GPIO_PinConfig.GPIOx_PinMode = GPIO_MODE_OUTPUT;
 80008aa:	4b47      	ldr	r3, [pc, #284]	@ (80009c8 <main+0x174>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	715a      	strb	r2, [r3, #5]
	LED_Y.GPIO_PinConfig.GPIOx_PinOPType = GPIO_OUTPUT_PUSH_PULL;
 80008b0:	4b45      	ldr	r3, [pc, #276]	@ (80009c8 <main+0x174>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	71da      	strb	r2, [r3, #7]
	LED_Y.GPIO_PinConfig.GPIOx_PinSpeed = GPIO_SPEED_LOW;
 80008b6:	4b44      	ldr	r3, [pc, #272]	@ (80009c8 <main+0x174>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	719a      	strb	r2, [r3, #6]

	//GPIO Pin - PD2
	LED_G.pGPIOx_Base = GPIOD;
 80008bc:	4b43      	ldr	r3, [pc, #268]	@ (80009cc <main+0x178>)
 80008be:	4a4a      	ldr	r2, [pc, #296]	@ (80009e8 <main+0x194>)
 80008c0:	601a      	str	r2, [r3, #0]
	LED_G.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_2;
 80008c2:	4b42      	ldr	r3, [pc, #264]	@ (80009cc <main+0x178>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	711a      	strb	r2, [r3, #4]
	LED_G.GPIO_PinConfig.GPIOx_PinMode = GPIO_MODE_OUTPUT;
 80008c8:	4b40      	ldr	r3, [pc, #256]	@ (80009cc <main+0x178>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	715a      	strb	r2, [r3, #5]
	LED_G.GPIO_PinConfig.GPIOx_PinOPType = GPIO_OUTPUT_PUSH_PULL;
 80008ce:	4b3f      	ldr	r3, [pc, #252]	@ (80009cc <main+0x178>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	71da      	strb	r2, [r3, #7]
	LED_G.GPIO_PinConfig.GPIOx_PinSpeed = GPIO_SPEED_LOW;
 80008d4:	4b3d      	ldr	r3, [pc, #244]	@ (80009cc <main+0x178>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	719a      	strb	r2, [r3, #6]

	//GPIO Pin - PB8
	LED_R.pGPIOx_Base = GPIOB;
 80008da:	4b3d      	ldr	r3, [pc, #244]	@ (80009d0 <main+0x17c>)
 80008dc:	4a43      	ldr	r2, [pc, #268]	@ (80009ec <main+0x198>)
 80008de:	601a      	str	r2, [r3, #0]
	LED_R.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_8;
 80008e0:	4b3b      	ldr	r3, [pc, #236]	@ (80009d0 <main+0x17c>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	711a      	strb	r2, [r3, #4]
	LED_R.GPIO_PinConfig.GPIOx_PinMode = GPIO_MODE_OUTPUT;
 80008e6:	4b3a      	ldr	r3, [pc, #232]	@ (80009d0 <main+0x17c>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	715a      	strb	r2, [r3, #5]
	LED_R.GPIO_PinConfig.GPIOx_PinOPType = GPIO_OUTPUT_PUSH_PULL;
 80008ec:	4b38      	ldr	r3, [pc, #224]	@ (80009d0 <main+0x17c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	71da      	strb	r2, [r3, #7]
	LED_R.GPIO_PinConfig.GPIOx_PinSpeed = GPIO_SPEED_LOW;
 80008f2:	4b37      	ldr	r3, [pc, #220]	@ (80009d0 <main+0x17c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	719a      	strb	r2, [r3, #6]

	//GPIO Pin - PC6
	LED_B.pGPIOx_Base = GPIOC;
 80008f8:	4b36      	ldr	r3, [pc, #216]	@ (80009d4 <main+0x180>)
 80008fa:	4a3a      	ldr	r2, [pc, #232]	@ (80009e4 <main+0x190>)
 80008fc:	601a      	str	r2, [r3, #0]
	LED_B.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_6;
 80008fe:	4b35      	ldr	r3, [pc, #212]	@ (80009d4 <main+0x180>)
 8000900:	2206      	movs	r2, #6
 8000902:	711a      	strb	r2, [r3, #4]
	LED_B.GPIO_PinConfig.GPIOx_PinMode = GPIO_MODE_OUTPUT;
 8000904:	4b33      	ldr	r3, [pc, #204]	@ (80009d4 <main+0x180>)
 8000906:	2201      	movs	r2, #1
 8000908:	715a      	strb	r2, [r3, #5]
	LED_B.GPIO_PinConfig.GPIOx_PinOPType = GPIO_OUTPUT_PUSH_PULL;
 800090a:	4b32      	ldr	r3, [pc, #200]	@ (80009d4 <main+0x180>)
 800090c:	2200      	movs	r2, #0
 800090e:	71da      	strb	r2, [r3, #7]
	LED_B.GPIO_PinConfig.GPIOx_PinSpeed = GPIO_SPEED_LOW;
 8000910:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <main+0x180>)
 8000912:	2200      	movs	r2, #0
 8000914:	719a      	strb	r2, [r3, #6]

	// GPIO Pin - PA5
	ONBOARD_LED.pGPIOx_Base = GPIOA;
 8000916:	4b30      	ldr	r3, [pc, #192]	@ (80009d8 <main+0x184>)
 8000918:	4a35      	ldr	r2, [pc, #212]	@ (80009f0 <main+0x19c>)
 800091a:	601a      	str	r2, [r3, #0]
	ONBOARD_LED.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_5;
 800091c:	4b2e      	ldr	r3, [pc, #184]	@ (80009d8 <main+0x184>)
 800091e:	2205      	movs	r2, #5
 8000920:	711a      	strb	r2, [r3, #4]
	ONBOARD_LED.GPIO_PinConfig.GPIOx_PinMode = GPIO_MODE_OUTPUT;
 8000922:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <main+0x184>)
 8000924:	2201      	movs	r2, #1
 8000926:	715a      	strb	r2, [r3, #5]
	ONBOARD_LED.GPIO_PinConfig.GPIOx_PinOPType = GPIO_OUTPUT_PUSH_PULL;
 8000928:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <main+0x184>)
 800092a:	2200      	movs	r2, #0
 800092c:	71da      	strb	r2, [r3, #7]
	ONBOARD_LED.GPIO_PinConfig.GPIOx_PinSpeed = GPIO_SPEED_LOW;
 800092e:	4b2a      	ldr	r3, [pc, #168]	@ (80009d8 <main+0x184>)
 8000930:	2200      	movs	r2, #0
 8000932:	719a      	strb	r2, [r3, #6]

	//Input Configurations
	PushButton_Handle.pGPIOx_Base = GPIOC;
 8000934:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <main+0x188>)
 8000936:	4a2b      	ldr	r2, [pc, #172]	@ (80009e4 <main+0x190>)
 8000938:	601a      	str	r2, [r3, #0]
	//PushButton_Handle.GPIO_PinConfig = PushButton_Config;
	PushButton_Handle.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_13;
 800093a:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <main+0x188>)
 800093c:	220d      	movs	r2, #13
 800093e:	711a      	strb	r2, [r3, #4]
	PushButton_Handle.GPIO_PinConfig.GPIOx_PinMode = GPIO_MODE_INT_FALLING;
 8000940:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <main+0x188>)
 8000942:	2204      	movs	r2, #4
 8000944:	715a      	strb	r2, [r3, #5]
	PushButton_Handle.GPIO_PinConfig.GPIOx_PinPUPDControl = GPIO_PUPD_PULL_UP;
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <main+0x188>)
 8000948:	2201      	movs	r2, #1
 800094a:	721a      	strb	r2, [r3, #8]

	EndstopLSW_Handle.pGPIOx_Base = GPIOA;
 800094c:	4b24      	ldr	r3, [pc, #144]	@ (80009e0 <main+0x18c>)
 800094e:	4a28      	ldr	r2, [pc, #160]	@ (80009f0 <main+0x19c>)
 8000950:	601a      	str	r2, [r3, #0]
	EndstopLSW_Handle.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_12;
 8000952:	4b23      	ldr	r3, [pc, #140]	@ (80009e0 <main+0x18c>)
 8000954:	220c      	movs	r2, #12
 8000956:	711a      	strb	r2, [r3, #4]
	EndstopLSW_Handle.GPIO_PinConfig.GPIOx_PinMode = GPIO_MODE_INPUT;
 8000958:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <main+0x18c>)
 800095a:	2200      	movs	r2, #0
 800095c:	715a      	strb	r2, [r3, #5]
	EndstopLSW_Handle.GPIO_PinConfig.GPIOx_PinPUPDControl = GPIO_PUPD_PULL_DOWN;
 800095e:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <main+0x18c>)
 8000960:	2202      	movs	r2, #2
 8000962:	721a      	strb	r2, [r3, #8]


	//Provide Clock Access to the GPIO Peripherals
	GPIOx_PClkControl(GPIOA, CLK_EN);
 8000964:	2101      	movs	r1, #1
 8000966:	4822      	ldr	r0, [pc, #136]	@ (80009f0 <main+0x19c>)
 8000968:	f7ff fc36 	bl	80001d8 <GPIOx_PClkControl>
	GPIOx_PClkControl(GPIOB, CLK_EN);
 800096c:	2101      	movs	r1, #1
 800096e:	481f      	ldr	r0, [pc, #124]	@ (80009ec <main+0x198>)
 8000970:	f7ff fc32 	bl	80001d8 <GPIOx_PClkControl>
	GPIOx_PClkControl(GPIOC, CLK_EN);
 8000974:	2101      	movs	r1, #1
 8000976:	481b      	ldr	r0, [pc, #108]	@ (80009e4 <main+0x190>)
 8000978:	f7ff fc2e 	bl	80001d8 <GPIOx_PClkControl>
	GPIOx_PClkControl(GPIOD, CLK_EN);
 800097c:	2101      	movs	r1, #1
 800097e:	481a      	ldr	r0, [pc, #104]	@ (80009e8 <main+0x194>)
 8000980:	f7ff fc2a 	bl	80001d8 <GPIOx_PClkControl>

	//Initialize all Configurations
	GPIOx_Init(&LED_Y);
 8000984:	4810      	ldr	r0, [pc, #64]	@ (80009c8 <main+0x174>)
 8000986:	f7ff fccb 	bl	8000320 <GPIOx_Init>
	GPIOx_Init(&LED_G);
 800098a:	4810      	ldr	r0, [pc, #64]	@ (80009cc <main+0x178>)
 800098c:	f7ff fcc8 	bl	8000320 <GPIOx_Init>
	GPIOx_Init(&LED_R);
 8000990:	480f      	ldr	r0, [pc, #60]	@ (80009d0 <main+0x17c>)
 8000992:	f7ff fcc5 	bl	8000320 <GPIOx_Init>
	GPIOx_Init(&LED_R);
 8000996:	480e      	ldr	r0, [pc, #56]	@ (80009d0 <main+0x17c>)
 8000998:	f7ff fcc2 	bl	8000320 <GPIOx_Init>
	GPIOx_Init(&LED_B);
 800099c:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <main+0x180>)
 800099e:	f7ff fcbf 	bl	8000320 <GPIOx_Init>
	GPIOx_Init(&ONBOARD_LED);
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <main+0x184>)
 80009a4:	f7ff fcbc 	bl	8000320 <GPIOx_Init>

	GPIOx_Init(&PushButton_Handle);
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <main+0x188>)
 80009aa:	f7ff fcb9 	bl	8000320 <GPIOx_Init>
	GPIOx_Init(&EndstopLSW_Handle);
 80009ae:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <main+0x18c>)
 80009b0:	f7ff fcb6 	bl	8000320 <GPIOx_Init>

	//IRQ Configurations
	GPIO_IRQ_INT_Config(IRQ_NO_EXTI15_10, ENABLE);
 80009b4:	2101      	movs	r1, #1
 80009b6:	2028      	movs	r0, #40	@ 0x28
 80009b8:	f7ff fe6c 	bl	8000694 <GPIO_IRQ_INT_Config>
	GPIO_IRQ_Priority_Config(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI_15);	//Priority no - 15
 80009bc:	210f      	movs	r1, #15
 80009be:	2028      	movs	r0, #40	@ 0x28
 80009c0:	f7ff fef6 	bl	80007b0 <GPIO_IRQ_Priority_Config>

	while(1){
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <main+0x170>
 80009c8:	2000001c 	.word	0x2000001c
 80009cc:	20000028 	.word	0x20000028
 80009d0:	20000034 	.word	0x20000034
 80009d4:	20000040 	.word	0x20000040
 80009d8:	2000004c 	.word	0x2000004c
 80009dc:	20000058 	.word	0x20000058
 80009e0:	20000064 	.word	0x20000064
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020c00 	.word	0x40020c00
 80009ec:	40020400 	.word	0x40020400
 80009f0:	40020000 	.word	0x40020000

080009f4 <EXTI0_IRQHandler>:
		//are_ButtonPressed_Test();
	}
}

void EXTI0_IRQHandler(void){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	/* EXTI0 ISR Implementation */
	//Handle the Interrupt - Handler API
	GPIO_IRQHandling(GPIO_PIN_0);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff ff0b 	bl	8000814 <GPIO_IRQHandling>
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	delay(500000);
 8000a08:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <EXTI15_10_IRQHandler+0x1c>)
 8000a0a:	f000 f80d 	bl	8000a28 <delay>
	GPIO_IRQHandling(GPIO_PIN_13);
 8000a0e:	200d      	movs	r0, #13
 8000a10:	f7ff ff00 	bl	8000814 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_5);
 8000a14:	2105      	movs	r1, #5
 8000a16:	4803      	ldr	r0, [pc, #12]	@ (8000a24 <EXTI15_10_IRQHandler+0x20>)
 8000a18:	f7ff fe26 	bl	8000668 <GPIO_ToggleOutputPin>
	//GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_5, HIGH);
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	0007a120 	.word	0x0007a120
 8000a24:	40020000 	.word	0x40020000

08000a28 <delay>:


void delay(uint32_t value){
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	for(int i=0; i < value; i++){};
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	e002      	b.n	8000a3c <delay+0x14>
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f8      	bhi.n	8000a36 <delay+0xe>
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a54:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5e:	490d      	ldr	r1, [pc, #52]	@ (8000a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a60:	4a0d      	ldr	r2, [pc, #52]	@ (8000a98 <LoopForever+0xe>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a74:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa0 <LoopForever+0x16>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a82:	f000 f819 	bl	8000ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a86:	f7ff fee5 	bl	8000854 <main>

08000a8a <LoopForever>:

LoopForever:
  b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   r0, =_estack
 8000a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a98:	08000b20 	.word	0x08000b20
  ldr r2, =_sbss
 8000a9c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000aa0:	20000070 	.word	0x20000070

08000aa4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>

08000aa6 <memset>:
 8000aa6:	4402      	add	r2, r0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d100      	bne.n	8000ab0 <memset+0xa>
 8000aae:	4770      	bx	lr
 8000ab0:	f803 1b01 	strb.w	r1, [r3], #1
 8000ab4:	e7f9      	b.n	8000aaa <memset+0x4>
	...

08000ab8 <__libc_init_array>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	4d0d      	ldr	r5, [pc, #52]	@ (8000af0 <__libc_init_array+0x38>)
 8000abc:	4c0d      	ldr	r4, [pc, #52]	@ (8000af4 <__libc_init_array+0x3c>)
 8000abe:	1b64      	subs	r4, r4, r5
 8000ac0:	10a4      	asrs	r4, r4, #2
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	42a6      	cmp	r6, r4
 8000ac6:	d109      	bne.n	8000adc <__libc_init_array+0x24>
 8000ac8:	4d0b      	ldr	r5, [pc, #44]	@ (8000af8 <__libc_init_array+0x40>)
 8000aca:	4c0c      	ldr	r4, [pc, #48]	@ (8000afc <__libc_init_array+0x44>)
 8000acc:	f000 f818 	bl	8000b00 <_init>
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	10a4      	asrs	r4, r4, #2
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	42a6      	cmp	r6, r4
 8000ad8:	d105      	bne.n	8000ae6 <__libc_init_array+0x2e>
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae0:	4798      	blx	r3
 8000ae2:	3601      	adds	r6, #1
 8000ae4:	e7ee      	b.n	8000ac4 <__libc_init_array+0xc>
 8000ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aea:	4798      	blx	r3
 8000aec:	3601      	adds	r6, #1
 8000aee:	e7f2      	b.n	8000ad6 <__libc_init_array+0x1e>
 8000af0:	08000b18 	.word	0x08000b18
 8000af4:	08000b18 	.word	0x08000b18
 8000af8:	08000b18 	.word	0x08000b18
 8000afc:	08000b1c 	.word	0x08000b1c

08000b00 <_init>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr

08000b0c <_fini>:
 8000b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0e:	bf00      	nop
 8000b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b12:	bc08      	pop	{r3}
 8000b14:	469e      	mov	lr, r3
 8000b16:	4770      	bx	lr
