
Test_SPI_FD_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08001d4c  08001d4c  00002d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dd8  08001dd8  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001dd8  08001dd8  00002dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001de0  08001de0  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001de0  08001de0  00002de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001de4  08001de4  00002de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001de8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001e44  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001e44  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000027dd  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008fc  00000000  00000000  00005869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000338  00000000  00000000  00006168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000251  00000000  00000000  000064a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039e8  00000000  00000000  000066f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003508  00000000  00000000  0000a0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c4b4  00000000  00000000  0000d5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00019a95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001484  00000000  00000000  00019ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0001af5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001d34 	.word	0x08001d34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001d34 	.word	0x08001d34

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <GPIOx_PClkControl>:
#include "GPIO_Driver.h"

/*
 * GPIO Peripheral - GPIO Peripheral Clock Control API Definition
 */
void GPIOx_PClkControl(GPIOx_RegDef_t *pGPIOx_Base, uint8_t EN_DI){
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
	if(EN_DI == CLK_EN){
 800028c:	78fb      	ldrb	r3, [r7, #3]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d141      	bne.n	8000316 <GPIOx_PClkControl+0x96>
		if(pGPIOx_Base == GPIOA){
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a45      	ldr	r2, [pc, #276]	@ (80003ac <GPIOx_PClkControl+0x12c>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d106      	bne.n	80002a8 <GPIOx_PClkControl+0x28>
			GPIOA_PCLK_EN();
 800029a:	4b45      	ldr	r3, [pc, #276]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800029c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800029e:	4a44      	ldr	r2, [pc, #272]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOH_PCLK_DI();
		}
		else{
		}
	}
}
 80002a6:	e07a      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOB){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4a42      	ldr	r2, [pc, #264]	@ (80003b4 <GPIOx_PClkControl+0x134>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d106      	bne.n	80002be <GPIOx_PClkControl+0x3e>
			GPIOB_PCLK_EN();
 80002b0:	4b3f      	ldr	r3, [pc, #252]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b4:	4a3e      	ldr	r2, [pc, #248]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002b6:	f043 0302 	orr.w	r3, r3, #2
 80002ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002bc:	e06f      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOC){
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a3d      	ldr	r2, [pc, #244]	@ (80003b8 <GPIOx_PClkControl+0x138>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d106      	bne.n	80002d4 <GPIOx_PClkControl+0x54>
			GPIOC_PCLK_EN();
 80002c6:	4b3a      	ldr	r3, [pc, #232]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ca:	4a39      	ldr	r2, [pc, #228]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002cc:	f043 0304 	orr.w	r3, r3, #4
 80002d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002d2:	e064      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOD){
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a39      	ldr	r2, [pc, #228]	@ (80003bc <GPIOx_PClkControl+0x13c>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d106      	bne.n	80002ea <GPIOx_PClkControl+0x6a>
			GPIOD_PCLK_EN();
 80002dc:	4b34      	ldr	r3, [pc, #208]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e0:	4a33      	ldr	r2, [pc, #204]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002e8:	e059      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOE){
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a34      	ldr	r2, [pc, #208]	@ (80003c0 <GPIOx_PClkControl+0x140>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <GPIOx_PClkControl+0x80>
			GPIOE_PCLK_EN();
 80002f2:	4b2f      	ldr	r3, [pc, #188]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f6:	4a2e      	ldr	r2, [pc, #184]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 80002f8:	f043 0310 	orr.w	r3, r3, #16
 80002fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002fe:	e04e      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOH){
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a30      	ldr	r2, [pc, #192]	@ (80003c4 <GPIOx_PClkControl+0x144>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d14a      	bne.n	800039e <GPIOx_PClkControl+0x11e>
			GPIOH_PCLK_EN();
 8000308:	4b29      	ldr	r3, [pc, #164]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030c:	4a28      	ldr	r2, [pc, #160]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800030e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000312:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000314:	e043      	b.n	800039e <GPIOx_PClkControl+0x11e>
	else if(EN_DI == CLK_DI){
 8000316:	78fb      	ldrb	r3, [r7, #3]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d140      	bne.n	800039e <GPIOx_PClkControl+0x11e>
		if(pGPIOx_Base == GPIOA){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a23      	ldr	r2, [pc, #140]	@ (80003ac <GPIOx_PClkControl+0x12c>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIOx_PClkControl+0xb2>
			GPIOA_PCLK_DI();
 8000324:	4b22      	ldr	r3, [pc, #136]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000328:	4a21      	ldr	r2, [pc, #132]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800032a:	f023 0301 	bic.w	r3, r3, #1
 800032e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000330:	e035      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOB){
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a1f      	ldr	r2, [pc, #124]	@ (80003b4 <GPIOx_PClkControl+0x134>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIOx_PClkControl+0xc8>
			GPIOB_PCLK_DI();
 800033a:	4b1d      	ldr	r3, [pc, #116]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033e:	4a1c      	ldr	r2, [pc, #112]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000340:	f023 0302 	bic.w	r3, r3, #2
 8000344:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000346:	e02a      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOC){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a1b      	ldr	r2, [pc, #108]	@ (80003b8 <GPIOx_PClkControl+0x138>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIOx_PClkControl+0xde>
			GPIOC_PCLK_DI();
 8000350:	4b17      	ldr	r3, [pc, #92]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000354:	4a16      	ldr	r2, [pc, #88]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000356:	f023 0304 	bic.w	r3, r3, #4
 800035a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035c:	e01f      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOD){
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a16      	ldr	r2, [pc, #88]	@ (80003bc <GPIOx_PClkControl+0x13c>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIOx_PClkControl+0xf4>
			GPIOD_PCLK_DI();
 8000366:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036a:	4a11      	ldr	r2, [pc, #68]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800036c:	f023 0308 	bic.w	r3, r3, #8
 8000370:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000372:	e014      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOE){
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a12      	ldr	r2, [pc, #72]	@ (80003c0 <GPIOx_PClkControl+0x140>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d106      	bne.n	800038a <GPIOx_PClkControl+0x10a>
			GPIOE_PCLK_DI();
 800037c:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000380:	4a0b      	ldr	r2, [pc, #44]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000382:	f023 0310 	bic.w	r3, r3, #16
 8000386:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000388:	e009      	b.n	800039e <GPIOx_PClkControl+0x11e>
		else if(pGPIOx_Base == GPIOH){
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a0d      	ldr	r2, [pc, #52]	@ (80003c4 <GPIOx_PClkControl+0x144>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d105      	bne.n	800039e <GPIOx_PClkControl+0x11e>
			GPIOH_PCLK_DI();
 8000392:	4b07      	ldr	r3, [pc, #28]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000396:	4a06      	ldr	r2, [pc, #24]	@ (80003b0 <GPIOx_PClkControl+0x130>)
 8000398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800039c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40020000 	.word	0x40020000
 80003b0:	40023800 	.word	0x40023800
 80003b4:	40020400 	.word	0x40020400
 80003b8:	40020800 	.word	0x40020800
 80003bc:	40020c00 	.word	0x40020c00
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40021c00 	.word	0x40021c00

080003c8 <GPIOx_Init>:
}

/*
 * GPIO Peripheral - GPIO Initialization API Definition
 */
void GPIOx_Init(GPIOx_Handle_t *pGPIOHandle){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	//Initialize variables
	uint8_t bit_pos = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_index = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	73bb      	strb	r3, [r7, #14]
	uint8_t temp = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	737b      	strb	r3, [r7, #13]
	uint8_t port_code = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	733b      	strb	r3, [r7, #12]

	//Initialize GPIO Peripheral clock
	GPIOx_PClkControl(pGPIOHandle->pGPIOx_Base, CLK_EN);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2101      	movs	r1, #1
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff4a 	bl	8000280 <GPIOx_PClkControl>

	/*Non Interrupt mode configurations*/
	if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode <= GPIO_MODE_ANALOG){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	795b      	ldrb	r3, [r3, #5]
 80003f0:	2b03      	cmp	r3, #3
 80003f2:	f200 80ca 	bhi.w	800058a <GPIOx_Init+0x1c2>
		//1. Set GPIO Pin Mode
		bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber * 2;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	791b      	ldrb	r3, [r3, #4]
 80003fa:	005b      	lsls	r3, r3, #1
 80003fc:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx_Base->MODER &= ~(0x3 << bit_pos);		//Clear the Bits
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	2103      	movs	r1, #3
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	43db      	mvns	r3, r3
 800040e:	4619      	mov	r1, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	400a      	ands	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx_Base->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode << bit_pos);		//Set Bits
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	795b      	ldrb	r3, [r3, #5]
 8000422:	4619      	mov	r1, r3
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	fa01 f303 	lsl.w	r3, r1, r3
 800042a:	4619      	mov	r1, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	430a      	orrs	r2, r1
 8000432:	601a      	str	r2, [r3, #0]
		bit_pos = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	73fb      	strb	r3, [r7, #15]

		//2. Set GPIO Pin Output Type
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_OUTPUT){
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	795b      	ldrb	r3, [r3, #5]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d11f      	bne.n	8000480 <GPIOx_Init+0xb8>
			bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx_Base->OTYPER &= ~(0x1 << bit_pos);	//Clear the Bits
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	685a      	ldr	r2, [r3, #4]
 800044c:	7bfb      	ldrb	r3, [r7, #15]
 800044e:	2101      	movs	r1, #1
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	43db      	mvns	r3, r3
 8000456:	4619      	mov	r1, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	400a      	ands	r2, r1
 800045e:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx_Base->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinOPType << bit_pos);	//Set Bits
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	685a      	ldr	r2, [r3, #4]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	79db      	ldrb	r3, [r3, #7]
 800046a:	4619      	mov	r1, r3
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	4619      	mov	r1, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	430a      	orrs	r2, r1
 800047a:	605a      	str	r2, [r3, #4]
			bit_pos = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
		}

		//3. Set GPIO Pin Speed
		bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber * 2;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx_Base->OSPEEDR &= ~(0x3 << bit_pos);	//Clear the Bits
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	689a      	ldr	r2, [r3, #8]
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	2103      	movs	r1, #3
 8000492:	fa01 f303 	lsl.w	r3, r1, r3
 8000496:	43db      	mvns	r3, r3
 8000498:	4619      	mov	r1, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	400a      	ands	r2, r1
 80004a0:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx_Base->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinSpeed << bit_pos);	//Set Bits
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	689a      	ldr	r2, [r3, #8]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	799b      	ldrb	r3, [r3, #6]
 80004ac:	4619      	mov	r1, r3
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	fa01 f303 	lsl.w	r3, r1, r3
 80004b4:	4619      	mov	r1, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	430a      	orrs	r2, r1
 80004bc:	609a      	str	r2, [r3, #8]
		bit_pos = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	73fb      	strb	r3, [r7, #15]

		//4. Set GPIO Pin Pull Up/Down Register
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INPUT){
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	795b      	ldrb	r3, [r3, #5]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d120      	bne.n	800050c <GPIOx_Init+0x144>
			bit_pos = pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber * 2;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	791b      	ldrb	r3, [r3, #4]
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx_Base->PUPDR &= ~(0x3 << bit_pos);	//Clear the Bits
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	68da      	ldr	r2, [r3, #12]
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	2103      	movs	r1, #3
 80004dc:	fa01 f303 	lsl.w	r3, r1, r3
 80004e0:	43db      	mvns	r3, r3
 80004e2:	4619      	mov	r1, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	400a      	ands	r2, r1
 80004ea:	60da      	str	r2, [r3, #12]
			pGPIOHandle->pGPIOx_Base->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinPUPDControl << bit_pos);	//Set Bits
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	68da      	ldr	r2, [r3, #12]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	7a1b      	ldrb	r3, [r3, #8]
 80004f6:	4619      	mov	r1, r3
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	fa01 f303 	lsl.w	r3, r1, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	430a      	orrs	r2, r1
 8000506:	60da      	str	r2, [r3, #12]
			bit_pos = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	73fb      	strb	r3, [r7, #15]
		}

		//5. Set GPIO Pin Alternate Functionality Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_ALTERNATE){
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	795b      	ldrb	r3, [r3, #5]
 8000510:	2b02      	cmp	r3, #2
 8000512:	f040 80eb 	bne.w	80006ec <GPIOx_Init+0x324>
			//Configure the Alternate functionality registers
			reg_index = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber / 8);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	08db      	lsrs	r3, r3, #3
 800051c:	73bb      	strb	r3, [r7, #14]
			temp = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber % 8);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	f003 0307 	and.w	r3, r3, #7
 8000526:	737b      	strb	r3, [r7, #13]
			bit_pos = (temp * 4);
 8000528:	7b7b      	ldrb	r3, [r7, #13]
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx_Base->AFR[reg_index] &= ~(0xf << bit_pos);	//Clear the Bits
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	7bba      	ldrb	r2, [r7, #14]
 8000534:	3208      	adds	r2, #8
 8000536:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	220f      	movs	r2, #15
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	43db      	mvns	r3, r3
 8000544:	4618      	mov	r0, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	7bba      	ldrb	r2, [r7, #14]
 800054c:	4001      	ands	r1, r0
 800054e:	3208      	adds	r2, #8
 8000550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx_Base->AFR[reg_index] |= (pGPIOHandle->GPIO_PinConfig.GPIOx_PinAltFunMode << bit_pos);	//Set Bits
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	7bba      	ldrb	r2, [r7, #14]
 800055a:	3208      	adds	r2, #8
 800055c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7a5b      	ldrb	r3, [r3, #9]
 8000564:	461a      	mov	r2, r3
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	4618      	mov	r0, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	7bba      	ldrb	r2, [r7, #14]
 8000574:	4301      	orrs	r1, r0
 8000576:	3208      	adds	r2, #8
 8000578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			reg_index = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	73bb      	strb	r3, [r7, #14]
			temp = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	737b      	strb	r3, [r7, #13]
			bit_pos = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]
		bit_pos = 0;

		//3. Enable the EXTI Interrupt delivery using IMR
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
	}
}
 8000588:	e0b0      	b.n	80006ec <GPIOx_Init+0x324>
		if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INT_RISING){
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	795b      	ldrb	r3, [r3, #5]
 800058e:	2b05      	cmp	r3, #5
 8000590:	d117      	bne.n	80005c2 <GPIOx_Init+0x1fa>
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 8000592:	4b58      	ldr	r3, [pc, #352]	@ (80006f4 <GPIOx_Init+0x32c>)
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	7912      	ldrb	r2, [r2, #4]
 800059a:	4611      	mov	r1, r2
 800059c:	2201      	movs	r2, #1
 800059e:	408a      	lsls	r2, r1
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a54      	ldr	r2, [pc, #336]	@ (80006f4 <GPIOx_Init+0x32c>)
 80005a4:	430b      	orrs	r3, r1
 80005a6:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 80005a8:	4b52      	ldr	r3, [pc, #328]	@ (80006f4 <GPIOx_Init+0x32c>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	7912      	ldrb	r2, [r2, #4]
 80005b0:	4611      	mov	r1, r2
 80005b2:	2201      	movs	r2, #1
 80005b4:	408a      	lsls	r2, r1
 80005b6:	43d2      	mvns	r2, r2
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a4e      	ldr	r2, [pc, #312]	@ (80006f4 <GPIOx_Init+0x32c>)
 80005bc:	400b      	ands	r3, r1
 80005be:	60d3      	str	r3, [r2, #12]
 80005c0:	e035      	b.n	800062e <GPIOx_Init+0x266>
		else if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INT_FALLING){
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	795b      	ldrb	r3, [r3, #5]
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d117      	bne.n	80005fa <GPIOx_Init+0x232>
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 80005ca:	4b4a      	ldr	r3, [pc, #296]	@ (80006f4 <GPIOx_Init+0x32c>)
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	7912      	ldrb	r2, [r2, #4]
 80005d2:	4611      	mov	r1, r2
 80005d4:	2201      	movs	r2, #1
 80005d6:	408a      	lsls	r2, r1
 80005d8:	4611      	mov	r1, r2
 80005da:	4a46      	ldr	r2, [pc, #280]	@ (80006f4 <GPIOx_Init+0x32c>)
 80005dc:	430b      	orrs	r3, r1
 80005de:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 80005e0:	4b44      	ldr	r3, [pc, #272]	@ (80006f4 <GPIOx_Init+0x32c>)
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	7912      	ldrb	r2, [r2, #4]
 80005e8:	4611      	mov	r1, r2
 80005ea:	2201      	movs	r2, #1
 80005ec:	408a      	lsls	r2, r1
 80005ee:	43d2      	mvns	r2, r2
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a40      	ldr	r2, [pc, #256]	@ (80006f4 <GPIOx_Init+0x32c>)
 80005f4:	400b      	ands	r3, r1
 80005f6:	6093      	str	r3, [r2, #8]
 80005f8:	e019      	b.n	800062e <GPIOx_Init+0x266>
		else if(pGPIOHandle->GPIO_PinConfig.GPIOx_PinMode == GPIO_MODE_INT_BOTH){
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	795b      	ldrb	r3, [r3, #5]
 80005fe:	2b06      	cmp	r3, #6
 8000600:	d115      	bne.n	800062e <GPIOx_Init+0x266>
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 8000602:	4b3c      	ldr	r3, [pc, #240]	@ (80006f4 <GPIOx_Init+0x32c>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	7912      	ldrb	r2, [r2, #4]
 800060a:	4611      	mov	r1, r2
 800060c:	2201      	movs	r2, #1
 800060e:	408a      	lsls	r2, r1
 8000610:	4611      	mov	r1, r2
 8000612:	4a38      	ldr	r2, [pc, #224]	@ (80006f4 <GPIOx_Init+0x32c>)
 8000614:	430b      	orrs	r3, r1
 8000616:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 8000618:	4b36      	ldr	r3, [pc, #216]	@ (80006f4 <GPIOx_Init+0x32c>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	7912      	ldrb	r2, [r2, #4]
 8000620:	4611      	mov	r1, r2
 8000622:	2201      	movs	r2, #1
 8000624:	408a      	lsls	r2, r1
 8000626:	4611      	mov	r1, r2
 8000628:	4a32      	ldr	r2, [pc, #200]	@ (80006f4 <GPIOx_Init+0x32c>)
 800062a:	430b      	orrs	r3, r1
 800062c:	60d3      	str	r3, [r2, #12]
		reg_index = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber / 4);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	089b      	lsrs	r3, r3, #2
 8000634:	73bb      	strb	r3, [r7, #14]
		temp = (pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber % 4);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	f003 0303 	and.w	r3, r3, #3
 800063e:	737b      	strb	r3, [r7, #13]
		bit_pos = (temp * 4);
 8000640:	7b7b      	ldrb	r3, [r7, #13]
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	73fb      	strb	r3, [r7, #15]
		port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx_Base);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a2b      	ldr	r2, [pc, #172]	@ (80006f8 <GPIOx_Init+0x330>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d024      	beq.n	800069a <GPIOx_Init+0x2d2>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a29      	ldr	r2, [pc, #164]	@ (80006fc <GPIOx_Init+0x334>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d01d      	beq.n	8000696 <GPIOx_Init+0x2ce>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a28      	ldr	r2, [pc, #160]	@ (8000700 <GPIOx_Init+0x338>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d016      	beq.n	8000692 <GPIOx_Init+0x2ca>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a26      	ldr	r2, [pc, #152]	@ (8000704 <GPIOx_Init+0x33c>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d00f      	beq.n	800068e <GPIOx_Init+0x2c6>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a25      	ldr	r2, [pc, #148]	@ (8000708 <GPIOx_Init+0x340>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d008      	beq.n	800068a <GPIOx_Init+0x2c2>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a23      	ldr	r2, [pc, #140]	@ (800070c <GPIOx_Init+0x344>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d101      	bne.n	8000686 <GPIOx_Init+0x2be>
 8000682:	2307      	movs	r3, #7
 8000684:	e00a      	b.n	800069c <GPIOx_Init+0x2d4>
 8000686:	2300      	movs	r3, #0
 8000688:	e008      	b.n	800069c <GPIOx_Init+0x2d4>
 800068a:	2304      	movs	r3, #4
 800068c:	e006      	b.n	800069c <GPIOx_Init+0x2d4>
 800068e:	2303      	movs	r3, #3
 8000690:	e004      	b.n	800069c <GPIOx_Init+0x2d4>
 8000692:	2302      	movs	r3, #2
 8000694:	e002      	b.n	800069c <GPIOx_Init+0x2d4>
 8000696:	2301      	movs	r3, #1
 8000698:	e000      	b.n	800069c <GPIOx_Init+0x2d4>
 800069a:	2300      	movs	r3, #0
 800069c:	733b      	strb	r3, [r7, #12]
		SYSCFG_PCLK_EN();
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <GPIOx_Init+0x348>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000710 <GPIOx_Init+0x348>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a8:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[reg_index] |= (port_code << bit_pos);
 80006aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000714 <GPIOx_Init+0x34c>)
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	3302      	adds	r3, #2
 80006b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006b4:	7b39      	ldrb	r1, [r7, #12]
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	fa01 f303 	lsl.w	r3, r1, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	4915      	ldr	r1, [pc, #84]	@ (8000714 <GPIOx_Init+0x34c>)
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	4302      	orrs	r2, r0
 80006c4:	3302      	adds	r3, #2
 80006c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		reg_index = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	73bb      	strb	r3, [r7, #14]
		temp = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	737b      	strb	r3, [r7, #13]
		bit_pos = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIOx_PinNumber);
 80006d6:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <GPIOx_Init+0x32c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	7912      	ldrb	r2, [r2, #4]
 80006de:	4611      	mov	r1, r2
 80006e0:	2201      	movs	r2, #1
 80006e2:	408a      	lsls	r2, r1
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a03      	ldr	r2, [pc, #12]	@ (80006f4 <GPIOx_Init+0x32c>)
 80006e8:	430b      	orrs	r3, r1
 80006ea:	6013      	str	r3, [r2, #0]
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40013c00 	.word	0x40013c00
 80006f8:	40020000 	.word	0x40020000
 80006fc:	40020400 	.word	0x40020400
 8000700:	40020800 	.word	0x40020800
 8000704:	40020c00 	.word	0x40020c00
 8000708:	40021000 	.word	0x40021000
 800070c:	40021c00 	.word	0x40021c00
 8000710:	40023800 	.word	0x40023800
 8000714:	40013800 	.word	0x40013800

08000718 <TIMx_ClockEnable>:

#define TIMx_UIE		 0


//Configuration APIs
void TIMx_ClockEnable(TIM_RegDef_t *TIMx){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	if(TIMx == TIM2){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000726:	d106      	bne.n	8000736 <TIMx_ClockEnable+0x1e>
		//Enable TIM2 clock Access
		RCC->APB1ENR |= TIM2_EN;
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <TIMx_ClockEnable+0x6c>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	4a15      	ldr	r2, [pc, #84]	@ (8000784 <TIMx_ClockEnable+0x6c>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6413      	str	r3, [r2, #64]	@ 0x40
		//Enable TIM5 clock Access
		RCC->APB1ENR |= TIM5_EN;
	} else{
		//No conditions matched!
	}
}
 8000734:	e01f      	b.n	8000776 <TIMx_ClockEnable+0x5e>
	} else if(TIMx == TIM3){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a13      	ldr	r2, [pc, #76]	@ (8000788 <TIMx_ClockEnable+0x70>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d106      	bne.n	800074c <TIMx_ClockEnable+0x34>
		RCC->APB1ENR |= TIM3_EN;
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <TIMx_ClockEnable+0x6c>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000742:	4a10      	ldr	r2, [pc, #64]	@ (8000784 <TIMx_ClockEnable+0x6c>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800074a:	e014      	b.n	8000776 <TIMx_ClockEnable+0x5e>
	} else if(TIMx == TIM4){
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a0f      	ldr	r2, [pc, #60]	@ (800078c <TIMx_ClockEnable+0x74>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d106      	bne.n	8000762 <TIMx_ClockEnable+0x4a>
		RCC->APB1ENR |= TIM4_EN;
 8000754:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <TIMx_ClockEnable+0x6c>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <TIMx_ClockEnable+0x6c>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000760:	e009      	b.n	8000776 <TIMx_ClockEnable+0x5e>
	} else if(TIMx == TIM5){
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <TIMx_ClockEnable+0x78>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d105      	bne.n	8000776 <TIMx_ClockEnable+0x5e>
		RCC->APB1ENR |= TIM5_EN;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <TIMx_ClockEnable+0x6c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <TIMx_ClockEnable+0x6c>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40000400 	.word	0x40000400
 800078c:	40000800 	.word	0x40000800
 8000790:	40000c00 	.word	0x40000c00

08000794 <TIMx_SetPrescaler>:
//	} else{
//		//No conditions matched!
//	}
//}

void TIMx_SetPrescaler(TIM_RegDef_t *TIMx, uint32_t prescaler){
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
	TIMx->PSC = prescaler;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <TIMx_SetPeriod>:

uint32_t TIMx_ComputePrescaler(TIM_RegDef_t *TIMx, uint32_t sys_freq, uint32_t tim_freq){
	return ((sys_freq/tim_freq) - 1);
}

void TIMx_SetPeriod(TIM_RegDef_t *TIMx, uint32_t period){
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	//Set ARR Register
	TIMx->ARR = (period-1);
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <TIMx_ConfigMode>:

void TIMx_ConfigMode(TIM_RegDef_t *TIMx, uint8_t Mode){
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	460b      	mov	r3, r1
 80007d8:	70fb      	strb	r3, [r7, #3]
	if(Mode == 0){
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d104      	bne.n	80007ea <TIMx_ConfigMode+0x1c>
		TIMx->CR1 |= (TIM_MODE_DOWN_COUNTER << 4);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	601a      	str	r2, [r3, #0]
	} else {
		TIMx->CR1 |= (TIM_MODE_UP_COUNTER << 4);
	}
}
 80007e8:	e005      	b.n	80007f6 <TIMx_ConfigMode+0x28>
		TIMx->CR1 |= (TIM_MODE_UP_COUNTER << 4);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f043 0210 	orr.w	r2, r3, #16
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	601a      	str	r2, [r3, #0]
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <TIMx_Delay_ms_Init>:
	TIMx->CNT = 0;
	TIMx->CR1 &= ~(TIMx_CEN);
}

// One-time configuration for TIM2 to prepare for delays
void TIMx_Delay_ms_Init(TIM_RegDef_t *TIMx) {
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
    // Enable clock access
    TIMx_ClockEnable(TIMx);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ff84 	bl	8000718 <TIMx_ClockEnable>

    // Set prescaler register
    TIMx_SetPrescaler(TIMx, 15);
 8000810:	210f      	movs	r1, #15
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffbe 	bl	8000794 <TIMx_SetPrescaler>

    //Set Auto reload register
    TIMx_SetPeriod(TIMx, 1000);
 8000818:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ffc7 	bl	80007b0 <TIMx_SetPeriod>

    // Set Counter Mode (Up counter)
    TIMx_ConfigMode(TIMx, TIM_MODE_UP_COUNTER);
 8000822:	2101      	movs	r1, #1
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ffd2 	bl	80007ce <TIMx_ConfigMode>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <SPI_PCLK_Control>:
#include <stdint.h>
#include "STM32F411xx.h"
#include "SPI_Driver.h"

/*SPI Clock Control API*/
void SPI_PCLK_Control(SPI_RegDef_t *pSPIx, uint8_t EN_DI){
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
    if(EN_DI == CLK_EN){
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d136      	bne.n	80008b4 <SPI_PCLK_Control+0x80>
		if(pSPIx == SPI1){
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a3a      	ldr	r2, [pc, #232]	@ (8000934 <SPI_PCLK_Control+0x100>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d106      	bne.n	800085c <SPI_PCLK_Control+0x28>
			SPI1_PCLK_EN();
 800084e:	4b3a      	ldr	r3, [pc, #232]	@ (8000938 <SPI_PCLK_Control+0x104>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	4a39      	ldr	r2, [pc, #228]	@ (8000938 <SPI_PCLK_Control+0x104>)
 8000854:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000858:	6453      	str	r3, [r2, #68]	@ 0x44
			SPI5_PCLK_DI();
		}
		else{
		}
	}
}
 800085a:	e064      	b.n	8000926 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI2){
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a37      	ldr	r2, [pc, #220]	@ (800093c <SPI_PCLK_Control+0x108>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d106      	bne.n	8000872 <SPI_PCLK_Control+0x3e>
			SPI2_PCLK_EN();
 8000864:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <SPI_PCLK_Control+0x104>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	4a33      	ldr	r2, [pc, #204]	@ (8000938 <SPI_PCLK_Control+0x104>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000870:	e059      	b.n	8000926 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI3){
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a32      	ldr	r2, [pc, #200]	@ (8000940 <SPI_PCLK_Control+0x10c>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d106      	bne.n	8000888 <SPI_PCLK_Control+0x54>
			SPI3_PCLK_EN();
 800087a:	4b2f      	ldr	r3, [pc, #188]	@ (8000938 <SPI_PCLK_Control+0x104>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a2e      	ldr	r2, [pc, #184]	@ (8000938 <SPI_PCLK_Control+0x104>)
 8000880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000886:	e04e      	b.n	8000926 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI4){
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a2e      	ldr	r2, [pc, #184]	@ (8000944 <SPI_PCLK_Control+0x110>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d106      	bne.n	800089e <SPI_PCLK_Control+0x6a>
			SPI4_PCLK_EN();
 8000890:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <SPI_PCLK_Control+0x104>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000894:	4a28      	ldr	r2, [pc, #160]	@ (8000938 <SPI_PCLK_Control+0x104>)
 8000896:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800089a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800089c:	e043      	b.n	8000926 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI5){
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a29      	ldr	r2, [pc, #164]	@ (8000948 <SPI_PCLK_Control+0x114>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d13f      	bne.n	8000926 <SPI_PCLK_Control+0xf2>
			SPI5_PCLK_EN();
 80008a6:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <SPI_PCLK_Control+0x104>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	4a23      	ldr	r2, [pc, #140]	@ (8000938 <SPI_PCLK_Control+0x104>)
 80008ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80008b0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008b2:	e038      	b.n	8000926 <SPI_PCLK_Control+0xf2>
	else if(EN_DI == CLK_DI){
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d135      	bne.n	8000926 <SPI_PCLK_Control+0xf2>
		if(pSPIx == SPI1){
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000934 <SPI_PCLK_Control+0x100>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d106      	bne.n	80008d0 <SPI_PCLK_Control+0x9c>
			SPI1_PCLK_DI();
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <SPI_PCLK_Control+0x104>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000938 <SPI_PCLK_Control+0x104>)
 80008c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008cc:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008ce:	e02a      	b.n	8000926 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI2){
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a1a      	ldr	r2, [pc, #104]	@ (800093c <SPI_PCLK_Control+0x108>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d106      	bne.n	80008e6 <SPI_PCLK_Control+0xb2>
			SPI2_PCLK_DI();
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <SPI_PCLK_Control+0x104>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	4a16      	ldr	r2, [pc, #88]	@ (8000938 <SPI_PCLK_Control+0x104>)
 80008de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008e2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008e4:	e01f      	b.n	8000926 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI3){
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a15      	ldr	r2, [pc, #84]	@ (8000940 <SPI_PCLK_Control+0x10c>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d106      	bne.n	80008fc <SPI_PCLK_Control+0xc8>
			SPI3_PCLK_DI();
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <SPI_PCLK_Control+0x104>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	4a11      	ldr	r2, [pc, #68]	@ (8000938 <SPI_PCLK_Control+0x104>)
 80008f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008f8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008fa:	e014      	b.n	8000926 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI4){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <SPI_PCLK_Control+0x110>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d106      	bne.n	8000912 <SPI_PCLK_Control+0xde>
			SPI4_PCLK_DI();
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <SPI_PCLK_Control+0x104>)
 8000906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000908:	4a0b      	ldr	r2, [pc, #44]	@ (8000938 <SPI_PCLK_Control+0x104>)
 800090a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800090e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000910:	e009      	b.n	8000926 <SPI_PCLK_Control+0xf2>
		else if(pSPIx == SPI5){
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a0c      	ldr	r2, [pc, #48]	@ (8000948 <SPI_PCLK_Control+0x114>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d105      	bne.n	8000926 <SPI_PCLK_Control+0xf2>
			SPI5_PCLK_DI();
 800091a:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <SPI_PCLK_Control+0x104>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	4a06      	ldr	r2, [pc, #24]	@ (8000938 <SPI_PCLK_Control+0x104>)
 8000920:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000924:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40013000 	.word	0x40013000
 8000938:	40023800 	.word	0x40023800
 800093c:	40003800 	.word	0x40003800
 8000940:	40003c00 	.word	0x40003c00
 8000944:	40013400 	.word	0x40013400
 8000948:	40015000 	.word	0x40015000

0800094c <SPI_Init>:

/*SPI Initialize & Deinitialize APIs*/
void SPI_Init(SPIx_Handle_t *pSPIHandle){
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    //Configure the SPI CR1 Register
	uint32_t tempreg = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]

	//Initialize SPI Peripheral clock
	SPI_PCLK_Control(pSPIHandle->pSPIx, CLK_EN);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2101      	movs	r1, #1
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff68 	bl	8000834 <SPI_PCLK_Control>

	//Configure SPI Peripheral
	//1. Configure SPI Device Mode
	tempreg |= pSPIHandle->SPIx_Config.SPI_DEVICE_MODE << SPI_CR1_MSTR_BIT;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	791b      	ldrb	r3, [r3, #4]
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	4313      	orrs	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]

	//2. Configure the SPI Bus configuration
	if(pSPIHandle->SPIx_Config.SPI_BUS_CONFIG == SPI_BUS_CONFIG_FULL_DUPLEX){
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	795b      	ldrb	r3, [r3, #5]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d104      	bne.n	8000982 <SPI_Init+0x36>
		//BIDI Mode should be cleared - 2-line Unidirectional data mode selected
		tempreg &= ~(1<<SPI_CR1_BIDI_MODE_BIT);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	e014      	b.n	80009ac <SPI_Init+0x60>
	} 
	else if(pSPIHandle->SPIx_Config.SPI_BUS_CONFIG == SPI_BUS_CONFIG_HALF_DUPLEX){
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	795b      	ldrb	r3, [r3, #5]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d104      	bne.n	8000994 <SPI_Init+0x48>
		//BIDI Mode should be Set - 1-line bidirectional mode selected
		tempreg |= (1<<SPI_CR1_BIDI_MODE_BIT);
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	e00b      	b.n	80009ac <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIx_Config.SPI_BUS_CONFIG == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	795b      	ldrb	r3, [r3, #5]
 8000998:	2b03      	cmp	r3, #3
 800099a:	d107      	bne.n	80009ac <SPI_Init+0x60>
		//BIDI Mode should be cleared - 2-line unidirectional mode selected
		tempreg &= ~(1<<SPI_CR1_BIDI_MODE_BIT);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009a2:	60fb      	str	r3, [r7, #12]
		//RXONLY Bit also needs to be Set 
		tempreg |= (1<<SPI_CR1_RX_ONLY_BIT);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009aa:	60fb      	str	r3, [r7, #12]
	else{
		//Error!
	}

	//3. Configure the SPI Clock Speed
	if(pSPIHandle->SPIx_Config.SPI_DEVICE_MODE == SPI_DEVICE_MODE_MASTER){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d105      	bne.n	80009c0 <SPI_Init+0x74>
		//IF configured in master mode, then only set the baud rate
		tempreg |= (pSPIHandle->SPIx_Config.SPI_SCLK_SPEED << SPI_CR1_BR_BIT);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	799b      	ldrb	r3, [r3, #6]
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	4313      	orrs	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
	}

	//4. Configure the SPI Data frame format
	if(pSPIHandle->SPIx_Config.SPI_DFF == SPI_DFF_16BIT){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	79db      	ldrb	r3, [r3, #7]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d104      	bne.n	80009d2 <SPI_Init+0x86>
		//Set DFF to 16bits
		tempreg |= (1 << SPI_CR1_DFF_BIT);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e003      	b.n	80009da <SPI_Init+0x8e>
	}
	else{
		//Set DFF to 8 bits (default)
		tempreg &= ~(1 << SPI_CR1_DFF_BIT);	
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80009d8:	60fb      	str	r3, [r7, #12]
	}

	//5. Configure CPOL & CPHA
	if(pSPIHandle->SPIx_Config.SPI_CPOL == SPI_CPOL_HIGH){
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7a1b      	ldrb	r3, [r3, #8]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d104      	bne.n	80009ec <SPI_Init+0xa0>
		//Set: CPOL idle state as HIGH
		tempreg |= (1 << SPI_CR1_CPOL_BIT);	//Set CPOL
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	e003      	b.n	80009f4 <SPI_Init+0xa8>
	}
	else{
		//Clear: CPOL idle state as LOW
		tempreg &= ~(1 << SPI_CR1_CPOL_BIT);	//Set CPOL
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f023 0302 	bic.w	r3, r3, #2
 80009f2:	60fb      	str	r3, [r7, #12]
	}
	
	if(pSPIHandle->SPIx_Config.SPI_CPHA == SPI_CPHA_HIGH){
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7a5b      	ldrb	r3, [r3, #9]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d104      	bne.n	8000a06 <SPI_Init+0xba>
		//Set: CPHA idle state as HIGH
		tempreg |= (1 << SPI_CR1_CPHA_BIT);	//Set CPHA
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	e003      	b.n	8000a0e <SPI_Init+0xc2>
	}
	else{
		//Clear: CPHA idle state as LOW
		tempreg &= ~(1 << SPI_CR1_CPHA_BIT);	//Set CPHA
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f023 0301 	bic.w	r3, r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
	}

	//Configure SPI SSM
	if(pSPIHandle->SPIx_Config.SPI_SSM == SPI_SSM_ENABLED){
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	7a9b      	ldrb	r3, [r3, #10]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d104      	bne.n	8000a20 <SPI_Init+0xd4>
		//Set SSM bit == 1
		tempreg |= (1 << SPI_CR1_SSM_BIT);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	e003      	b.n	8000a28 <SPI_Init+0xdc>
		//Set SSI bit == 1 , so NSS pin is pulled high
	}
	else{
		tempreg &= ~(1 << SPI_CR1_SSM_BIT);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000a26:	60fb      	str	r3, [r7, #12]
	}

	//Initialize the SPI Peripheral with all configured settings
	pSPIHandle->pSPIx->SPI_CR1 |= tempreg;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6819      	ldr	r1, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	430a      	orrs	r2, r1
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <SPI_Enable>:
/*
 * SPI Enable API
 *
 * 
*/
void SPI_Enable(SPI_RegDef_t *pSPIx){
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	//Enable the SPE Bit in SPI_CR1 Register
	pSPIx->SPI_CR1 |= (1 << SPI_CR1_SPE_BIT);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <SPI_SSOE_Configure>:
/*
 * SPI SSOE Configure API
 *
 * 
*/
void SPI_SSOE_Configure(SPI_RegDef_t *pSPIx, uint8_t EN_DI){
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
	//
	if(EN_DI == ENABLE){
 8000a6c:	78fb      	ldrb	r3, [r7, #3]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d106      	bne.n	8000a80 <SPI_SSOE_Configure+0x20>
		pSPIx->SPI_CR2 |= (1 << SPI_CR2_SSOE_BIT);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f043 0204 	orr.w	r2, r3, #4
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	605a      	str	r2, [r3, #4]
	}
	else{
		pSPIx->SPI_CR2 &= ~(1 << SPI_CR2_SSOE_BIT);
	}
}
 8000a7e:	e005      	b.n	8000a8c <SPI_SSOE_Configure+0x2c>
		pSPIx->SPI_CR2 &= ~(1 << SPI_CR2_SSOE_BIT);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f023 0204 	bic.w	r2, r3, #4
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	605a      	str	r2, [r3, #4]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <SPI_FullDuplex_Slave>:

    // Wait for SPI busy flag (BSY) to clear (ensure last transfer is complete)
    while (pSPIx->SPI_SR & (1 << SPI_SR_BSY_BIT));
}

void SPI_FullDuplex_Slave(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, volatile uint8_t *pRxBuffer, uint32_t length){
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
 8000aa4:	603b      	str	r3, [r7, #0]
    while (length > 0) {
 8000aa6:	e020      	b.n	8000aea <SPI_FullDuplex_Slave+0x52>
        // Wait for RXNE flag (Receive Buffer Not Empty)
        while( !(pSPIx->SPI_SR & (1 << SPI_SR_RXNE_BIT)));
 8000aa8:	bf00      	nop
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0f9      	beq.n	8000aaa <SPI_FullDuplex_Slave+0x12>

        // Read data from SPI_DR (Receive Data Register)
        *pRxBuffer = pSPIx->SPI_DR;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	701a      	strb	r2, [r3, #0]

        // Wait for TXE flag (Transmit Buffer Empty)
        while (!(pSPIx->SPI_SR & (1 << SPI_SR_TXE_BIT)));
 8000ac0:	bf00      	nop
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f9      	beq.n	8000ac2 <SPI_FullDuplex_Slave+0x2a>

        // Write data to SPI_DR (Transmit Data Register)
        pSPIx->SPI_DR = *pTxBuffer;
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	60da      	str	r2, [r3, #12]

        // Increment buffer pointers and decrement length
        pTxBuffer++;
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	3301      	adds	r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
        pRxBuffer++;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
        length--;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	603b      	str	r3, [r7, #0]
    while (length > 0) {
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1db      	bne.n	8000aa8 <SPI_FullDuplex_Slave+0x10>
    }

    // Wait for SPI busy flag (BSY) to clear (ensure last transfer is complete)
    while (pSPIx->SPI_SR & (1 << SPI_SR_BSY_BIT));
 8000af0:	bf00      	nop
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f9      	bne.n	8000af2 <SPI_FullDuplex_Slave+0x5a>
}
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <main>:
	int c;
}data_t;


int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
	//initialise_monitor_handles();

	/*------------------------------------------*/
	//Create a buffer
	//char user_data[BUFFER_SIZE] = "Hello there";	  	//slave mode
	data_t data_tx = {50, 70, 80};
 8000b12:	4a1a      	ldr	r2, [pc, #104]	@ (8000b7c <main+0x70>)
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}


	/* Creating an 11 bit RX buffer */
	//char rx_buffer[BUFFER_SIZE] = {0};  // Initialize with zeros
	data_t data_rx = {0};
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]

	printf("SWV printf Debugging Initialized\n");
 8000b28:	4815      	ldr	r0, [pc, #84]	@ (8000b80 <main+0x74>)
 8000b2a:	f000 fa9f 	bl	800106c <puts>

	//Configure & Initialize SPI2 Peripheral
	SPI2_GPIOInit();
 8000b2e:	f000 f82d 	bl	8000b8c <SPI2_GPIOInit>


	SPI2_Init_Slave(); 			//for slave mode
 8000b32:	f000 f859 	bl	8000be8 <SPI2_Init_Slave>


	TIMx_Delay_ms_Init(TIM2);
 8000b36:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000b3a:	f7ff fe62 	bl	8000802 <TIMx_Delay_ms_Init>
	// #if SPI_MASTER_MODE
	// #else
	// 	SPI_SendData(SPI2, (uint8_t *)user_data, BUFFER_SIZE);	//Set SPI TX Buffer
	// #endif
	
	SPI_SSOE_Configure(SPI2, ENABLE);
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4810      	ldr	r0, [pc, #64]	@ (8000b84 <main+0x78>)
 8000b42:	f7ff ff8d 	bl	8000a60 <SPI_SSOE_Configure>
	SPI_Enable(SPI2);
 8000b46:	480f      	ldr	r0, [pc, #60]	@ (8000b84 <main+0x78>)
 8000b48:	f7ff ff7a 	bl	8000a40 <SPI_Enable>
	//SPI_SendData(SPI2, (uint8_t *)user_data, BUFFER_SIZE);	//Set SPI TX Buffer

	/*Slave loop code -- full duple - ,receive and transmit*/
	for(;;){
		//SPI_RX_TEST(rx_buffer);
		SPI_FullDuplex_Slave(SPI2, (uint8_t *)&data_tx, (uint8_t *)&data_rx, sizeof(data_t));
 8000b4c:	463a      	mov	r2, r7
 8000b4e:	f107 010c 	add.w	r1, r7, #12
 8000b52:	230c      	movs	r3, #12
 8000b54:	480b      	ldr	r0, [pc, #44]	@ (8000b84 <main+0x78>)
 8000b56:	f7ff ff9f 	bl	8000a98 <SPI_FullDuplex_Slave>
		printf("Received data: %d\n", data_rx.a);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480a      	ldr	r0, [pc, #40]	@ (8000b88 <main+0x7c>)
 8000b60:	f000 fa1c 	bl	8000f9c <iprintf>
		printf("Received data: %d\n", data_rx.b);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4619      	mov	r1, r3
 8000b68:	4807      	ldr	r0, [pc, #28]	@ (8000b88 <main+0x7c>)
 8000b6a:	f000 fa17 	bl	8000f9c <iprintf>
		printf("Received data: %d\n", data_rx.c);
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	4619      	mov	r1, r3
 8000b72:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <main+0x7c>)
 8000b74:	f000 fa12 	bl	8000f9c <iprintf>
		SPI_FullDuplex_Slave(SPI2, (uint8_t *)&data_tx, (uint8_t *)&data_rx, sizeof(data_t));
 8000b78:	bf00      	nop
 8000b7a:	e7e7      	b.n	8000b4c <main+0x40>
 8000b7c:	08001d84 	.word	0x08001d84
 8000b80:	08001d4c 	.word	0x08001d4c
 8000b84:	40003800 	.word	0x40003800
 8000b88:	08001d70 	.word	0x08001d70

08000b8c <SPI2_GPIOInit>:
	
}



void SPI2_GPIOInit(void){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
	//Create a GPIO Handle and perform configure
	GPIOx_Handle_t SPIPins;

	SPIPins.pGPIOx_Base = GPIOB;
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <SPI2_GPIOInit+0x58>)
 8000b94:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIOx_PinMode = GPIO_MODE_ALTERNATE;
 8000b96:	2302      	movs	r3, #2
 8000b98:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIOx_PinAltFunMode = GPIO_AFR_AF5;
 8000b9a:	2305      	movs	r3, #5
 8000b9c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIOx_PinOPType = GPIO_OUTPUT_PUSH_PULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIOx_PinSpeed = GPIO_SPEED_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIOx_PinPUPDControl = GPIO_PUPD_PULL_UP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	733b      	strb	r3, [r7, #12]

	//Initialize MOSI Pin
	SPIPins.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_15;
 8000baa:	230f      	movs	r3, #15
 8000bac:	723b      	strb	r3, [r7, #8]
	GPIOx_Init(&SPIPins);
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fc09 	bl	80003c8 <GPIOx_Init>

	//Initialize MISO Pin
	SPIPins.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_14;
 8000bb6:	230e      	movs	r3, #14
 8000bb8:	723b      	strb	r3, [r7, #8]
	GPIOx_Init(&SPIPins);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fc03 	bl	80003c8 <GPIOx_Init>

	//Initialize SCK
	SPIPins.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_13;
 8000bc2:	230d      	movs	r3, #13
 8000bc4:	723b      	strb	r3, [r7, #8]
	GPIOx_Init(&SPIPins);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fbfd 	bl	80003c8 <GPIOx_Init>

	//Initialize NSS
	SPIPins.GPIO_PinConfig.GPIOx_PinNumber = GPIO_PIN_12;
 8000bce:	230c      	movs	r3, #12
 8000bd0:	723b      	strb	r3, [r7, #8]

	//SPI Pins configured!
	GPIOx_Init(&SPIPins);
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fbf7 	bl	80003c8 <GPIOx_Init>
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40020400 	.word	0x40020400

08000be8 <SPI2_Init_Slave>:

void SPI2_Init_Slave(void){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
	//Configure and Initialize SPI2 peripheral
	SPIx_Handle_t SPI2_Handle;
	memset(&SPI2_Handle, 0, sizeof(SPIx_Handle_t));	//clear the handle before performing the operations on it.
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fb19 	bl	800122c <memset>

	SPI2_Handle.pSPIx = SPI2;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <SPI2_Init_Slave+0x40>)
 8000bfc:	607b      	str	r3, [r7, #4]
	SPI2_Handle.SPIx_Config.SPI_DEVICE_MODE = SPI_DEVICE_MODE_SLAVE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	723b      	strb	r3, [r7, #8]
	SPI2_Handle.SPIx_Config.SPI_BUS_CONFIG = SPI_BUS_CONFIG_FULL_DUPLEX;
 8000c02:	2301      	movs	r3, #1
 8000c04:	727b      	strb	r3, [r7, #9]
	//SPI2_Handle.SPIx_Config.SPI_SCLK_SPEED = SPI_BAUDRATE_DIV8;
	SPI2_Handle.SPIx_Config.SPI_DFF = SPI_DFF_8BIT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	72fb      	strb	r3, [r7, #11]

	//Configure to Mode 0
	SPI2_Handle.SPIx_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	733b      	strb	r3, [r7, #12]
	SPI2_Handle.SPIx_Config.SPI_CPHA = SPI_CPHA_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	737b      	strb	r3, [r7, #13]

	//Enable Software Slave management for NSS
	// SPI2_Handle.SPIx_Config.SPI_SSM = SPI_SSM_ENABLED;
	SPI2_Handle.SPIx_Config.SPI_SSM = SPI_SSM_DISABLED;		//Hardware Slave management enabled
 8000c12:	2300      	movs	r3, #0
 8000c14:	73bb      	strb	r3, [r7, #14]
	
	//Initialize SPI2 Peripheral
	SPI_Init(&SPI2_Handle);
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fe97 	bl	800094c <SPI_Init>
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40003800 	.word	0x40003800

08000c2c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <ITM_SendChar+0x48>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c74 <ITM_SendChar+0x48>)
 8000c3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c40:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <ITM_SendChar+0x4c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a0c      	ldr	r2, [pc, #48]	@ (8000c78 <ITM_SendChar+0x4c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000c4e:	bf00      	nop
 8000c50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f8      	beq.n	8000c50 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000c5e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	6013      	str	r3, [r2, #0]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000edfc 	.word	0xe000edfc
 8000c78:	e0000e00 	.word	0xe0000e00

08000c7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	e00a      	b.n	8000ca4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c8e:	f3af 8000 	nop.w
 8000c92:	4601      	mov	r1, r0
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60ba      	str	r2, [r7, #8]
 8000c9a:	b2ca      	uxtb	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbf0      	blt.n	8000c8e <_read+0x12>
  }

  return len;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	e009      	b.n	8000cdc <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	60ba      	str	r2, [r7, #8]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ffab 	bl	8000c2c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbf1      	blt.n	8000cc8 <_write+0x12>
  }
  return len;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_close>:

int _close(int file)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d16:	605a      	str	r2, [r3, #4]
  return 0;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_isatty>:

int _isatty(int file)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d60:	4a14      	ldr	r2, [pc, #80]	@ (8000db4 <_sbrk+0x5c>)
 8000d62:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <_sbrk+0x60>)
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <_sbrk+0x64>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <_sbrk+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7a:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d207      	bcs.n	8000d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d88:	f000 fa9e 	bl	80012c8 <__errno>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	220c      	movs	r2, #12
 8000d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	e009      	b.n	8000dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a05      	ldr	r2, [pc, #20]	@ (8000dbc <_sbrk+0x64>)
 8000da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20020000 	.word	0x20020000
 8000db8:	00000400 	.word	0x00000400
 8000dbc:	20000078 	.word	0x20000078
 8000dc0:	200001c8 	.word	0x200001c8

08000dc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc4:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	@ (8000e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e10 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000df2:	f000 fa6f 	bl	80012d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df6:	f7ff fe89 	bl	8000b0c <main>

08000dfa <LoopForever>:

LoopForever:
  b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
  ldr   r0, =_estack
 8000dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e08:	08001de8 	.word	0x08001de8
  ldr r2, =_sbss
 8000e0c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e10:	200001c8 	.word	0x200001c8

08000e14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC_IRQHandler>
	...

08000e18 <std>:
 8000e18:	2300      	movs	r3, #0
 8000e1a:	b510      	push	{r4, lr}
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8000e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e26:	6083      	str	r3, [r0, #8]
 8000e28:	8181      	strh	r1, [r0, #12]
 8000e2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8000e2c:	81c2      	strh	r2, [r0, #14]
 8000e2e:	6183      	str	r3, [r0, #24]
 8000e30:	4619      	mov	r1, r3
 8000e32:	2208      	movs	r2, #8
 8000e34:	305c      	adds	r0, #92	@ 0x5c
 8000e36:	f000 f9f9 	bl	800122c <memset>
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <std+0x58>)
 8000e3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <std+0x5c>)
 8000e40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000e42:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <std+0x60>)
 8000e44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000e46:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <std+0x64>)
 8000e48:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e80 <std+0x68>)
 8000e4c:	6224      	str	r4, [r4, #32]
 8000e4e:	429c      	cmp	r4, r3
 8000e50:	d006      	beq.n	8000e60 <std+0x48>
 8000e52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000e56:	4294      	cmp	r4, r2
 8000e58:	d002      	beq.n	8000e60 <std+0x48>
 8000e5a:	33d0      	adds	r3, #208	@ 0xd0
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	d105      	bne.n	8000e6c <std+0x54>
 8000e60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e68:	f000 ba58 	b.w	800131c <__retarget_lock_init_recursive>
 8000e6c:	bd10      	pop	{r4, pc}
 8000e6e:	bf00      	nop
 8000e70:	0800107d 	.word	0x0800107d
 8000e74:	0800109f 	.word	0x0800109f
 8000e78:	080010d7 	.word	0x080010d7
 8000e7c:	080010fb 	.word	0x080010fb
 8000e80:	2000007c 	.word	0x2000007c

08000e84 <stdio_exit_handler>:
 8000e84:	4a02      	ldr	r2, [pc, #8]	@ (8000e90 <stdio_exit_handler+0xc>)
 8000e86:	4903      	ldr	r1, [pc, #12]	@ (8000e94 <stdio_exit_handler+0x10>)
 8000e88:	4803      	ldr	r0, [pc, #12]	@ (8000e98 <stdio_exit_handler+0x14>)
 8000e8a:	f000 b869 	b.w	8000f60 <_fwalk_sglue>
 8000e8e:	bf00      	nop
 8000e90:	20000000 	.word	0x20000000
 8000e94:	08001bbd 	.word	0x08001bbd
 8000e98:	20000010 	.word	0x20000010

08000e9c <cleanup_stdio>:
 8000e9c:	6841      	ldr	r1, [r0, #4]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <cleanup_stdio+0x34>)
 8000ea0:	4299      	cmp	r1, r3
 8000ea2:	b510      	push	{r4, lr}
 8000ea4:	4604      	mov	r4, r0
 8000ea6:	d001      	beq.n	8000eac <cleanup_stdio+0x10>
 8000ea8:	f000 fe88 	bl	8001bbc <_fflush_r>
 8000eac:	68a1      	ldr	r1, [r4, #8]
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <cleanup_stdio+0x38>)
 8000eb0:	4299      	cmp	r1, r3
 8000eb2:	d002      	beq.n	8000eba <cleanup_stdio+0x1e>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f000 fe81 	bl	8001bbc <_fflush_r>
 8000eba:	68e1      	ldr	r1, [r4, #12]
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <cleanup_stdio+0x3c>)
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d004      	beq.n	8000ecc <cleanup_stdio+0x30>
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ec8:	f000 be78 	b.w	8001bbc <_fflush_r>
 8000ecc:	bd10      	pop	{r4, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000007c 	.word	0x2000007c
 8000ed4:	200000e4 	.word	0x200000e4
 8000ed8:	2000014c 	.word	0x2000014c

08000edc <global_stdio_init.part.0>:
 8000edc:	b510      	push	{r4, lr}
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <global_stdio_init.part.0+0x30>)
 8000ee0:	4c0b      	ldr	r4, [pc, #44]	@ (8000f10 <global_stdio_init.part.0+0x34>)
 8000ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8000f14 <global_stdio_init.part.0+0x38>)
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2104      	movs	r1, #4
 8000eec:	f7ff ff94 	bl	8000e18 <std>
 8000ef0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2109      	movs	r1, #9
 8000ef8:	f7ff ff8e 	bl	8000e18 <std>
 8000efc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000f00:	2202      	movs	r2, #2
 8000f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f06:	2112      	movs	r1, #18
 8000f08:	f7ff bf86 	b.w	8000e18 <std>
 8000f0c:	200001b4 	.word	0x200001b4
 8000f10:	2000007c 	.word	0x2000007c
 8000f14:	08000e85 	.word	0x08000e85

08000f18 <__sfp_lock_acquire>:
 8000f18:	4801      	ldr	r0, [pc, #4]	@ (8000f20 <__sfp_lock_acquire+0x8>)
 8000f1a:	f000 ba00 	b.w	800131e <__retarget_lock_acquire_recursive>
 8000f1e:	bf00      	nop
 8000f20:	200001bd 	.word	0x200001bd

08000f24 <__sfp_lock_release>:
 8000f24:	4801      	ldr	r0, [pc, #4]	@ (8000f2c <__sfp_lock_release+0x8>)
 8000f26:	f000 b9fb 	b.w	8001320 <__retarget_lock_release_recursive>
 8000f2a:	bf00      	nop
 8000f2c:	200001bd 	.word	0x200001bd

08000f30 <__sinit>:
 8000f30:	b510      	push	{r4, lr}
 8000f32:	4604      	mov	r4, r0
 8000f34:	f7ff fff0 	bl	8000f18 <__sfp_lock_acquire>
 8000f38:	6a23      	ldr	r3, [r4, #32]
 8000f3a:	b11b      	cbz	r3, 8000f44 <__sinit+0x14>
 8000f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f40:	f7ff bff0 	b.w	8000f24 <__sfp_lock_release>
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <__sinit+0x28>)
 8000f46:	6223      	str	r3, [r4, #32]
 8000f48:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <__sinit+0x2c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f5      	bne.n	8000f3c <__sinit+0xc>
 8000f50:	f7ff ffc4 	bl	8000edc <global_stdio_init.part.0>
 8000f54:	e7f2      	b.n	8000f3c <__sinit+0xc>
 8000f56:	bf00      	nop
 8000f58:	08000e9d 	.word	0x08000e9d
 8000f5c:	200001b4 	.word	0x200001b4

08000f60 <_fwalk_sglue>:
 8000f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f64:	4607      	mov	r7, r0
 8000f66:	4688      	mov	r8, r1
 8000f68:	4614      	mov	r4, r2
 8000f6a:	2600      	movs	r6, #0
 8000f6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f70:	f1b9 0901 	subs.w	r9, r9, #1
 8000f74:	d505      	bpl.n	8000f82 <_fwalk_sglue+0x22>
 8000f76:	6824      	ldr	r4, [r4, #0]
 8000f78:	2c00      	cmp	r4, #0
 8000f7a:	d1f7      	bne.n	8000f6c <_fwalk_sglue+0xc>
 8000f7c:	4630      	mov	r0, r6
 8000f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f82:	89ab      	ldrh	r3, [r5, #12]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d907      	bls.n	8000f98 <_fwalk_sglue+0x38>
 8000f88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	d003      	beq.n	8000f98 <_fwalk_sglue+0x38>
 8000f90:	4629      	mov	r1, r5
 8000f92:	4638      	mov	r0, r7
 8000f94:	47c0      	blx	r8
 8000f96:	4306      	orrs	r6, r0
 8000f98:	3568      	adds	r5, #104	@ 0x68
 8000f9a:	e7e9      	b.n	8000f70 <_fwalk_sglue+0x10>

08000f9c <iprintf>:
 8000f9c:	b40f      	push	{r0, r1, r2, r3}
 8000f9e:	b507      	push	{r0, r1, r2, lr}
 8000fa0:	4906      	ldr	r1, [pc, #24]	@ (8000fbc <iprintf+0x20>)
 8000fa2:	ab04      	add	r3, sp, #16
 8000fa4:	6808      	ldr	r0, [r1, #0]
 8000fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8000faa:	6881      	ldr	r1, [r0, #8]
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f000 fadb 	bl	8001568 <_vfiprintf_r>
 8000fb2:	b003      	add	sp, #12
 8000fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000fb8:	b004      	add	sp, #16
 8000fba:	4770      	bx	lr
 8000fbc:	2000000c 	.word	0x2000000c

08000fc0 <_puts_r>:
 8000fc0:	6a03      	ldr	r3, [r0, #32]
 8000fc2:	b570      	push	{r4, r5, r6, lr}
 8000fc4:	6884      	ldr	r4, [r0, #8]
 8000fc6:	4605      	mov	r5, r0
 8000fc8:	460e      	mov	r6, r1
 8000fca:	b90b      	cbnz	r3, 8000fd0 <_puts_r+0x10>
 8000fcc:	f7ff ffb0 	bl	8000f30 <__sinit>
 8000fd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000fd2:	07db      	lsls	r3, r3, #31
 8000fd4:	d405      	bmi.n	8000fe2 <_puts_r+0x22>
 8000fd6:	89a3      	ldrh	r3, [r4, #12]
 8000fd8:	0598      	lsls	r0, r3, #22
 8000fda:	d402      	bmi.n	8000fe2 <_puts_r+0x22>
 8000fdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000fde:	f000 f99e 	bl	800131e <__retarget_lock_acquire_recursive>
 8000fe2:	89a3      	ldrh	r3, [r4, #12]
 8000fe4:	0719      	lsls	r1, r3, #28
 8000fe6:	d502      	bpl.n	8000fee <_puts_r+0x2e>
 8000fe8:	6923      	ldr	r3, [r4, #16]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d135      	bne.n	800105a <_puts_r+0x9a>
 8000fee:	4621      	mov	r1, r4
 8000ff0:	4628      	mov	r0, r5
 8000ff2:	f000 f8c5 	bl	8001180 <__swsetup_r>
 8000ff6:	b380      	cbz	r0, 800105a <_puts_r+0x9a>
 8000ff8:	f04f 35ff 	mov.w	r5, #4294967295
 8000ffc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ffe:	07da      	lsls	r2, r3, #31
 8001000:	d405      	bmi.n	800100e <_puts_r+0x4e>
 8001002:	89a3      	ldrh	r3, [r4, #12]
 8001004:	059b      	lsls	r3, r3, #22
 8001006:	d402      	bmi.n	800100e <_puts_r+0x4e>
 8001008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800100a:	f000 f989 	bl	8001320 <__retarget_lock_release_recursive>
 800100e:	4628      	mov	r0, r5
 8001010:	bd70      	pop	{r4, r5, r6, pc}
 8001012:	2b00      	cmp	r3, #0
 8001014:	da04      	bge.n	8001020 <_puts_r+0x60>
 8001016:	69a2      	ldr	r2, [r4, #24]
 8001018:	429a      	cmp	r2, r3
 800101a:	dc17      	bgt.n	800104c <_puts_r+0x8c>
 800101c:	290a      	cmp	r1, #10
 800101e:	d015      	beq.n	800104c <_puts_r+0x8c>
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	6022      	str	r2, [r4, #0]
 8001026:	7019      	strb	r1, [r3, #0]
 8001028:	68a3      	ldr	r3, [r4, #8]
 800102a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800102e:	3b01      	subs	r3, #1
 8001030:	60a3      	str	r3, [r4, #8]
 8001032:	2900      	cmp	r1, #0
 8001034:	d1ed      	bne.n	8001012 <_puts_r+0x52>
 8001036:	2b00      	cmp	r3, #0
 8001038:	da11      	bge.n	800105e <_puts_r+0x9e>
 800103a:	4622      	mov	r2, r4
 800103c:	210a      	movs	r1, #10
 800103e:	4628      	mov	r0, r5
 8001040:	f000 f85f 	bl	8001102 <__swbuf_r>
 8001044:	3001      	adds	r0, #1
 8001046:	d0d7      	beq.n	8000ff8 <_puts_r+0x38>
 8001048:	250a      	movs	r5, #10
 800104a:	e7d7      	b.n	8000ffc <_puts_r+0x3c>
 800104c:	4622      	mov	r2, r4
 800104e:	4628      	mov	r0, r5
 8001050:	f000 f857 	bl	8001102 <__swbuf_r>
 8001054:	3001      	adds	r0, #1
 8001056:	d1e7      	bne.n	8001028 <_puts_r+0x68>
 8001058:	e7ce      	b.n	8000ff8 <_puts_r+0x38>
 800105a:	3e01      	subs	r6, #1
 800105c:	e7e4      	b.n	8001028 <_puts_r+0x68>
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	6022      	str	r2, [r4, #0]
 8001064:	220a      	movs	r2, #10
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e7ee      	b.n	8001048 <_puts_r+0x88>
	...

0800106c <puts>:
 800106c:	4b02      	ldr	r3, [pc, #8]	@ (8001078 <puts+0xc>)
 800106e:	4601      	mov	r1, r0
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	f7ff bfa5 	b.w	8000fc0 <_puts_r>
 8001076:	bf00      	nop
 8001078:	2000000c 	.word	0x2000000c

0800107c <__sread>:
 800107c:	b510      	push	{r4, lr}
 800107e:	460c      	mov	r4, r1
 8001080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001084:	f000 f8fc 	bl	8001280 <_read_r>
 8001088:	2800      	cmp	r0, #0
 800108a:	bfab      	itete	ge
 800108c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800108e:	89a3      	ldrhlt	r3, [r4, #12]
 8001090:	181b      	addge	r3, r3, r0
 8001092:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001096:	bfac      	ite	ge
 8001098:	6563      	strge	r3, [r4, #84]	@ 0x54
 800109a:	81a3      	strhlt	r3, [r4, #12]
 800109c:	bd10      	pop	{r4, pc}

0800109e <__swrite>:
 800109e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a2:	461f      	mov	r7, r3
 80010a4:	898b      	ldrh	r3, [r1, #12]
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	4605      	mov	r5, r0
 80010aa:	460c      	mov	r4, r1
 80010ac:	4616      	mov	r6, r2
 80010ae:	d505      	bpl.n	80010bc <__swrite+0x1e>
 80010b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b4:	2302      	movs	r3, #2
 80010b6:	2200      	movs	r2, #0
 80010b8:	f000 f8d0 	bl	800125c <_lseek_r>
 80010bc:	89a3      	ldrh	r3, [r4, #12]
 80010be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010c6:	81a3      	strh	r3, [r4, #12]
 80010c8:	4632      	mov	r2, r6
 80010ca:	463b      	mov	r3, r7
 80010cc:	4628      	mov	r0, r5
 80010ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010d2:	f000 b8e7 	b.w	80012a4 <_write_r>

080010d6 <__sseek>:
 80010d6:	b510      	push	{r4, lr}
 80010d8:	460c      	mov	r4, r1
 80010da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010de:	f000 f8bd 	bl	800125c <_lseek_r>
 80010e2:	1c43      	adds	r3, r0, #1
 80010e4:	89a3      	ldrh	r3, [r4, #12]
 80010e6:	bf15      	itete	ne
 80010e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80010ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80010ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80010f2:	81a3      	strheq	r3, [r4, #12]
 80010f4:	bf18      	it	ne
 80010f6:	81a3      	strhne	r3, [r4, #12]
 80010f8:	bd10      	pop	{r4, pc}

080010fa <__sclose>:
 80010fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010fe:	f000 b89d 	b.w	800123c <_close_r>

08001102 <__swbuf_r>:
 8001102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001104:	460e      	mov	r6, r1
 8001106:	4614      	mov	r4, r2
 8001108:	4605      	mov	r5, r0
 800110a:	b118      	cbz	r0, 8001114 <__swbuf_r+0x12>
 800110c:	6a03      	ldr	r3, [r0, #32]
 800110e:	b90b      	cbnz	r3, 8001114 <__swbuf_r+0x12>
 8001110:	f7ff ff0e 	bl	8000f30 <__sinit>
 8001114:	69a3      	ldr	r3, [r4, #24]
 8001116:	60a3      	str	r3, [r4, #8]
 8001118:	89a3      	ldrh	r3, [r4, #12]
 800111a:	071a      	lsls	r2, r3, #28
 800111c:	d501      	bpl.n	8001122 <__swbuf_r+0x20>
 800111e:	6923      	ldr	r3, [r4, #16]
 8001120:	b943      	cbnz	r3, 8001134 <__swbuf_r+0x32>
 8001122:	4621      	mov	r1, r4
 8001124:	4628      	mov	r0, r5
 8001126:	f000 f82b 	bl	8001180 <__swsetup_r>
 800112a:	b118      	cbz	r0, 8001134 <__swbuf_r+0x32>
 800112c:	f04f 37ff 	mov.w	r7, #4294967295
 8001130:	4638      	mov	r0, r7
 8001132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	6922      	ldr	r2, [r4, #16]
 8001138:	1a98      	subs	r0, r3, r2
 800113a:	6963      	ldr	r3, [r4, #20]
 800113c:	b2f6      	uxtb	r6, r6
 800113e:	4283      	cmp	r3, r0
 8001140:	4637      	mov	r7, r6
 8001142:	dc05      	bgt.n	8001150 <__swbuf_r+0x4e>
 8001144:	4621      	mov	r1, r4
 8001146:	4628      	mov	r0, r5
 8001148:	f000 fd38 	bl	8001bbc <_fflush_r>
 800114c:	2800      	cmp	r0, #0
 800114e:	d1ed      	bne.n	800112c <__swbuf_r+0x2a>
 8001150:	68a3      	ldr	r3, [r4, #8]
 8001152:	3b01      	subs	r3, #1
 8001154:	60a3      	str	r3, [r4, #8]
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	6022      	str	r2, [r4, #0]
 800115c:	701e      	strb	r6, [r3, #0]
 800115e:	6962      	ldr	r2, [r4, #20]
 8001160:	1c43      	adds	r3, r0, #1
 8001162:	429a      	cmp	r2, r3
 8001164:	d004      	beq.n	8001170 <__swbuf_r+0x6e>
 8001166:	89a3      	ldrh	r3, [r4, #12]
 8001168:	07db      	lsls	r3, r3, #31
 800116a:	d5e1      	bpl.n	8001130 <__swbuf_r+0x2e>
 800116c:	2e0a      	cmp	r6, #10
 800116e:	d1df      	bne.n	8001130 <__swbuf_r+0x2e>
 8001170:	4621      	mov	r1, r4
 8001172:	4628      	mov	r0, r5
 8001174:	f000 fd22 	bl	8001bbc <_fflush_r>
 8001178:	2800      	cmp	r0, #0
 800117a:	d0d9      	beq.n	8001130 <__swbuf_r+0x2e>
 800117c:	e7d6      	b.n	800112c <__swbuf_r+0x2a>
	...

08001180 <__swsetup_r>:
 8001180:	b538      	push	{r3, r4, r5, lr}
 8001182:	4b29      	ldr	r3, [pc, #164]	@ (8001228 <__swsetup_r+0xa8>)
 8001184:	4605      	mov	r5, r0
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	460c      	mov	r4, r1
 800118a:	b118      	cbz	r0, 8001194 <__swsetup_r+0x14>
 800118c:	6a03      	ldr	r3, [r0, #32]
 800118e:	b90b      	cbnz	r3, 8001194 <__swsetup_r+0x14>
 8001190:	f7ff fece 	bl	8000f30 <__sinit>
 8001194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001198:	0719      	lsls	r1, r3, #28
 800119a:	d422      	bmi.n	80011e2 <__swsetup_r+0x62>
 800119c:	06da      	lsls	r2, r3, #27
 800119e:	d407      	bmi.n	80011b0 <__swsetup_r+0x30>
 80011a0:	2209      	movs	r2, #9
 80011a2:	602a      	str	r2, [r5, #0]
 80011a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011a8:	81a3      	strh	r3, [r4, #12]
 80011aa:	f04f 30ff 	mov.w	r0, #4294967295
 80011ae:	e033      	b.n	8001218 <__swsetup_r+0x98>
 80011b0:	0758      	lsls	r0, r3, #29
 80011b2:	d512      	bpl.n	80011da <__swsetup_r+0x5a>
 80011b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011b6:	b141      	cbz	r1, 80011ca <__swsetup_r+0x4a>
 80011b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011bc:	4299      	cmp	r1, r3
 80011be:	d002      	beq.n	80011c6 <__swsetup_r+0x46>
 80011c0:	4628      	mov	r0, r5
 80011c2:	f000 f8af 	bl	8001324 <_free_r>
 80011c6:	2300      	movs	r3, #0
 80011c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80011ca:	89a3      	ldrh	r3, [r4, #12]
 80011cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80011d0:	81a3      	strh	r3, [r4, #12]
 80011d2:	2300      	movs	r3, #0
 80011d4:	6063      	str	r3, [r4, #4]
 80011d6:	6923      	ldr	r3, [r4, #16]
 80011d8:	6023      	str	r3, [r4, #0]
 80011da:	89a3      	ldrh	r3, [r4, #12]
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	81a3      	strh	r3, [r4, #12]
 80011e2:	6923      	ldr	r3, [r4, #16]
 80011e4:	b94b      	cbnz	r3, 80011fa <__swsetup_r+0x7a>
 80011e6:	89a3      	ldrh	r3, [r4, #12]
 80011e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80011ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011f0:	d003      	beq.n	80011fa <__swsetup_r+0x7a>
 80011f2:	4621      	mov	r1, r4
 80011f4:	4628      	mov	r0, r5
 80011f6:	f000 fd2f 	bl	8001c58 <__smakebuf_r>
 80011fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011fe:	f013 0201 	ands.w	r2, r3, #1
 8001202:	d00a      	beq.n	800121a <__swsetup_r+0x9a>
 8001204:	2200      	movs	r2, #0
 8001206:	60a2      	str	r2, [r4, #8]
 8001208:	6962      	ldr	r2, [r4, #20]
 800120a:	4252      	negs	r2, r2
 800120c:	61a2      	str	r2, [r4, #24]
 800120e:	6922      	ldr	r2, [r4, #16]
 8001210:	b942      	cbnz	r2, 8001224 <__swsetup_r+0xa4>
 8001212:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001216:	d1c5      	bne.n	80011a4 <__swsetup_r+0x24>
 8001218:	bd38      	pop	{r3, r4, r5, pc}
 800121a:	0799      	lsls	r1, r3, #30
 800121c:	bf58      	it	pl
 800121e:	6962      	ldrpl	r2, [r4, #20]
 8001220:	60a2      	str	r2, [r4, #8]
 8001222:	e7f4      	b.n	800120e <__swsetup_r+0x8e>
 8001224:	2000      	movs	r0, #0
 8001226:	e7f7      	b.n	8001218 <__swsetup_r+0x98>
 8001228:	2000000c 	.word	0x2000000c

0800122c <memset>:
 800122c:	4402      	add	r2, r0
 800122e:	4603      	mov	r3, r0
 8001230:	4293      	cmp	r3, r2
 8001232:	d100      	bne.n	8001236 <memset+0xa>
 8001234:	4770      	bx	lr
 8001236:	f803 1b01 	strb.w	r1, [r3], #1
 800123a:	e7f9      	b.n	8001230 <memset+0x4>

0800123c <_close_r>:
 800123c:	b538      	push	{r3, r4, r5, lr}
 800123e:	4d06      	ldr	r5, [pc, #24]	@ (8001258 <_close_r+0x1c>)
 8001240:	2300      	movs	r3, #0
 8001242:	4604      	mov	r4, r0
 8001244:	4608      	mov	r0, r1
 8001246:	602b      	str	r3, [r5, #0]
 8001248:	f7ff fd51 	bl	8000cee <_close>
 800124c:	1c43      	adds	r3, r0, #1
 800124e:	d102      	bne.n	8001256 <_close_r+0x1a>
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	b103      	cbz	r3, 8001256 <_close_r+0x1a>
 8001254:	6023      	str	r3, [r4, #0]
 8001256:	bd38      	pop	{r3, r4, r5, pc}
 8001258:	200001b8 	.word	0x200001b8

0800125c <_lseek_r>:
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	4d07      	ldr	r5, [pc, #28]	@ (800127c <_lseek_r+0x20>)
 8001260:	4604      	mov	r4, r0
 8001262:	4608      	mov	r0, r1
 8001264:	4611      	mov	r1, r2
 8001266:	2200      	movs	r2, #0
 8001268:	602a      	str	r2, [r5, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	f7ff fd66 	bl	8000d3c <_lseek>
 8001270:	1c43      	adds	r3, r0, #1
 8001272:	d102      	bne.n	800127a <_lseek_r+0x1e>
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	b103      	cbz	r3, 800127a <_lseek_r+0x1e>
 8001278:	6023      	str	r3, [r4, #0]
 800127a:	bd38      	pop	{r3, r4, r5, pc}
 800127c:	200001b8 	.word	0x200001b8

08001280 <_read_r>:
 8001280:	b538      	push	{r3, r4, r5, lr}
 8001282:	4d07      	ldr	r5, [pc, #28]	@ (80012a0 <_read_r+0x20>)
 8001284:	4604      	mov	r4, r0
 8001286:	4608      	mov	r0, r1
 8001288:	4611      	mov	r1, r2
 800128a:	2200      	movs	r2, #0
 800128c:	602a      	str	r2, [r5, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	f7ff fcf4 	bl	8000c7c <_read>
 8001294:	1c43      	adds	r3, r0, #1
 8001296:	d102      	bne.n	800129e <_read_r+0x1e>
 8001298:	682b      	ldr	r3, [r5, #0]
 800129a:	b103      	cbz	r3, 800129e <_read_r+0x1e>
 800129c:	6023      	str	r3, [r4, #0]
 800129e:	bd38      	pop	{r3, r4, r5, pc}
 80012a0:	200001b8 	.word	0x200001b8

080012a4 <_write_r>:
 80012a4:	b538      	push	{r3, r4, r5, lr}
 80012a6:	4d07      	ldr	r5, [pc, #28]	@ (80012c4 <_write_r+0x20>)
 80012a8:	4604      	mov	r4, r0
 80012aa:	4608      	mov	r0, r1
 80012ac:	4611      	mov	r1, r2
 80012ae:	2200      	movs	r2, #0
 80012b0:	602a      	str	r2, [r5, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	f7ff fcff 	bl	8000cb6 <_write>
 80012b8:	1c43      	adds	r3, r0, #1
 80012ba:	d102      	bne.n	80012c2 <_write_r+0x1e>
 80012bc:	682b      	ldr	r3, [r5, #0]
 80012be:	b103      	cbz	r3, 80012c2 <_write_r+0x1e>
 80012c0:	6023      	str	r3, [r4, #0]
 80012c2:	bd38      	pop	{r3, r4, r5, pc}
 80012c4:	200001b8 	.word	0x200001b8

080012c8 <__errno>:
 80012c8:	4b01      	ldr	r3, [pc, #4]	@ (80012d0 <__errno+0x8>)
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000000c 	.word	0x2000000c

080012d4 <__libc_init_array>:
 80012d4:	b570      	push	{r4, r5, r6, lr}
 80012d6:	4d0d      	ldr	r5, [pc, #52]	@ (800130c <__libc_init_array+0x38>)
 80012d8:	4c0d      	ldr	r4, [pc, #52]	@ (8001310 <__libc_init_array+0x3c>)
 80012da:	1b64      	subs	r4, r4, r5
 80012dc:	10a4      	asrs	r4, r4, #2
 80012de:	2600      	movs	r6, #0
 80012e0:	42a6      	cmp	r6, r4
 80012e2:	d109      	bne.n	80012f8 <__libc_init_array+0x24>
 80012e4:	4d0b      	ldr	r5, [pc, #44]	@ (8001314 <__libc_init_array+0x40>)
 80012e6:	4c0c      	ldr	r4, [pc, #48]	@ (8001318 <__libc_init_array+0x44>)
 80012e8:	f000 fd24 	bl	8001d34 <_init>
 80012ec:	1b64      	subs	r4, r4, r5
 80012ee:	10a4      	asrs	r4, r4, #2
 80012f0:	2600      	movs	r6, #0
 80012f2:	42a6      	cmp	r6, r4
 80012f4:	d105      	bne.n	8001302 <__libc_init_array+0x2e>
 80012f6:	bd70      	pop	{r4, r5, r6, pc}
 80012f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80012fc:	4798      	blx	r3
 80012fe:	3601      	adds	r6, #1
 8001300:	e7ee      	b.n	80012e0 <__libc_init_array+0xc>
 8001302:	f855 3b04 	ldr.w	r3, [r5], #4
 8001306:	4798      	blx	r3
 8001308:	3601      	adds	r6, #1
 800130a:	e7f2      	b.n	80012f2 <__libc_init_array+0x1e>
 800130c:	08001de0 	.word	0x08001de0
 8001310:	08001de0 	.word	0x08001de0
 8001314:	08001de0 	.word	0x08001de0
 8001318:	08001de4 	.word	0x08001de4

0800131c <__retarget_lock_init_recursive>:
 800131c:	4770      	bx	lr

0800131e <__retarget_lock_acquire_recursive>:
 800131e:	4770      	bx	lr

08001320 <__retarget_lock_release_recursive>:
 8001320:	4770      	bx	lr
	...

08001324 <_free_r>:
 8001324:	b538      	push	{r3, r4, r5, lr}
 8001326:	4605      	mov	r5, r0
 8001328:	2900      	cmp	r1, #0
 800132a:	d041      	beq.n	80013b0 <_free_r+0x8c>
 800132c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001330:	1f0c      	subs	r4, r1, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	bfb8      	it	lt
 8001336:	18e4      	addlt	r4, r4, r3
 8001338:	f000 f8e0 	bl	80014fc <__malloc_lock>
 800133c:	4a1d      	ldr	r2, [pc, #116]	@ (80013b4 <_free_r+0x90>)
 800133e:	6813      	ldr	r3, [r2, #0]
 8001340:	b933      	cbnz	r3, 8001350 <_free_r+0x2c>
 8001342:	6063      	str	r3, [r4, #4]
 8001344:	6014      	str	r4, [r2, #0]
 8001346:	4628      	mov	r0, r5
 8001348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800134c:	f000 b8dc 	b.w	8001508 <__malloc_unlock>
 8001350:	42a3      	cmp	r3, r4
 8001352:	d908      	bls.n	8001366 <_free_r+0x42>
 8001354:	6820      	ldr	r0, [r4, #0]
 8001356:	1821      	adds	r1, r4, r0
 8001358:	428b      	cmp	r3, r1
 800135a:	bf01      	itttt	eq
 800135c:	6819      	ldreq	r1, [r3, #0]
 800135e:	685b      	ldreq	r3, [r3, #4]
 8001360:	1809      	addeq	r1, r1, r0
 8001362:	6021      	streq	r1, [r4, #0]
 8001364:	e7ed      	b.n	8001342 <_free_r+0x1e>
 8001366:	461a      	mov	r2, r3
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	b10b      	cbz	r3, 8001370 <_free_r+0x4c>
 800136c:	42a3      	cmp	r3, r4
 800136e:	d9fa      	bls.n	8001366 <_free_r+0x42>
 8001370:	6811      	ldr	r1, [r2, #0]
 8001372:	1850      	adds	r0, r2, r1
 8001374:	42a0      	cmp	r0, r4
 8001376:	d10b      	bne.n	8001390 <_free_r+0x6c>
 8001378:	6820      	ldr	r0, [r4, #0]
 800137a:	4401      	add	r1, r0
 800137c:	1850      	adds	r0, r2, r1
 800137e:	4283      	cmp	r3, r0
 8001380:	6011      	str	r1, [r2, #0]
 8001382:	d1e0      	bne.n	8001346 <_free_r+0x22>
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	6053      	str	r3, [r2, #4]
 800138a:	4408      	add	r0, r1
 800138c:	6010      	str	r0, [r2, #0]
 800138e:	e7da      	b.n	8001346 <_free_r+0x22>
 8001390:	d902      	bls.n	8001398 <_free_r+0x74>
 8001392:	230c      	movs	r3, #12
 8001394:	602b      	str	r3, [r5, #0]
 8001396:	e7d6      	b.n	8001346 <_free_r+0x22>
 8001398:	6820      	ldr	r0, [r4, #0]
 800139a:	1821      	adds	r1, r4, r0
 800139c:	428b      	cmp	r3, r1
 800139e:	bf04      	itt	eq
 80013a0:	6819      	ldreq	r1, [r3, #0]
 80013a2:	685b      	ldreq	r3, [r3, #4]
 80013a4:	6063      	str	r3, [r4, #4]
 80013a6:	bf04      	itt	eq
 80013a8:	1809      	addeq	r1, r1, r0
 80013aa:	6021      	streq	r1, [r4, #0]
 80013ac:	6054      	str	r4, [r2, #4]
 80013ae:	e7ca      	b.n	8001346 <_free_r+0x22>
 80013b0:	bd38      	pop	{r3, r4, r5, pc}
 80013b2:	bf00      	nop
 80013b4:	200001c4 	.word	0x200001c4

080013b8 <sbrk_aligned>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	4e0f      	ldr	r6, [pc, #60]	@ (80013f8 <sbrk_aligned+0x40>)
 80013bc:	460c      	mov	r4, r1
 80013be:	6831      	ldr	r1, [r6, #0]
 80013c0:	4605      	mov	r5, r0
 80013c2:	b911      	cbnz	r1, 80013ca <sbrk_aligned+0x12>
 80013c4:	f000 fca6 	bl	8001d14 <_sbrk_r>
 80013c8:	6030      	str	r0, [r6, #0]
 80013ca:	4621      	mov	r1, r4
 80013cc:	4628      	mov	r0, r5
 80013ce:	f000 fca1 	bl	8001d14 <_sbrk_r>
 80013d2:	1c43      	adds	r3, r0, #1
 80013d4:	d103      	bne.n	80013de <sbrk_aligned+0x26>
 80013d6:	f04f 34ff 	mov.w	r4, #4294967295
 80013da:	4620      	mov	r0, r4
 80013dc:	bd70      	pop	{r4, r5, r6, pc}
 80013de:	1cc4      	adds	r4, r0, #3
 80013e0:	f024 0403 	bic.w	r4, r4, #3
 80013e4:	42a0      	cmp	r0, r4
 80013e6:	d0f8      	beq.n	80013da <sbrk_aligned+0x22>
 80013e8:	1a21      	subs	r1, r4, r0
 80013ea:	4628      	mov	r0, r5
 80013ec:	f000 fc92 	bl	8001d14 <_sbrk_r>
 80013f0:	3001      	adds	r0, #1
 80013f2:	d1f2      	bne.n	80013da <sbrk_aligned+0x22>
 80013f4:	e7ef      	b.n	80013d6 <sbrk_aligned+0x1e>
 80013f6:	bf00      	nop
 80013f8:	200001c0 	.word	0x200001c0

080013fc <_malloc_r>:
 80013fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001400:	1ccd      	adds	r5, r1, #3
 8001402:	f025 0503 	bic.w	r5, r5, #3
 8001406:	3508      	adds	r5, #8
 8001408:	2d0c      	cmp	r5, #12
 800140a:	bf38      	it	cc
 800140c:	250c      	movcc	r5, #12
 800140e:	2d00      	cmp	r5, #0
 8001410:	4606      	mov	r6, r0
 8001412:	db01      	blt.n	8001418 <_malloc_r+0x1c>
 8001414:	42a9      	cmp	r1, r5
 8001416:	d904      	bls.n	8001422 <_malloc_r+0x26>
 8001418:	230c      	movs	r3, #12
 800141a:	6033      	str	r3, [r6, #0]
 800141c:	2000      	movs	r0, #0
 800141e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001422:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80014f8 <_malloc_r+0xfc>
 8001426:	f000 f869 	bl	80014fc <__malloc_lock>
 800142a:	f8d8 3000 	ldr.w	r3, [r8]
 800142e:	461c      	mov	r4, r3
 8001430:	bb44      	cbnz	r4, 8001484 <_malloc_r+0x88>
 8001432:	4629      	mov	r1, r5
 8001434:	4630      	mov	r0, r6
 8001436:	f7ff ffbf 	bl	80013b8 <sbrk_aligned>
 800143a:	1c43      	adds	r3, r0, #1
 800143c:	4604      	mov	r4, r0
 800143e:	d158      	bne.n	80014f2 <_malloc_r+0xf6>
 8001440:	f8d8 4000 	ldr.w	r4, [r8]
 8001444:	4627      	mov	r7, r4
 8001446:	2f00      	cmp	r7, #0
 8001448:	d143      	bne.n	80014d2 <_malloc_r+0xd6>
 800144a:	2c00      	cmp	r4, #0
 800144c:	d04b      	beq.n	80014e6 <_malloc_r+0xea>
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	4639      	mov	r1, r7
 8001452:	4630      	mov	r0, r6
 8001454:	eb04 0903 	add.w	r9, r4, r3
 8001458:	f000 fc5c 	bl	8001d14 <_sbrk_r>
 800145c:	4581      	cmp	r9, r0
 800145e:	d142      	bne.n	80014e6 <_malloc_r+0xea>
 8001460:	6821      	ldr	r1, [r4, #0]
 8001462:	1a6d      	subs	r5, r5, r1
 8001464:	4629      	mov	r1, r5
 8001466:	4630      	mov	r0, r6
 8001468:	f7ff ffa6 	bl	80013b8 <sbrk_aligned>
 800146c:	3001      	adds	r0, #1
 800146e:	d03a      	beq.n	80014e6 <_malloc_r+0xea>
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	442b      	add	r3, r5
 8001474:	6023      	str	r3, [r4, #0]
 8001476:	f8d8 3000 	ldr.w	r3, [r8]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	bb62      	cbnz	r2, 80014d8 <_malloc_r+0xdc>
 800147e:	f8c8 7000 	str.w	r7, [r8]
 8001482:	e00f      	b.n	80014a4 <_malloc_r+0xa8>
 8001484:	6822      	ldr	r2, [r4, #0]
 8001486:	1b52      	subs	r2, r2, r5
 8001488:	d420      	bmi.n	80014cc <_malloc_r+0xd0>
 800148a:	2a0b      	cmp	r2, #11
 800148c:	d917      	bls.n	80014be <_malloc_r+0xc2>
 800148e:	1961      	adds	r1, r4, r5
 8001490:	42a3      	cmp	r3, r4
 8001492:	6025      	str	r5, [r4, #0]
 8001494:	bf18      	it	ne
 8001496:	6059      	strne	r1, [r3, #4]
 8001498:	6863      	ldr	r3, [r4, #4]
 800149a:	bf08      	it	eq
 800149c:	f8c8 1000 	streq.w	r1, [r8]
 80014a0:	5162      	str	r2, [r4, r5]
 80014a2:	604b      	str	r3, [r1, #4]
 80014a4:	4630      	mov	r0, r6
 80014a6:	f000 f82f 	bl	8001508 <__malloc_unlock>
 80014aa:	f104 000b 	add.w	r0, r4, #11
 80014ae:	1d23      	adds	r3, r4, #4
 80014b0:	f020 0007 	bic.w	r0, r0, #7
 80014b4:	1ac2      	subs	r2, r0, r3
 80014b6:	bf1c      	itt	ne
 80014b8:	1a1b      	subne	r3, r3, r0
 80014ba:	50a3      	strne	r3, [r4, r2]
 80014bc:	e7af      	b.n	800141e <_malloc_r+0x22>
 80014be:	6862      	ldr	r2, [r4, #4]
 80014c0:	42a3      	cmp	r3, r4
 80014c2:	bf0c      	ite	eq
 80014c4:	f8c8 2000 	streq.w	r2, [r8]
 80014c8:	605a      	strne	r2, [r3, #4]
 80014ca:	e7eb      	b.n	80014a4 <_malloc_r+0xa8>
 80014cc:	4623      	mov	r3, r4
 80014ce:	6864      	ldr	r4, [r4, #4]
 80014d0:	e7ae      	b.n	8001430 <_malloc_r+0x34>
 80014d2:	463c      	mov	r4, r7
 80014d4:	687f      	ldr	r7, [r7, #4]
 80014d6:	e7b6      	b.n	8001446 <_malloc_r+0x4a>
 80014d8:	461a      	mov	r2, r3
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	42a3      	cmp	r3, r4
 80014de:	d1fb      	bne.n	80014d8 <_malloc_r+0xdc>
 80014e0:	2300      	movs	r3, #0
 80014e2:	6053      	str	r3, [r2, #4]
 80014e4:	e7de      	b.n	80014a4 <_malloc_r+0xa8>
 80014e6:	230c      	movs	r3, #12
 80014e8:	6033      	str	r3, [r6, #0]
 80014ea:	4630      	mov	r0, r6
 80014ec:	f000 f80c 	bl	8001508 <__malloc_unlock>
 80014f0:	e794      	b.n	800141c <_malloc_r+0x20>
 80014f2:	6005      	str	r5, [r0, #0]
 80014f4:	e7d6      	b.n	80014a4 <_malloc_r+0xa8>
 80014f6:	bf00      	nop
 80014f8:	200001c4 	.word	0x200001c4

080014fc <__malloc_lock>:
 80014fc:	4801      	ldr	r0, [pc, #4]	@ (8001504 <__malloc_lock+0x8>)
 80014fe:	f7ff bf0e 	b.w	800131e <__retarget_lock_acquire_recursive>
 8001502:	bf00      	nop
 8001504:	200001bc 	.word	0x200001bc

08001508 <__malloc_unlock>:
 8001508:	4801      	ldr	r0, [pc, #4]	@ (8001510 <__malloc_unlock+0x8>)
 800150a:	f7ff bf09 	b.w	8001320 <__retarget_lock_release_recursive>
 800150e:	bf00      	nop
 8001510:	200001bc 	.word	0x200001bc

08001514 <__sfputc_r>:
 8001514:	6893      	ldr	r3, [r2, #8]
 8001516:	3b01      	subs	r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	b410      	push	{r4}
 800151c:	6093      	str	r3, [r2, #8]
 800151e:	da08      	bge.n	8001532 <__sfputc_r+0x1e>
 8001520:	6994      	ldr	r4, [r2, #24]
 8001522:	42a3      	cmp	r3, r4
 8001524:	db01      	blt.n	800152a <__sfputc_r+0x16>
 8001526:	290a      	cmp	r1, #10
 8001528:	d103      	bne.n	8001532 <__sfputc_r+0x1e>
 800152a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800152e:	f7ff bde8 	b.w	8001102 <__swbuf_r>
 8001532:	6813      	ldr	r3, [r2, #0]
 8001534:	1c58      	adds	r0, r3, #1
 8001536:	6010      	str	r0, [r2, #0]
 8001538:	7019      	strb	r1, [r3, #0]
 800153a:	4608      	mov	r0, r1
 800153c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001540:	4770      	bx	lr

08001542 <__sfputs_r>:
 8001542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001544:	4606      	mov	r6, r0
 8001546:	460f      	mov	r7, r1
 8001548:	4614      	mov	r4, r2
 800154a:	18d5      	adds	r5, r2, r3
 800154c:	42ac      	cmp	r4, r5
 800154e:	d101      	bne.n	8001554 <__sfputs_r+0x12>
 8001550:	2000      	movs	r0, #0
 8001552:	e007      	b.n	8001564 <__sfputs_r+0x22>
 8001554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001558:	463a      	mov	r2, r7
 800155a:	4630      	mov	r0, r6
 800155c:	f7ff ffda 	bl	8001514 <__sfputc_r>
 8001560:	1c43      	adds	r3, r0, #1
 8001562:	d1f3      	bne.n	800154c <__sfputs_r+0xa>
 8001564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001568 <_vfiprintf_r>:
 8001568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800156c:	460d      	mov	r5, r1
 800156e:	b09d      	sub	sp, #116	@ 0x74
 8001570:	4614      	mov	r4, r2
 8001572:	4698      	mov	r8, r3
 8001574:	4606      	mov	r6, r0
 8001576:	b118      	cbz	r0, 8001580 <_vfiprintf_r+0x18>
 8001578:	6a03      	ldr	r3, [r0, #32]
 800157a:	b90b      	cbnz	r3, 8001580 <_vfiprintf_r+0x18>
 800157c:	f7ff fcd8 	bl	8000f30 <__sinit>
 8001580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001582:	07d9      	lsls	r1, r3, #31
 8001584:	d405      	bmi.n	8001592 <_vfiprintf_r+0x2a>
 8001586:	89ab      	ldrh	r3, [r5, #12]
 8001588:	059a      	lsls	r2, r3, #22
 800158a:	d402      	bmi.n	8001592 <_vfiprintf_r+0x2a>
 800158c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800158e:	f7ff fec6 	bl	800131e <__retarget_lock_acquire_recursive>
 8001592:	89ab      	ldrh	r3, [r5, #12]
 8001594:	071b      	lsls	r3, r3, #28
 8001596:	d501      	bpl.n	800159c <_vfiprintf_r+0x34>
 8001598:	692b      	ldr	r3, [r5, #16]
 800159a:	b99b      	cbnz	r3, 80015c4 <_vfiprintf_r+0x5c>
 800159c:	4629      	mov	r1, r5
 800159e:	4630      	mov	r0, r6
 80015a0:	f7ff fdee 	bl	8001180 <__swsetup_r>
 80015a4:	b170      	cbz	r0, 80015c4 <_vfiprintf_r+0x5c>
 80015a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80015a8:	07dc      	lsls	r4, r3, #31
 80015aa:	d504      	bpl.n	80015b6 <_vfiprintf_r+0x4e>
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	b01d      	add	sp, #116	@ 0x74
 80015b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015b6:	89ab      	ldrh	r3, [r5, #12]
 80015b8:	0598      	lsls	r0, r3, #22
 80015ba:	d4f7      	bmi.n	80015ac <_vfiprintf_r+0x44>
 80015bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80015be:	f7ff feaf 	bl	8001320 <__retarget_lock_release_recursive>
 80015c2:	e7f3      	b.n	80015ac <_vfiprintf_r+0x44>
 80015c4:	2300      	movs	r3, #0
 80015c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80015c8:	2320      	movs	r3, #32
 80015ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80015ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80015d2:	2330      	movs	r3, #48	@ 0x30
 80015d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001784 <_vfiprintf_r+0x21c>
 80015d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80015dc:	f04f 0901 	mov.w	r9, #1
 80015e0:	4623      	mov	r3, r4
 80015e2:	469a      	mov	sl, r3
 80015e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015e8:	b10a      	cbz	r2, 80015ee <_vfiprintf_r+0x86>
 80015ea:	2a25      	cmp	r2, #37	@ 0x25
 80015ec:	d1f9      	bne.n	80015e2 <_vfiprintf_r+0x7a>
 80015ee:	ebba 0b04 	subs.w	fp, sl, r4
 80015f2:	d00b      	beq.n	800160c <_vfiprintf_r+0xa4>
 80015f4:	465b      	mov	r3, fp
 80015f6:	4622      	mov	r2, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	4630      	mov	r0, r6
 80015fc:	f7ff ffa1 	bl	8001542 <__sfputs_r>
 8001600:	3001      	adds	r0, #1
 8001602:	f000 80a7 	beq.w	8001754 <_vfiprintf_r+0x1ec>
 8001606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001608:	445a      	add	r2, fp
 800160a:	9209      	str	r2, [sp, #36]	@ 0x24
 800160c:	f89a 3000 	ldrb.w	r3, [sl]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 809f 	beq.w	8001754 <_vfiprintf_r+0x1ec>
 8001616:	2300      	movs	r3, #0
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001620:	f10a 0a01 	add.w	sl, sl, #1
 8001624:	9304      	str	r3, [sp, #16]
 8001626:	9307      	str	r3, [sp, #28]
 8001628:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800162c:	931a      	str	r3, [sp, #104]	@ 0x68
 800162e:	4654      	mov	r4, sl
 8001630:	2205      	movs	r2, #5
 8001632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001636:	4853      	ldr	r0, [pc, #332]	@ (8001784 <_vfiprintf_r+0x21c>)
 8001638:	f7fe fdd2 	bl	80001e0 <memchr>
 800163c:	9a04      	ldr	r2, [sp, #16]
 800163e:	b9d8      	cbnz	r0, 8001678 <_vfiprintf_r+0x110>
 8001640:	06d1      	lsls	r1, r2, #27
 8001642:	bf44      	itt	mi
 8001644:	2320      	movmi	r3, #32
 8001646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800164a:	0713      	lsls	r3, r2, #28
 800164c:	bf44      	itt	mi
 800164e:	232b      	movmi	r3, #43	@ 0x2b
 8001650:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001654:	f89a 3000 	ldrb.w	r3, [sl]
 8001658:	2b2a      	cmp	r3, #42	@ 0x2a
 800165a:	d015      	beq.n	8001688 <_vfiprintf_r+0x120>
 800165c:	9a07      	ldr	r2, [sp, #28]
 800165e:	4654      	mov	r4, sl
 8001660:	2000      	movs	r0, #0
 8001662:	f04f 0c0a 	mov.w	ip, #10
 8001666:	4621      	mov	r1, r4
 8001668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800166c:	3b30      	subs	r3, #48	@ 0x30
 800166e:	2b09      	cmp	r3, #9
 8001670:	d94b      	bls.n	800170a <_vfiprintf_r+0x1a2>
 8001672:	b1b0      	cbz	r0, 80016a2 <_vfiprintf_r+0x13a>
 8001674:	9207      	str	r2, [sp, #28]
 8001676:	e014      	b.n	80016a2 <_vfiprintf_r+0x13a>
 8001678:	eba0 0308 	sub.w	r3, r0, r8
 800167c:	fa09 f303 	lsl.w	r3, r9, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	9304      	str	r3, [sp, #16]
 8001684:	46a2      	mov	sl, r4
 8001686:	e7d2      	b.n	800162e <_vfiprintf_r+0xc6>
 8001688:	9b03      	ldr	r3, [sp, #12]
 800168a:	1d19      	adds	r1, r3, #4
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	9103      	str	r1, [sp, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	bfbb      	ittet	lt
 8001694:	425b      	neglt	r3, r3
 8001696:	f042 0202 	orrlt.w	r2, r2, #2
 800169a:	9307      	strge	r3, [sp, #28]
 800169c:	9307      	strlt	r3, [sp, #28]
 800169e:	bfb8      	it	lt
 80016a0:	9204      	strlt	r2, [sp, #16]
 80016a2:	7823      	ldrb	r3, [r4, #0]
 80016a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80016a6:	d10a      	bne.n	80016be <_vfiprintf_r+0x156>
 80016a8:	7863      	ldrb	r3, [r4, #1]
 80016aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80016ac:	d132      	bne.n	8001714 <_vfiprintf_r+0x1ac>
 80016ae:	9b03      	ldr	r3, [sp, #12]
 80016b0:	1d1a      	adds	r2, r3, #4
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	9203      	str	r2, [sp, #12]
 80016b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80016ba:	3402      	adds	r4, #2
 80016bc:	9305      	str	r3, [sp, #20]
 80016be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001794 <_vfiprintf_r+0x22c>
 80016c2:	7821      	ldrb	r1, [r4, #0]
 80016c4:	2203      	movs	r2, #3
 80016c6:	4650      	mov	r0, sl
 80016c8:	f7fe fd8a 	bl	80001e0 <memchr>
 80016cc:	b138      	cbz	r0, 80016de <_vfiprintf_r+0x176>
 80016ce:	9b04      	ldr	r3, [sp, #16]
 80016d0:	eba0 000a 	sub.w	r0, r0, sl
 80016d4:	2240      	movs	r2, #64	@ 0x40
 80016d6:	4082      	lsls	r2, r0
 80016d8:	4313      	orrs	r3, r2
 80016da:	3401      	adds	r4, #1
 80016dc:	9304      	str	r3, [sp, #16]
 80016de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016e2:	4829      	ldr	r0, [pc, #164]	@ (8001788 <_vfiprintf_r+0x220>)
 80016e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80016e8:	2206      	movs	r2, #6
 80016ea:	f7fe fd79 	bl	80001e0 <memchr>
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d03f      	beq.n	8001772 <_vfiprintf_r+0x20a>
 80016f2:	4b26      	ldr	r3, [pc, #152]	@ (800178c <_vfiprintf_r+0x224>)
 80016f4:	bb1b      	cbnz	r3, 800173e <_vfiprintf_r+0x1d6>
 80016f6:	9b03      	ldr	r3, [sp, #12]
 80016f8:	3307      	adds	r3, #7
 80016fa:	f023 0307 	bic.w	r3, r3, #7
 80016fe:	3308      	adds	r3, #8
 8001700:	9303      	str	r3, [sp, #12]
 8001702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001704:	443b      	add	r3, r7
 8001706:	9309      	str	r3, [sp, #36]	@ 0x24
 8001708:	e76a      	b.n	80015e0 <_vfiprintf_r+0x78>
 800170a:	fb0c 3202 	mla	r2, ip, r2, r3
 800170e:	460c      	mov	r4, r1
 8001710:	2001      	movs	r0, #1
 8001712:	e7a8      	b.n	8001666 <_vfiprintf_r+0xfe>
 8001714:	2300      	movs	r3, #0
 8001716:	3401      	adds	r4, #1
 8001718:	9305      	str	r3, [sp, #20]
 800171a:	4619      	mov	r1, r3
 800171c:	f04f 0c0a 	mov.w	ip, #10
 8001720:	4620      	mov	r0, r4
 8001722:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001726:	3a30      	subs	r2, #48	@ 0x30
 8001728:	2a09      	cmp	r2, #9
 800172a:	d903      	bls.n	8001734 <_vfiprintf_r+0x1cc>
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0c6      	beq.n	80016be <_vfiprintf_r+0x156>
 8001730:	9105      	str	r1, [sp, #20]
 8001732:	e7c4      	b.n	80016be <_vfiprintf_r+0x156>
 8001734:	fb0c 2101 	mla	r1, ip, r1, r2
 8001738:	4604      	mov	r4, r0
 800173a:	2301      	movs	r3, #1
 800173c:	e7f0      	b.n	8001720 <_vfiprintf_r+0x1b8>
 800173e:	ab03      	add	r3, sp, #12
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	462a      	mov	r2, r5
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <_vfiprintf_r+0x228>)
 8001746:	a904      	add	r1, sp, #16
 8001748:	4630      	mov	r0, r6
 800174a:	f3af 8000 	nop.w
 800174e:	4607      	mov	r7, r0
 8001750:	1c78      	adds	r0, r7, #1
 8001752:	d1d6      	bne.n	8001702 <_vfiprintf_r+0x19a>
 8001754:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001756:	07d9      	lsls	r1, r3, #31
 8001758:	d405      	bmi.n	8001766 <_vfiprintf_r+0x1fe>
 800175a:	89ab      	ldrh	r3, [r5, #12]
 800175c:	059a      	lsls	r2, r3, #22
 800175e:	d402      	bmi.n	8001766 <_vfiprintf_r+0x1fe>
 8001760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001762:	f7ff fddd 	bl	8001320 <__retarget_lock_release_recursive>
 8001766:	89ab      	ldrh	r3, [r5, #12]
 8001768:	065b      	lsls	r3, r3, #25
 800176a:	f53f af1f 	bmi.w	80015ac <_vfiprintf_r+0x44>
 800176e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001770:	e71e      	b.n	80015b0 <_vfiprintf_r+0x48>
 8001772:	ab03      	add	r3, sp, #12
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	462a      	mov	r2, r5
 8001778:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <_vfiprintf_r+0x228>)
 800177a:	a904      	add	r1, sp, #16
 800177c:	4630      	mov	r0, r6
 800177e:	f000 f879 	bl	8001874 <_printf_i>
 8001782:	e7e4      	b.n	800174e <_vfiprintf_r+0x1e6>
 8001784:	08001da2 	.word	0x08001da2
 8001788:	08001dac 	.word	0x08001dac
 800178c:	00000000 	.word	0x00000000
 8001790:	08001543 	.word	0x08001543
 8001794:	08001da8 	.word	0x08001da8

08001798 <_printf_common>:
 8001798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800179c:	4616      	mov	r6, r2
 800179e:	4698      	mov	r8, r3
 80017a0:	688a      	ldr	r2, [r1, #8]
 80017a2:	690b      	ldr	r3, [r1, #16]
 80017a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	bfb8      	it	lt
 80017ac:	4613      	movlt	r3, r2
 80017ae:	6033      	str	r3, [r6, #0]
 80017b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80017b4:	4607      	mov	r7, r0
 80017b6:	460c      	mov	r4, r1
 80017b8:	b10a      	cbz	r2, 80017be <_printf_common+0x26>
 80017ba:	3301      	adds	r3, #1
 80017bc:	6033      	str	r3, [r6, #0]
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	0699      	lsls	r1, r3, #26
 80017c2:	bf42      	ittt	mi
 80017c4:	6833      	ldrmi	r3, [r6, #0]
 80017c6:	3302      	addmi	r3, #2
 80017c8:	6033      	strmi	r3, [r6, #0]
 80017ca:	6825      	ldr	r5, [r4, #0]
 80017cc:	f015 0506 	ands.w	r5, r5, #6
 80017d0:	d106      	bne.n	80017e0 <_printf_common+0x48>
 80017d2:	f104 0a19 	add.w	sl, r4, #25
 80017d6:	68e3      	ldr	r3, [r4, #12]
 80017d8:	6832      	ldr	r2, [r6, #0]
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	42ab      	cmp	r3, r5
 80017de:	dc26      	bgt.n	800182e <_printf_common+0x96>
 80017e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80017e4:	6822      	ldr	r2, [r4, #0]
 80017e6:	3b00      	subs	r3, #0
 80017e8:	bf18      	it	ne
 80017ea:	2301      	movne	r3, #1
 80017ec:	0692      	lsls	r2, r2, #26
 80017ee:	d42b      	bmi.n	8001848 <_printf_common+0xb0>
 80017f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80017f4:	4641      	mov	r1, r8
 80017f6:	4638      	mov	r0, r7
 80017f8:	47c8      	blx	r9
 80017fa:	3001      	adds	r0, #1
 80017fc:	d01e      	beq.n	800183c <_printf_common+0xa4>
 80017fe:	6823      	ldr	r3, [r4, #0]
 8001800:	6922      	ldr	r2, [r4, #16]
 8001802:	f003 0306 	and.w	r3, r3, #6
 8001806:	2b04      	cmp	r3, #4
 8001808:	bf02      	ittt	eq
 800180a:	68e5      	ldreq	r5, [r4, #12]
 800180c:	6833      	ldreq	r3, [r6, #0]
 800180e:	1aed      	subeq	r5, r5, r3
 8001810:	68a3      	ldr	r3, [r4, #8]
 8001812:	bf0c      	ite	eq
 8001814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001818:	2500      	movne	r5, #0
 800181a:	4293      	cmp	r3, r2
 800181c:	bfc4      	itt	gt
 800181e:	1a9b      	subgt	r3, r3, r2
 8001820:	18ed      	addgt	r5, r5, r3
 8001822:	2600      	movs	r6, #0
 8001824:	341a      	adds	r4, #26
 8001826:	42b5      	cmp	r5, r6
 8001828:	d11a      	bne.n	8001860 <_printf_common+0xc8>
 800182a:	2000      	movs	r0, #0
 800182c:	e008      	b.n	8001840 <_printf_common+0xa8>
 800182e:	2301      	movs	r3, #1
 8001830:	4652      	mov	r2, sl
 8001832:	4641      	mov	r1, r8
 8001834:	4638      	mov	r0, r7
 8001836:	47c8      	blx	r9
 8001838:	3001      	adds	r0, #1
 800183a:	d103      	bne.n	8001844 <_printf_common+0xac>
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001844:	3501      	adds	r5, #1
 8001846:	e7c6      	b.n	80017d6 <_printf_common+0x3e>
 8001848:	18e1      	adds	r1, r4, r3
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	2030      	movs	r0, #48	@ 0x30
 800184e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001852:	4422      	add	r2, r4
 8001854:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001858:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800185c:	3302      	adds	r3, #2
 800185e:	e7c7      	b.n	80017f0 <_printf_common+0x58>
 8001860:	2301      	movs	r3, #1
 8001862:	4622      	mov	r2, r4
 8001864:	4641      	mov	r1, r8
 8001866:	4638      	mov	r0, r7
 8001868:	47c8      	blx	r9
 800186a:	3001      	adds	r0, #1
 800186c:	d0e6      	beq.n	800183c <_printf_common+0xa4>
 800186e:	3601      	adds	r6, #1
 8001870:	e7d9      	b.n	8001826 <_printf_common+0x8e>
	...

08001874 <_printf_i>:
 8001874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001878:	7e0f      	ldrb	r7, [r1, #24]
 800187a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800187c:	2f78      	cmp	r7, #120	@ 0x78
 800187e:	4691      	mov	r9, r2
 8001880:	4680      	mov	r8, r0
 8001882:	460c      	mov	r4, r1
 8001884:	469a      	mov	sl, r3
 8001886:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800188a:	d807      	bhi.n	800189c <_printf_i+0x28>
 800188c:	2f62      	cmp	r7, #98	@ 0x62
 800188e:	d80a      	bhi.n	80018a6 <_printf_i+0x32>
 8001890:	2f00      	cmp	r7, #0
 8001892:	f000 80d2 	beq.w	8001a3a <_printf_i+0x1c6>
 8001896:	2f58      	cmp	r7, #88	@ 0x58
 8001898:	f000 80b9 	beq.w	8001a0e <_printf_i+0x19a>
 800189c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80018a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80018a4:	e03a      	b.n	800191c <_printf_i+0xa8>
 80018a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80018aa:	2b15      	cmp	r3, #21
 80018ac:	d8f6      	bhi.n	800189c <_printf_i+0x28>
 80018ae:	a101      	add	r1, pc, #4	@ (adr r1, 80018b4 <_printf_i+0x40>)
 80018b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80018b4:	0800190d 	.word	0x0800190d
 80018b8:	08001921 	.word	0x08001921
 80018bc:	0800189d 	.word	0x0800189d
 80018c0:	0800189d 	.word	0x0800189d
 80018c4:	0800189d 	.word	0x0800189d
 80018c8:	0800189d 	.word	0x0800189d
 80018cc:	08001921 	.word	0x08001921
 80018d0:	0800189d 	.word	0x0800189d
 80018d4:	0800189d 	.word	0x0800189d
 80018d8:	0800189d 	.word	0x0800189d
 80018dc:	0800189d 	.word	0x0800189d
 80018e0:	08001a21 	.word	0x08001a21
 80018e4:	0800194b 	.word	0x0800194b
 80018e8:	080019db 	.word	0x080019db
 80018ec:	0800189d 	.word	0x0800189d
 80018f0:	0800189d 	.word	0x0800189d
 80018f4:	08001a43 	.word	0x08001a43
 80018f8:	0800189d 	.word	0x0800189d
 80018fc:	0800194b 	.word	0x0800194b
 8001900:	0800189d 	.word	0x0800189d
 8001904:	0800189d 	.word	0x0800189d
 8001908:	080019e3 	.word	0x080019e3
 800190c:	6833      	ldr	r3, [r6, #0]
 800190e:	1d1a      	adds	r2, r3, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6032      	str	r2, [r6, #0]
 8001914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001918:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800191c:	2301      	movs	r3, #1
 800191e:	e09d      	b.n	8001a5c <_printf_i+0x1e8>
 8001920:	6833      	ldr	r3, [r6, #0]
 8001922:	6820      	ldr	r0, [r4, #0]
 8001924:	1d19      	adds	r1, r3, #4
 8001926:	6031      	str	r1, [r6, #0]
 8001928:	0606      	lsls	r6, r0, #24
 800192a:	d501      	bpl.n	8001930 <_printf_i+0xbc>
 800192c:	681d      	ldr	r5, [r3, #0]
 800192e:	e003      	b.n	8001938 <_printf_i+0xc4>
 8001930:	0645      	lsls	r5, r0, #25
 8001932:	d5fb      	bpl.n	800192c <_printf_i+0xb8>
 8001934:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001938:	2d00      	cmp	r5, #0
 800193a:	da03      	bge.n	8001944 <_printf_i+0xd0>
 800193c:	232d      	movs	r3, #45	@ 0x2d
 800193e:	426d      	negs	r5, r5
 8001940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001944:	4859      	ldr	r0, [pc, #356]	@ (8001aac <_printf_i+0x238>)
 8001946:	230a      	movs	r3, #10
 8001948:	e011      	b.n	800196e <_printf_i+0xfa>
 800194a:	6821      	ldr	r1, [r4, #0]
 800194c:	6833      	ldr	r3, [r6, #0]
 800194e:	0608      	lsls	r0, r1, #24
 8001950:	f853 5b04 	ldr.w	r5, [r3], #4
 8001954:	d402      	bmi.n	800195c <_printf_i+0xe8>
 8001956:	0649      	lsls	r1, r1, #25
 8001958:	bf48      	it	mi
 800195a:	b2ad      	uxthmi	r5, r5
 800195c:	2f6f      	cmp	r7, #111	@ 0x6f
 800195e:	4853      	ldr	r0, [pc, #332]	@ (8001aac <_printf_i+0x238>)
 8001960:	6033      	str	r3, [r6, #0]
 8001962:	bf14      	ite	ne
 8001964:	230a      	movne	r3, #10
 8001966:	2308      	moveq	r3, #8
 8001968:	2100      	movs	r1, #0
 800196a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800196e:	6866      	ldr	r6, [r4, #4]
 8001970:	60a6      	str	r6, [r4, #8]
 8001972:	2e00      	cmp	r6, #0
 8001974:	bfa2      	ittt	ge
 8001976:	6821      	ldrge	r1, [r4, #0]
 8001978:	f021 0104 	bicge.w	r1, r1, #4
 800197c:	6021      	strge	r1, [r4, #0]
 800197e:	b90d      	cbnz	r5, 8001984 <_printf_i+0x110>
 8001980:	2e00      	cmp	r6, #0
 8001982:	d04b      	beq.n	8001a1c <_printf_i+0x1a8>
 8001984:	4616      	mov	r6, r2
 8001986:	fbb5 f1f3 	udiv	r1, r5, r3
 800198a:	fb03 5711 	mls	r7, r3, r1, r5
 800198e:	5dc7      	ldrb	r7, [r0, r7]
 8001990:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001994:	462f      	mov	r7, r5
 8001996:	42bb      	cmp	r3, r7
 8001998:	460d      	mov	r5, r1
 800199a:	d9f4      	bls.n	8001986 <_printf_i+0x112>
 800199c:	2b08      	cmp	r3, #8
 800199e:	d10b      	bne.n	80019b8 <_printf_i+0x144>
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	07df      	lsls	r7, r3, #31
 80019a4:	d508      	bpl.n	80019b8 <_printf_i+0x144>
 80019a6:	6923      	ldr	r3, [r4, #16]
 80019a8:	6861      	ldr	r1, [r4, #4]
 80019aa:	4299      	cmp	r1, r3
 80019ac:	bfde      	ittt	le
 80019ae:	2330      	movle	r3, #48	@ 0x30
 80019b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80019b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80019b8:	1b92      	subs	r2, r2, r6
 80019ba:	6122      	str	r2, [r4, #16]
 80019bc:	f8cd a000 	str.w	sl, [sp]
 80019c0:	464b      	mov	r3, r9
 80019c2:	aa03      	add	r2, sp, #12
 80019c4:	4621      	mov	r1, r4
 80019c6:	4640      	mov	r0, r8
 80019c8:	f7ff fee6 	bl	8001798 <_printf_common>
 80019cc:	3001      	adds	r0, #1
 80019ce:	d14a      	bne.n	8001a66 <_printf_i+0x1f2>
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	b004      	add	sp, #16
 80019d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	f043 0320 	orr.w	r3, r3, #32
 80019e0:	6023      	str	r3, [r4, #0]
 80019e2:	4833      	ldr	r0, [pc, #204]	@ (8001ab0 <_printf_i+0x23c>)
 80019e4:	2778      	movs	r7, #120	@ 0x78
 80019e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	6831      	ldr	r1, [r6, #0]
 80019ee:	061f      	lsls	r7, r3, #24
 80019f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80019f4:	d402      	bmi.n	80019fc <_printf_i+0x188>
 80019f6:	065f      	lsls	r7, r3, #25
 80019f8:	bf48      	it	mi
 80019fa:	b2ad      	uxthmi	r5, r5
 80019fc:	6031      	str	r1, [r6, #0]
 80019fe:	07d9      	lsls	r1, r3, #31
 8001a00:	bf44      	itt	mi
 8001a02:	f043 0320 	orrmi.w	r3, r3, #32
 8001a06:	6023      	strmi	r3, [r4, #0]
 8001a08:	b11d      	cbz	r5, 8001a12 <_printf_i+0x19e>
 8001a0a:	2310      	movs	r3, #16
 8001a0c:	e7ac      	b.n	8001968 <_printf_i+0xf4>
 8001a0e:	4827      	ldr	r0, [pc, #156]	@ (8001aac <_printf_i+0x238>)
 8001a10:	e7e9      	b.n	80019e6 <_printf_i+0x172>
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	f023 0320 	bic.w	r3, r3, #32
 8001a18:	6023      	str	r3, [r4, #0]
 8001a1a:	e7f6      	b.n	8001a0a <_printf_i+0x196>
 8001a1c:	4616      	mov	r6, r2
 8001a1e:	e7bd      	b.n	800199c <_printf_i+0x128>
 8001a20:	6833      	ldr	r3, [r6, #0]
 8001a22:	6825      	ldr	r5, [r4, #0]
 8001a24:	6961      	ldr	r1, [r4, #20]
 8001a26:	1d18      	adds	r0, r3, #4
 8001a28:	6030      	str	r0, [r6, #0]
 8001a2a:	062e      	lsls	r6, r5, #24
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	d501      	bpl.n	8001a34 <_printf_i+0x1c0>
 8001a30:	6019      	str	r1, [r3, #0]
 8001a32:	e002      	b.n	8001a3a <_printf_i+0x1c6>
 8001a34:	0668      	lsls	r0, r5, #25
 8001a36:	d5fb      	bpl.n	8001a30 <_printf_i+0x1bc>
 8001a38:	8019      	strh	r1, [r3, #0]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	6123      	str	r3, [r4, #16]
 8001a3e:	4616      	mov	r6, r2
 8001a40:	e7bc      	b.n	80019bc <_printf_i+0x148>
 8001a42:	6833      	ldr	r3, [r6, #0]
 8001a44:	1d1a      	adds	r2, r3, #4
 8001a46:	6032      	str	r2, [r6, #0]
 8001a48:	681e      	ldr	r6, [r3, #0]
 8001a4a:	6862      	ldr	r2, [r4, #4]
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4630      	mov	r0, r6
 8001a50:	f7fe fbc6 	bl	80001e0 <memchr>
 8001a54:	b108      	cbz	r0, 8001a5a <_printf_i+0x1e6>
 8001a56:	1b80      	subs	r0, r0, r6
 8001a58:	6060      	str	r0, [r4, #4]
 8001a5a:	6863      	ldr	r3, [r4, #4]
 8001a5c:	6123      	str	r3, [r4, #16]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a64:	e7aa      	b.n	80019bc <_printf_i+0x148>
 8001a66:	6923      	ldr	r3, [r4, #16]
 8001a68:	4632      	mov	r2, r6
 8001a6a:	4649      	mov	r1, r9
 8001a6c:	4640      	mov	r0, r8
 8001a6e:	47d0      	blx	sl
 8001a70:	3001      	adds	r0, #1
 8001a72:	d0ad      	beq.n	80019d0 <_printf_i+0x15c>
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	079b      	lsls	r3, r3, #30
 8001a78:	d413      	bmi.n	8001aa2 <_printf_i+0x22e>
 8001a7a:	68e0      	ldr	r0, [r4, #12]
 8001a7c:	9b03      	ldr	r3, [sp, #12]
 8001a7e:	4298      	cmp	r0, r3
 8001a80:	bfb8      	it	lt
 8001a82:	4618      	movlt	r0, r3
 8001a84:	e7a6      	b.n	80019d4 <_printf_i+0x160>
 8001a86:	2301      	movs	r3, #1
 8001a88:	4632      	mov	r2, r6
 8001a8a:	4649      	mov	r1, r9
 8001a8c:	4640      	mov	r0, r8
 8001a8e:	47d0      	blx	sl
 8001a90:	3001      	adds	r0, #1
 8001a92:	d09d      	beq.n	80019d0 <_printf_i+0x15c>
 8001a94:	3501      	adds	r5, #1
 8001a96:	68e3      	ldr	r3, [r4, #12]
 8001a98:	9903      	ldr	r1, [sp, #12]
 8001a9a:	1a5b      	subs	r3, r3, r1
 8001a9c:	42ab      	cmp	r3, r5
 8001a9e:	dcf2      	bgt.n	8001a86 <_printf_i+0x212>
 8001aa0:	e7eb      	b.n	8001a7a <_printf_i+0x206>
 8001aa2:	2500      	movs	r5, #0
 8001aa4:	f104 0619 	add.w	r6, r4, #25
 8001aa8:	e7f5      	b.n	8001a96 <_printf_i+0x222>
 8001aaa:	bf00      	nop
 8001aac:	08001db3 	.word	0x08001db3
 8001ab0:	08001dc4 	.word	0x08001dc4

08001ab4 <__sflush_r>:
 8001ab4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001abc:	0716      	lsls	r6, r2, #28
 8001abe:	4605      	mov	r5, r0
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	d454      	bmi.n	8001b6e <__sflush_r+0xba>
 8001ac4:	684b      	ldr	r3, [r1, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	dc02      	bgt.n	8001ad0 <__sflush_r+0x1c>
 8001aca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	dd48      	ble.n	8001b62 <__sflush_r+0xae>
 8001ad0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ad2:	2e00      	cmp	r6, #0
 8001ad4:	d045      	beq.n	8001b62 <__sflush_r+0xae>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001adc:	682f      	ldr	r7, [r5, #0]
 8001ade:	6a21      	ldr	r1, [r4, #32]
 8001ae0:	602b      	str	r3, [r5, #0]
 8001ae2:	d030      	beq.n	8001b46 <__sflush_r+0x92>
 8001ae4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ae6:	89a3      	ldrh	r3, [r4, #12]
 8001ae8:	0759      	lsls	r1, r3, #29
 8001aea:	d505      	bpl.n	8001af8 <__sflush_r+0x44>
 8001aec:	6863      	ldr	r3, [r4, #4]
 8001aee:	1ad2      	subs	r2, r2, r3
 8001af0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001af2:	b10b      	cbz	r3, 8001af8 <__sflush_r+0x44>
 8001af4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001af6:	1ad2      	subs	r2, r2, r3
 8001af8:	2300      	movs	r3, #0
 8001afa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001afc:	6a21      	ldr	r1, [r4, #32]
 8001afe:	4628      	mov	r0, r5
 8001b00:	47b0      	blx	r6
 8001b02:	1c43      	adds	r3, r0, #1
 8001b04:	89a3      	ldrh	r3, [r4, #12]
 8001b06:	d106      	bne.n	8001b16 <__sflush_r+0x62>
 8001b08:	6829      	ldr	r1, [r5, #0]
 8001b0a:	291d      	cmp	r1, #29
 8001b0c:	d82b      	bhi.n	8001b66 <__sflush_r+0xb2>
 8001b0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb8 <__sflush_r+0x104>)
 8001b10:	410a      	asrs	r2, r1
 8001b12:	07d6      	lsls	r6, r2, #31
 8001b14:	d427      	bmi.n	8001b66 <__sflush_r+0xb2>
 8001b16:	2200      	movs	r2, #0
 8001b18:	6062      	str	r2, [r4, #4]
 8001b1a:	04d9      	lsls	r1, r3, #19
 8001b1c:	6922      	ldr	r2, [r4, #16]
 8001b1e:	6022      	str	r2, [r4, #0]
 8001b20:	d504      	bpl.n	8001b2c <__sflush_r+0x78>
 8001b22:	1c42      	adds	r2, r0, #1
 8001b24:	d101      	bne.n	8001b2a <__sflush_r+0x76>
 8001b26:	682b      	ldr	r3, [r5, #0]
 8001b28:	b903      	cbnz	r3, 8001b2c <__sflush_r+0x78>
 8001b2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8001b2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b2e:	602f      	str	r7, [r5, #0]
 8001b30:	b1b9      	cbz	r1, 8001b62 <__sflush_r+0xae>
 8001b32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b36:	4299      	cmp	r1, r3
 8001b38:	d002      	beq.n	8001b40 <__sflush_r+0x8c>
 8001b3a:	4628      	mov	r0, r5
 8001b3c:	f7ff fbf2 	bl	8001324 <_free_r>
 8001b40:	2300      	movs	r3, #0
 8001b42:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b44:	e00d      	b.n	8001b62 <__sflush_r+0xae>
 8001b46:	2301      	movs	r3, #1
 8001b48:	4628      	mov	r0, r5
 8001b4a:	47b0      	blx	r6
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	1c50      	adds	r0, r2, #1
 8001b50:	d1c9      	bne.n	8001ae6 <__sflush_r+0x32>
 8001b52:	682b      	ldr	r3, [r5, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0c6      	beq.n	8001ae6 <__sflush_r+0x32>
 8001b58:	2b1d      	cmp	r3, #29
 8001b5a:	d001      	beq.n	8001b60 <__sflush_r+0xac>
 8001b5c:	2b16      	cmp	r3, #22
 8001b5e:	d11e      	bne.n	8001b9e <__sflush_r+0xea>
 8001b60:	602f      	str	r7, [r5, #0]
 8001b62:	2000      	movs	r0, #0
 8001b64:	e022      	b.n	8001bac <__sflush_r+0xf8>
 8001b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	e01b      	b.n	8001ba6 <__sflush_r+0xf2>
 8001b6e:	690f      	ldr	r7, [r1, #16]
 8001b70:	2f00      	cmp	r7, #0
 8001b72:	d0f6      	beq.n	8001b62 <__sflush_r+0xae>
 8001b74:	0793      	lsls	r3, r2, #30
 8001b76:	680e      	ldr	r6, [r1, #0]
 8001b78:	bf08      	it	eq
 8001b7a:	694b      	ldreq	r3, [r1, #20]
 8001b7c:	600f      	str	r7, [r1, #0]
 8001b7e:	bf18      	it	ne
 8001b80:	2300      	movne	r3, #0
 8001b82:	eba6 0807 	sub.w	r8, r6, r7
 8001b86:	608b      	str	r3, [r1, #8]
 8001b88:	f1b8 0f00 	cmp.w	r8, #0
 8001b8c:	dde9      	ble.n	8001b62 <__sflush_r+0xae>
 8001b8e:	6a21      	ldr	r1, [r4, #32]
 8001b90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001b92:	4643      	mov	r3, r8
 8001b94:	463a      	mov	r2, r7
 8001b96:	4628      	mov	r0, r5
 8001b98:	47b0      	blx	r6
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	dc08      	bgt.n	8001bb0 <__sflush_r+0xfc>
 8001b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ba6:	81a3      	strh	r3, [r4, #12]
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bb0:	4407      	add	r7, r0
 8001bb2:	eba8 0800 	sub.w	r8, r8, r0
 8001bb6:	e7e7      	b.n	8001b88 <__sflush_r+0xd4>
 8001bb8:	dfbffffe 	.word	0xdfbffffe

08001bbc <_fflush_r>:
 8001bbc:	b538      	push	{r3, r4, r5, lr}
 8001bbe:	690b      	ldr	r3, [r1, #16]
 8001bc0:	4605      	mov	r5, r0
 8001bc2:	460c      	mov	r4, r1
 8001bc4:	b913      	cbnz	r3, 8001bcc <_fflush_r+0x10>
 8001bc6:	2500      	movs	r5, #0
 8001bc8:	4628      	mov	r0, r5
 8001bca:	bd38      	pop	{r3, r4, r5, pc}
 8001bcc:	b118      	cbz	r0, 8001bd6 <_fflush_r+0x1a>
 8001bce:	6a03      	ldr	r3, [r0, #32]
 8001bd0:	b90b      	cbnz	r3, 8001bd6 <_fflush_r+0x1a>
 8001bd2:	f7ff f9ad 	bl	8000f30 <__sinit>
 8001bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f3      	beq.n	8001bc6 <_fflush_r+0xa>
 8001bde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001be0:	07d0      	lsls	r0, r2, #31
 8001be2:	d404      	bmi.n	8001bee <_fflush_r+0x32>
 8001be4:	0599      	lsls	r1, r3, #22
 8001be6:	d402      	bmi.n	8001bee <_fflush_r+0x32>
 8001be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bea:	f7ff fb98 	bl	800131e <__retarget_lock_acquire_recursive>
 8001bee:	4628      	mov	r0, r5
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	f7ff ff5f 	bl	8001ab4 <__sflush_r>
 8001bf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001bf8:	07da      	lsls	r2, r3, #31
 8001bfa:	4605      	mov	r5, r0
 8001bfc:	d4e4      	bmi.n	8001bc8 <_fflush_r+0xc>
 8001bfe:	89a3      	ldrh	r3, [r4, #12]
 8001c00:	059b      	lsls	r3, r3, #22
 8001c02:	d4e1      	bmi.n	8001bc8 <_fflush_r+0xc>
 8001c04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c06:	f7ff fb8b 	bl	8001320 <__retarget_lock_release_recursive>
 8001c0a:	e7dd      	b.n	8001bc8 <_fflush_r+0xc>

08001c0c <__swhatbuf_r>:
 8001c0c:	b570      	push	{r4, r5, r6, lr}
 8001c0e:	460c      	mov	r4, r1
 8001c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c14:	2900      	cmp	r1, #0
 8001c16:	b096      	sub	sp, #88	@ 0x58
 8001c18:	4615      	mov	r5, r2
 8001c1a:	461e      	mov	r6, r3
 8001c1c:	da0d      	bge.n	8001c3a <__swhatbuf_r+0x2e>
 8001c1e:	89a3      	ldrh	r3, [r4, #12]
 8001c20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	bf14      	ite	ne
 8001c2a:	2340      	movne	r3, #64	@ 0x40
 8001c2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001c30:	2000      	movs	r0, #0
 8001c32:	6031      	str	r1, [r6, #0]
 8001c34:	602b      	str	r3, [r5, #0]
 8001c36:	b016      	add	sp, #88	@ 0x58
 8001c38:	bd70      	pop	{r4, r5, r6, pc}
 8001c3a:	466a      	mov	r2, sp
 8001c3c:	f000 f848 	bl	8001cd0 <_fstat_r>
 8001c40:	2800      	cmp	r0, #0
 8001c42:	dbec      	blt.n	8001c1e <__swhatbuf_r+0x12>
 8001c44:	9901      	ldr	r1, [sp, #4]
 8001c46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001c4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001c4e:	4259      	negs	r1, r3
 8001c50:	4159      	adcs	r1, r3
 8001c52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c56:	e7eb      	b.n	8001c30 <__swhatbuf_r+0x24>

08001c58 <__smakebuf_r>:
 8001c58:	898b      	ldrh	r3, [r1, #12]
 8001c5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c5c:	079d      	lsls	r5, r3, #30
 8001c5e:	4606      	mov	r6, r0
 8001c60:	460c      	mov	r4, r1
 8001c62:	d507      	bpl.n	8001c74 <__smakebuf_r+0x1c>
 8001c64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001c68:	6023      	str	r3, [r4, #0]
 8001c6a:	6123      	str	r3, [r4, #16]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	6163      	str	r3, [r4, #20]
 8001c70:	b003      	add	sp, #12
 8001c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c74:	ab01      	add	r3, sp, #4
 8001c76:	466a      	mov	r2, sp
 8001c78:	f7ff ffc8 	bl	8001c0c <__swhatbuf_r>
 8001c7c:	9f00      	ldr	r7, [sp, #0]
 8001c7e:	4605      	mov	r5, r0
 8001c80:	4639      	mov	r1, r7
 8001c82:	4630      	mov	r0, r6
 8001c84:	f7ff fbba 	bl	80013fc <_malloc_r>
 8001c88:	b948      	cbnz	r0, 8001c9e <__smakebuf_r+0x46>
 8001c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c8e:	059a      	lsls	r2, r3, #22
 8001c90:	d4ee      	bmi.n	8001c70 <__smakebuf_r+0x18>
 8001c92:	f023 0303 	bic.w	r3, r3, #3
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	81a3      	strh	r3, [r4, #12]
 8001c9c:	e7e2      	b.n	8001c64 <__smakebuf_r+0xc>
 8001c9e:	89a3      	ldrh	r3, [r4, #12]
 8001ca0:	6020      	str	r0, [r4, #0]
 8001ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ca6:	81a3      	strh	r3, [r4, #12]
 8001ca8:	9b01      	ldr	r3, [sp, #4]
 8001caa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001cae:	b15b      	cbz	r3, 8001cc8 <__smakebuf_r+0x70>
 8001cb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cb4:	4630      	mov	r0, r6
 8001cb6:	f000 f81d 	bl	8001cf4 <_isatty_r>
 8001cba:	b128      	cbz	r0, 8001cc8 <__smakebuf_r+0x70>
 8001cbc:	89a3      	ldrh	r3, [r4, #12]
 8001cbe:	f023 0303 	bic.w	r3, r3, #3
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	81a3      	strh	r3, [r4, #12]
 8001cc8:	89a3      	ldrh	r3, [r4, #12]
 8001cca:	431d      	orrs	r5, r3
 8001ccc:	81a5      	strh	r5, [r4, #12]
 8001cce:	e7cf      	b.n	8001c70 <__smakebuf_r+0x18>

08001cd0 <_fstat_r>:
 8001cd0:	b538      	push	{r3, r4, r5, lr}
 8001cd2:	4d07      	ldr	r5, [pc, #28]	@ (8001cf0 <_fstat_r+0x20>)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	4608      	mov	r0, r1
 8001cda:	4611      	mov	r1, r2
 8001cdc:	602b      	str	r3, [r5, #0]
 8001cde:	f7ff f812 	bl	8000d06 <_fstat>
 8001ce2:	1c43      	adds	r3, r0, #1
 8001ce4:	d102      	bne.n	8001cec <_fstat_r+0x1c>
 8001ce6:	682b      	ldr	r3, [r5, #0]
 8001ce8:	b103      	cbz	r3, 8001cec <_fstat_r+0x1c>
 8001cea:	6023      	str	r3, [r4, #0]
 8001cec:	bd38      	pop	{r3, r4, r5, pc}
 8001cee:	bf00      	nop
 8001cf0:	200001b8 	.word	0x200001b8

08001cf4 <_isatty_r>:
 8001cf4:	b538      	push	{r3, r4, r5, lr}
 8001cf6:	4d06      	ldr	r5, [pc, #24]	@ (8001d10 <_isatty_r+0x1c>)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	602b      	str	r3, [r5, #0]
 8001d00:	f7ff f811 	bl	8000d26 <_isatty>
 8001d04:	1c43      	adds	r3, r0, #1
 8001d06:	d102      	bne.n	8001d0e <_isatty_r+0x1a>
 8001d08:	682b      	ldr	r3, [r5, #0]
 8001d0a:	b103      	cbz	r3, 8001d0e <_isatty_r+0x1a>
 8001d0c:	6023      	str	r3, [r4, #0]
 8001d0e:	bd38      	pop	{r3, r4, r5, pc}
 8001d10:	200001b8 	.word	0x200001b8

08001d14 <_sbrk_r>:
 8001d14:	b538      	push	{r3, r4, r5, lr}
 8001d16:	4d06      	ldr	r5, [pc, #24]	@ (8001d30 <_sbrk_r+0x1c>)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	602b      	str	r3, [r5, #0]
 8001d20:	f7ff f81a 	bl	8000d58 <_sbrk>
 8001d24:	1c43      	adds	r3, r0, #1
 8001d26:	d102      	bne.n	8001d2e <_sbrk_r+0x1a>
 8001d28:	682b      	ldr	r3, [r5, #0]
 8001d2a:	b103      	cbz	r3, 8001d2e <_sbrk_r+0x1a>
 8001d2c:	6023      	str	r3, [r4, #0]
 8001d2e:	bd38      	pop	{r3, r4, r5, pc}
 8001d30:	200001b8 	.word	0x200001b8

08001d34 <_init>:
 8001d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d36:	bf00      	nop
 8001d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d3a:	bc08      	pop	{r3}
 8001d3c:	469e      	mov	lr, r3
 8001d3e:	4770      	bx	lr

08001d40 <_fini>:
 8001d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d42:	bf00      	nop
 8001d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d46:	bc08      	pop	{r3}
 8001d48:	469e      	mov	lr, r3
 8001d4a:	4770      	bx	lr
